{
 "Conditions": {
  "IsFailoverRegion": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "PrimaryRegionName"
      },
      {
       "Ref": "AWS::Region"
      }
     ]
    }
   ]
  },
  "IsPrimaryRegion": {
   "Fn::Equals": [
    {
     "Ref": "PrimaryRegionName"
    },
    {
     "Ref": "AWS::Region"
    }
   ]
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [],
   "ParameterLabels": {}
  },
  "Comments": "",
  "CreatedBy": "Carter Meyers (AWS)",
  "Description": "This application deploys a Global RDS Aurora cluster.",
  "LastUpdated": "November 29, 2022",
  "Version": "v1.0"
 },
 "Outputs": {
  "DatabaseACLID": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "DatabaseACL",
     "Id"
    ]
   }
  },
  "FailoverDatabaseSubnetID": {
   "Condition": "",
   "Value": {
    "Ref": "FailoverDatabaseSubnet"
   }
  },
  "FailoverPrivateSubnetID": {
   "Condition": "",
   "Value": {
    "Ref": "FailoverPrivateSubnet"
   }
  },
  "FailoverPublicSubnetID": {
   "Condition": "",
   "Value": {
    "Ref": "FailoverPublicSubnet"
   }
  },
  "LambdaSecurityGroupID": {
   "Condition": "",
   "Value": {
    "Ref": "LambdaSecurityGroup"
   }
  },
  "PrimaryDatabaseSubnetID": {
   "Condition": "",
   "Value": {
    "Ref": "PrimaryDatabaseSubnet"
   }
  },
  "PrimaryPrivateSubnetID": {
   "Condition": "",
   "Value": {
    "Ref": "PrimaryPrivateSubnet"
   }
  },
  "PrimaryPublicSubnetID": {
   "Condition": "",
   "Value": {
    "Ref": "PrimaryPublicSubnet"
   }
  },
  "VPCExport": {
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "MainStackName"
       },
       "-VPCId"
      ]
     ]
    }
   },
   "Value": {
    "Ref": "VPC"
   }
  },
  "VPCID": {
   "Condition": "",
   "Value": {
    "Ref": "VPC"
   }
  }
 },
 "Parameters": {
  "CodeDownloadURL": {
   "Default": "https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main",
   "Description": "The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.",
   "Type": "String"
  },
  "DBAdminPassword": {
   "Description": "The password to be used for the RDS Aurora admin account.",
   "NoEcho": true,
   "Type": "String"
  },
  "DBAdminUsername": {
   "Description": "The username to be used for the RDS Aurora admin account.",
   "Type": "String"
  },
  "FailoverFailoverDatabaseSubnetCIDR": {
   "Default": "10.10.13.0/24",
   "Description": "The CIDR range you wish to use for your failover database subnet.",
   "Type": "String"
  },
  "FailoverFailoverPrivateSubnetCIDR": {
   "Default": "10.10.12.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "FailoverFailoverPublicSubnetCIDR": {
   "Default": "10.10.11.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "FailoverKMSKeyID": {
   "Description": "The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets Manager). This must correspond to a multi-region CMK available in both the primary and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html",
   "Type": "String"
  },
  "FailoverPrimaryDatabaseSubnetCIDR": {
   "Default": "10.10.10.0/24",
   "Description": "The CIDR range you wish to use for your primary database subnet.",
   "Type": "String"
  },
  "FailoverPrimaryPrivateSubnetCIDR": {
   "Default": "10.10.9.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "FailoverPrimaryPublicSubnetCIDR": {
   "Default": "10.10.8.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "FailoverRegionName": {
   "Description": "The name of the failover region (e.g., us-east-1)",
   "Type": "String"
  },
  "FailoverVPCCIDR": {
   "Default": "10.10.8.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  },
  "MainStackName": {
   "Type": "String"
  },
  "PrimaryFailoverDatabaseSubnetCIDR": {
   "Default": "10.10.5.0/24",
   "Description": "The CIDR range you wish to use for your failover database subnet.",
   "Type": "String"
  },
  "PrimaryFailoverPrivateSubnetCIDR": {
   "Default": "10.10.4.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "PrimaryFailoverPublicSubnetCIDR": {
   "Default": "10.10.3.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "PrimaryKMSKeyID": {
   "Description": "The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets Manager). This must correspond to a multi-region CMK available in both the primary and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html",
   "Type": "String"
  },
  "PrimaryPrimaryDatabaseSubnetCIDR": {
   "Default": "10.10.2.0/24",
   "Description": "The CIDR range you wish to use for your primary database subnet.",
   "Type": "String"
  },
  "PrimaryPrimaryPrivateSubnetCIDR": {
   "Default": "10.10.1.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "PrimaryPrimaryPublicSubnetCIDR": {
   "Default": "10.10.0.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "PrimaryRegionName": {
   "Description": "The name of the primary region (e.g., us-east-1)",
   "Type": "String"
  },
  "PrimaryVPCCIDR": {
   "Default": "10.10.0.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  },
  "PublicFQDN": {
   "Description": "The FQDN to be used by this application. An Amazon ACM Certificate will be issued for this FQDN.",
   "Type": "String"
  },
  "PublicHostedZoneID": {
   "Description": "The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.",
   "Type": "String"
  }
 },
 "Resources": {
  "DatabaseACL": {
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "-",
        [
         {
          "Ref": "AWS::StackName"
         },
         "Database"
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::NetworkAcl"
  },
  "DatabaseACLEgressEntry": {
   "Properties": {
    "CidrBlock": "0.0.0.0/0",
    "Egress": true,
    "NetworkAclId": {
     "Ref": "DatabaseACL"
    },
    "Protocol": -1,
    "RuleAction": "allow",
    "RuleNumber": 100
   },
   "Type": "AWS::EC2::NetworkAclEntry"
  },
  "DatabaseACLIDParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Database ACL ID for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "DatabaseACLID"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "DatabaseACL",
      "Id"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "DatabaseACLIngressEntry": {
   "Properties": {
    "CidrBlock": "0.0.0.0/0",
    "Egress": false,
    "NetworkAclId": {
     "Ref": "DatabaseACL"
    },
    "Protocol": -1,
    "RuleAction": "allow",
    "RuleNumber": 100
   },
   "Type": "AWS::EC2::NetworkAclEntry"
  },
  "FailoverDatabaseRouteTable": {
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "FailoverDatabaseRouteTable",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::RouteTable"
  },
  "FailoverDatabaseRouteToNATGateway": {
   "DependsOn": [
    "FailoverNATGateway",
    "FailoverDatabaseRouteTable"
   ],
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "FailoverNATGateway"
    },
    "RouteTableId": {
     "Ref": "FailoverDatabaseRouteTable"
    }
   },
   "Type": "AWS::EC2::Route"
  },
  "FailoverDatabaseSubnet": {
   "DependsOn": [
    "VPC"
   ],
   "Properties": {
    "AvailabilityZone": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::Region"
       },
       "b"
      ]
     ]
    },
    "CidrBlock": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      },
      {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     ]
    },
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "FailoverDatabaseSubnet",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::Subnet"
  },
  "FailoverDatabaseSubnetACLAssociation": {
   "Properties": {
    "NetworkAclId": {
     "Ref": "DatabaseACL"
    },
    "SubnetId": {
     "Ref": "FailoverDatabaseSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetNetworkAclAssociation"
  },
  "FailoverDatabaseSubnetIDParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Failover Database Subnet for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "FailoverDatabaseSubnetID"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "FailoverDatabaseSubnet"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "FailoverDatabaseSubnetTableAssociation": {
   "DependsOn": [
    "VPC",
    "FailoverDatabaseSubnet",
    "FailoverDatabaseRouteTable"
   ],
   "Properties": {
    "RouteTableId": {
     "Ref": "FailoverDatabaseRouteTable"
    },
    "SubnetId": {
     "Ref": "FailoverDatabaseSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetRouteTableAssociation"
  },
  "FailoverNATGateway": {
   "DependsOn": [
    "FailoverPublicSubnet",
    "FailoverNATGatewayEIP"
   ],
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "FailoverNATGatewayEIP",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "FailoverPublicSubnet"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "FailoverNATGateway",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ]
   },
   "Type": "AWS::EC2::NatGateway"
  },
  "FailoverNATGatewayEIP": {
   "Properties": {
    "Domain": "VPC"
   },
   "Type": "AWS::EC2::EIP"
  },
  "FailoverPrivateRouteTable": {
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "FailoverPrivateRouteTable",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::RouteTable"
  },
  "FailoverPrivateRouteToNATGateway": {
   "DependsOn": [
    "FailoverNATGateway",
    "FailoverPrivateRouteTable"
   ],
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "FailoverNATGateway"
    },
    "RouteTableId": {
     "Ref": "FailoverPrivateRouteTable"
    }
   },
   "Type": "AWS::EC2::Route"
  },
  "FailoverPrivateSubnet": {
   "DependsOn": [
    "VPC"
   ],
   "Properties": {
    "AvailabilityZone": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::Region"
       },
       "b"
      ]
     ]
    },
    "CidrBlock": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      },
      {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     ]
    },
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "FailoverPrivateSubnet",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::Subnet"
  },
  "FailoverPrivateSubnetIDParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Failover Private Subnet for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "FailoverPrivateSubnetID"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "FailoverPrivateSubnet"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "FailoverPrivateSubnetTableAssociation": {
   "DependsOn": [
    "VPC",
    "FailoverPrivateSubnet",
    "FailoverPrivateRouteTable"
   ],
   "Properties": {
    "RouteTableId": {
     "Ref": "FailoverPrivateRouteTable"
    },
    "SubnetId": {
     "Ref": "FailoverPrivateSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetRouteTableAssociation"
  },
  "FailoverPublicSubnet": {
   "DependsOn": [
    "VPC"
   ],
   "Properties": {
    "AvailabilityZone": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::Region"
       },
       "b"
      ]
     ]
    },
    "CidrBlock": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      },
      {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     ]
    },
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "FailoverPublicSubnet",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::Subnet"
  },
  "FailoverPublicSubnetIDParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Failover Public Subnet for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "FailoverPublicSubnetID"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "FailoverPublicSubnet"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "FailoverPublicSubnetTableAssociation": {
   "DependsOn": [
    "VPC",
    "FailoverPublicSubnet",
    "PublicRouteTable"
   ],
   "Properties": {
    "RouteTableId": {
     "Ref": "PublicRouteTable"
    },
    "SubnetId": {
     "Ref": "FailoverPublicSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetRouteTableAssociation"
  },
  "InternetGateway": {
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Type": "AWS::EC2::InternetGateway"
  },
  "InternetGatewayVPCAssociation": {
   "DependsOn": [
    "VPC",
    "InternetGateway"
   ],
   "Properties": {
    "InternetGatewayId": {
     "Ref": "InternetGateway"
    },
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::VPCGatewayAttachment"
  },
  "LambdaSecurityGroup": {
   "Properties": {
    "GroupDescription": "Lambda Security Group",
    "SecurityGroupEgress": [],
    "SecurityGroupIngress": [],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "LambdaSecurityGroupIDParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda Security Group ID for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "LambdaSecurityGroupID"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "LambdaSecurityGroup"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "PrimaryDatabaseRouteTable": {
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "PrimaryDatabaseRouteTable",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::RouteTable"
  },
  "PrimaryDatabaseRouteToNATGateway": {
   "DependsOn": [
    "PrimaryNATGateway",
    "PrimaryDatabaseRouteTable"
   ],
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "PrimaryNATGateway"
    },
    "RouteTableId": {
     "Ref": "PrimaryDatabaseRouteTable"
    }
   },
   "Type": "AWS::EC2::Route"
  },
  "PrimaryDatabaseSubnet": {
   "DependsOn": [
    "VPC"
   ],
   "Properties": {
    "AvailabilityZone": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::Region"
       },
       "a"
      ]
     ]
    },
    "CidrBlock": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      },
      {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     ]
    },
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "PrimaryDatabaseSubnet",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::Subnet"
  },
  "PrimaryDatabaseSubnetACLAssociation": {
   "Properties": {
    "NetworkAclId": {
     "Ref": "DatabaseACL"
    },
    "SubnetId": {
     "Ref": "PrimaryDatabaseSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetNetworkAclAssociation"
  },
  "PrimaryDatabaseSubnetIDParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Primary Database Subnet for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "PrimaryDatabaseSubnetID"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "PrimaryDatabaseSubnet"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "PrimaryDatabaseSubnetTableAssociation": {
   "DependsOn": [
    "VPC",
    "PrimaryDatabaseSubnet",
    "PrimaryDatabaseRouteTable"
   ],
   "Properties": {
    "RouteTableId": {
     "Ref": "PrimaryDatabaseRouteTable"
    },
    "SubnetId": {
     "Ref": "PrimaryDatabaseSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetRouteTableAssociation"
  },
  "PrimaryNATGateway": {
   "DependsOn": [
    "PrimaryPublicSubnet",
    "PrimaryNATGatewayEIP"
   ],
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "PrimaryNATGatewayEIP",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "PrimaryPublicSubnet"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "PrimaryNATGateway",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ]
   },
   "Type": "AWS::EC2::NatGateway"
  },
  "PrimaryNATGatewayEIP": {
   "Properties": {
    "Domain": "VPC"
   },
   "Type": "AWS::EC2::EIP"
  },
  "PrimaryPrivateRouteTable": {
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "PrimaryPrivateRouteTable",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::RouteTable"
  },
  "PrimaryPrivateRouteToNATGateway": {
   "DependsOn": [
    "PrimaryNATGateway",
    "PrimaryPrivateRouteTable"
   ],
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "PrimaryNATGateway"
    },
    "RouteTableId": {
     "Ref": "PrimaryPrivateRouteTable"
    }
   },
   "Type": "AWS::EC2::Route"
  },
  "PrimaryPrivateSubnet": {
   "DependsOn": [
    "VPC"
   ],
   "Properties": {
    "AvailabilityZone": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::Region"
       },
       "a"
      ]
     ]
    },
    "CidrBlock": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      },
      {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     ]
    },
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "PrimaryPrivateSubnet",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::Subnet"
  },
  "PrimaryPrivateSubnetIDParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Primary Private Subnet for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "PrimaryPrivateSubnetID"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "PrimaryPrivateSubnet"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "PrimaryPrivateSubnetTableAssociation": {
   "DependsOn": [
    "VPC",
    "PrimaryPrivateSubnet",
    "PrimaryPrivateRouteTable"
   ],
   "Properties": {
    "RouteTableId": {
     "Ref": "PrimaryPrivateRouteTable"
    },
    "SubnetId": {
     "Ref": "PrimaryPrivateSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetRouteTableAssociation"
  },
  "PrimaryPublicSubnet": {
   "DependsOn": [
    "VPC"
   ],
   "Properties": {
    "AvailabilityZone": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::Region"
       },
       "a"
      ]
     ]
    },
    "CidrBlock": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      },
      {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     ]
    },
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "PrimaryPublicSubnet",
         "-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::Subnet"
  },
  "PrimaryPublicSubnetIDParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Primary Public Subnet for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "PrimaryPublicSubnetID"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "PrimaryPublicSubnet"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "PrimaryPublicSubnetTableAssociation": {
   "DependsOn": [
    "VPC",
    "PrimaryPublicSubnet",
    "PublicRouteTable"
   ],
   "Properties": {
    "RouteTableId": {
     "Ref": "PublicRouteTable"
    },
    "SubnetId": {
     "Ref": "PrimaryPublicSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetRouteTableAssociation"
  },
  "PublicRouteTable": {
   "DependsOn": [
    "VPC"
   ],
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "PublicRouteTable-",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::EC2::RouteTable"
  },
  "PublicRouteToInternet": {
   "DependsOn": [
    "InternetGateway",
    "PublicRouteTable"
   ],
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "InternetGateway"
    },
    "RouteTableId": {
     "Ref": "PublicRouteTable"
    }
   },
   "Type": "AWS::EC2::Route"
  },
  "VPC": {
   "Properties": {
    "CidrBlock": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryVPCCIDR"
      },
      {
       "Ref": "FailoverVPCCIDR"
      }
     ]
    },
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Type": "AWS::EC2::VPC"
  },
  "VPCIDParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "VPC for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "VPCID"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "VPC"
    }
   },
   "Type": "AWS::SSM::Parameter"
  }
 }
}