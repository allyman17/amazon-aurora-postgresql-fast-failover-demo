Conditions:
  IsFailoverRegion: !Not
    - !Equals
      - !Ref 'PrimaryRegionName'
      - !Ref 'AWS::Region'
  IsPrimaryRegion: !Equals
    - !Ref 'PrimaryRegionName'
    - !Ref 'AWS::Region'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: []
    ParameterLabels: {}
  Comments: ''
  CreatedBy: Carter Meyers (AWS)
  Description: This application deploys a Global RDS Aurora cluster.
  LastUpdated: November 29, 2022
  Version: v1.0
Parameters:
  CodeDownloadURL:
    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
    Description: The URL from which the supporting codebase can be downloaded. This
      codebase is used to deploy the demo dashboard.
    Type: String
  DBAdminPassword:
    Description: The password to be used for the RDS Aurora admin account.
    NoEcho: true
    Type: String
  DBAdminUsername:
    Description: The username to be used for the RDS Aurora admin account.
    Type: String
  FailoverFailoverDatabaseSubnetCIDR:
    Default: 10.10.13.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  FailoverFailoverPrivateSubnetCIDR:
    Default: 10.10.12.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  FailoverFailoverPublicSubnetCIDR:
    Default: 10.10.11.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  FailoverKMSKeyID:
    Description: >-
      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
      Manager). This must correspond to a multi-region CMK available in both the primary
      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
    Type: String
  FailoverLambdaLayerARN:
    Type: String
  FailoverPrimaryDatabaseSubnetCIDR:
    Default: 10.10.10.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  FailoverPrimaryPrivateSubnetCIDR:
    Default: 10.10.9.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  FailoverPrimaryPublicSubnetCIDR:
    Default: 10.10.8.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  FailoverRegionName:
    Description: The name of the failover region (e.g., us-east-1)
    Type: String
  FailoverVPCCIDR:
    Default: 10.10.8.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  MainStackName:
    Type: String
  PrimaryFailoverDatabaseSubnetCIDR:
    Default: 10.10.5.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  PrimaryFailoverPrivateSubnetCIDR:
    Default: 10.10.4.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  PrimaryFailoverPublicSubnetCIDR:
    Default: 10.10.3.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  PrimaryKMSKeyID:
    Description: >-
      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
      Manager). This must correspond to a multi-region CMK available in both the primary
      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
    Type: String
  PrimaryLambdaLayerARN:
    Type: String
  PrimaryPrimaryDatabaseSubnetCIDR:
    Default: 10.10.2.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  PrimaryPrimaryPrivateSubnetCIDR:
    Default: 10.10.1.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  PrimaryPrimaryPublicSubnetCIDR:
    Default: 10.10.0.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  PrimaryRegionName:
    Description: The name of the primary region (e.g., us-east-1)
    Type: String
  PrimaryVPCCIDR:
    Default: 10.10.0.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  PrivateHostedZoneID:
    Type: String
  PublicFQDN:
    Description: The FQDN to be used by this application. An Amazon ACM Certificate
      will be issued for this FQDN.
    Type: String
  PublicHostedZoneID:
    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
    Type: String
Resources:
  ClientError:
    DependsOn:
      - ClientErrorRole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
          import boto3\nimport psycopg2\nimport dateutil.tz\nfrom datetime import\
          \ datetime\nfrom datetime import timedelta\nfrom botocore.exceptions import\
          \ ClientError as boto3_client_error\n\ndef get_region(context):\n    return\
          \ context.invoked_function_arn.split(':')[3]\n\ndef get_rds_credentials():\n\
          \    \n    secrets_manager_client = boto3.client('secretsmanager')\n\n \
          \   try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
          \            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\n        )\n\
          \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
          \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
          \ json.loads(get_secret_value_response['SecretString'])\n        \ndef addfivesec(firsttime):\n\
          \    return (datetime.strptime(str(firsttime), '%H:%M:%S')+timedelta(seconds=5)).strftime(\"\
          %H:%M:%S\")\n\ndef substractFiveSec(firsttime):\n    return (datetime.strptime(str(firsttime),\
          \ '%H:%M:%S')+timedelta(seconds=-5)).strftime(\"%H:%M:%S\")\n    \ndef addTime(label,data):\n\
          \    eastern = dateutil.tz.gettz('US/Pacific')\n    mynow=datetime.now(tz=eastern)\n\
          \    print((datetime.strptime(label[len(label)-1], '%H:%M:%S')+timedelta(seconds=9)))\n\
          \    print(datetime.strptime(mynow.strftime(\"%H:%M:%S\"), '%H:%M:%S'))\n\
          \    \n    \n    while((datetime.strptime(label[len(label)-1], '%H:%M:%S')+timedelta(seconds=9))\
          \    < datetime.strptime(mynow.strftime(\"%H:%M:%S\"), '%H:%M:%S')):\n \
          \       print('add')\n        label.pop(0)\n        data.pop(0)\n      \
          \  \n        label.append(addfivesec(label[len(label)-1]))\n        data.append('0')\n\
          \ndef lambda_handler(event, context):\n    \n    print(json.dumps(event))\n\
          \    \n    rds_secret = get_rds_credentials()\n\n    db_conn = psycopg2.connect(\n\
          \        host = rds_secret['host'],\n        port = rds_secret['port'],\n\
          \        user = rds_secret['username'],\n        password = rds_secret['password'],\n\
          \        database = rds_secret['database'],\n        connect_timeout = 3,\n\
          \        sslmode = 'require',\n    )\n        \n    curs=db_conn.cursor()\n\
          \    curs.execute(\"select insertedon, sum(1) from dataclient where http_code=500\
          \ group by insertedon order by insertedon desc limit 15\");\n    east1_TPS=\
          \ curs.fetchall()\n    \n    curs.close()\n    db_conn.close()\n    \n \
          \   \n    label_json=\"\"\n    data_json=\"\"\n    \n    label_arr=[]\n\
          \    data_arr=[]\n    \n    #for i in reversed(range(1,len(east1_TPS))):\n\
          \    #    label_arr.append(str(east1_TPS[i][0]))\n    #    data_arr.append(str(east1_TPS[i][1]))\n\
          \    \n    for r in reversed(east1_TPS):\n        label_arr.append(str(r[0]))\n\
          \        data_arr.append(str(r[1]))\n        \n        \n    if len(label_arr)>0:\n\
          \        for n in range(len(label_arr)+1,16):\n            label_arr.insert(0,\
          \ substractFiveSec(label_arr[0]))\n            data_arr.insert(0,'0')\n\
          \        \n        addTime(label_arr,data_arr)\n    \n    \n    i=-1\n \
          \   for r in label_arr:\n        i=i+1\n        if label_json!=\"\":\n \
          \           label_json+=\",\"\n        if data_json!=\"\":\n           \
          \ data_json+=\",\"\n            \n        label_json+= label_arr[i]\n  \
          \      data_json+=data_arr[i]\n    \n    \n    json_data=json.dumps({'labels':\
          \ label_json, 'data': data_json})\n    json_data='['+json_data+']'\n   \
          \ \n    return {\n        'statusCode': 200,\n        'headers': {\n   \
          \         'Access-Control-Allow-Headers': 'Content-Type',\n            'Access-Control-Allow-Origin':\
          \ '*',\n            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\n\
          \            'content-type': 'text/html'\n        },\n        'body': json_data\n\
          \    }\n"
      Description: ''
      Handler: index.handler
      Layers:
        - !If
          - IsPrimaryRegion
          - !Ref 'PrimaryLambdaLayerARN'
          - !Ref 'FailoverLambdaLayerARN'
      MemorySize: 128
      Role: !GetAtt 'ClientErrorRole.Arn'
      Runtime: python3.9
      Timeout: 60
      TracingConfig:
        Mode: PassThrough
      VpcConfig:
        SecurityGroupIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /LambdaSecurityGroupID}}
        SubnetIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /PrimaryPrivateSubnetID}}
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /FailoverPrivateSubnetID}}
    Type: AWS::Lambda::Function
  ClientErrorLogGroup:
    DeletionPolicy: Retain
    DependsOn:
      - ClientError
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'ClientError'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  ClientErrorMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.records')
            StatusCode: '200'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 400.*'
            StatusCode: '400'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 401.*'
            StatusCode: '401'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 403.*'
            StatusCode: '403'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 404.*'
            StatusCode: '404'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 415.*'
            StatusCode: '415'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 429.*'
            StatusCode: '429'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 500.*'
            StatusCode: '500'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{}'
          application/x-www-form-urlencoded: '{}'
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt 'ClientError.Arn'
            - /invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '400'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '401'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '403'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '404'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '415'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '429'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '500'
      OperationName: getClientError
      ResourceId: !Ref 'ClientErrorResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  ClientErrorMethodInvocationPermission:
    Condition: ''
    DependsOn:
      - ClientError
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'ClientError.Arn'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /APIID}}
          - /*/
          - GET
          - /
          - client-error
    Type: AWS::Lambda::Permission
  ClientErrorResource:
    Condition: ''
    DependsOn: []
    Properties:
      ParentId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIRootResourceID}}
      PathPart: client-error
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Resource
  ClientErrorResourceOptionsMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: '{}'
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref 'ClientErrorResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  ClientErrorRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - rds-db:Connect
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSProxyARN}}
                Sid: ConnectToRDSProxy
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSAdminSecretARN}}
                Sid: GetRDSAdminSecret
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  - !If
                    - IsPrimaryRegion
                    - !Ref 'PrimaryKMSKeyID'
                    - !Ref 'FailoverKMSKeyID'
                Sid: DecryptWithKMS
          PolicyName: database-secret-retrieval
    Type: AWS::IAM::Role
  ResetDemoEnvironment:
    DependsOn:
      - ResetDemoEnvironmentRole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "_N='Failed to Reset NACL: '\n_M='route53'\n_L='PRIVATE_HOSTED_ZONE_ID'\n\
          _K='CNAME'\n_J='Value'\n_I='Type'\n_H='TTL'\n_G='ResourceRecords'\n_F='Name'\n\
          _E='UPSERT'\n_D='ResourceRecordSet'\n_C='Action'\n_B='Changes'\n_A='PUBLIC_FQDN'\n\
          import sys\nsys.path.append('/opt')\nimport os,json,boto3,psycopg2,dateutil.tz\n\
          from datetime import datetime\nfrom botocore.exceptions import ClientError\
          \ as boto3_client_error\nr53_client=boto3.client(_M)\nevent_bridge_client=boto3.client('events')\n\
          def get_region(context):return context.invoked_function_arn.split(':')[3]\n\
          def get_rds_credentials():\n\tA=boto3.client('secretsmanager')\n\ttry:B=A.get_secret_value(SecretId=os.environ['RDS_ADMIN_SECRET_ARN'])\n\
          \texcept boto3_client_error as C:raise Exception('Failed to Retrieve RDS\
          \ Secret: '+str(C))\n\telse:return json.loads(B['SecretString'])\ndef update_dns_records():\n\
          \tE='comment';D='hostedZoneId';C='newValue';B='fqdn';F=boto3.client(_M);G=[{B:os.environ[_A],E:'Points\
          \ the Service FQDN Back to the Primary Web ALB',C:os.environ['PRIMARY_WEB_ALB_FQDN'],D:os.environ['PUBLIC_HOSTED_ZONE_ID']},{B:'db.writer.'+os.environ[_A],E:\"\
          Points the Internal DB Writer Endpoint Back to the Primary Cluster's Writer\"\
          ,C:os.environ['RDS_REGIONAL_WRITER_ENDPOINT'],D:os.environ[_L]},{B:'db.reader.'+os.environ[_A],E:\"\
          Points the Internal DB Writer Endpoint Back to the Primary Cluster's Reader\"\
          ,C:os.environ['RDS_REGIONAL_READER_ENDPOINT'],D:os.environ[_L]}]\n\tfor\
          \ A in G:F.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:A[B],_G:[{_J:A[C]}],_H:1,_I:_K}}]},HostedZoneId=A[D])\n\
          def promote_rds_proxy_to_primary_endoint():\n\tfor A in ['reader','writer']:B=r53_client.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:'db.'+A+'.'+os.environ[_A]+'.internal',_G:[{_J:os.environ['RDS_PROXY_'+A.upper()+'_ENDPOINT']}],_H:1,_I:_K}}]},HostedZoneId=os.environ[_L])\n\
          def cnameChangeCanaryToCluster():C='Z02605833FBBNQ31FGNI6';A='writer.cluster.endpoint.example.internal';B='database-3.cluster-c3uapa5iy3fn.us-west-1.rds.amazonaws.com';D=r53_client.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:A,_G:[{_J:B}],_H:1,_I:_K}}]},HostedZoneId=C);A='reader.cluster.endpoint.example.internal';B='database-3.cluster-ro-c3uapa5iy3fn.us-west-1.rds.amazonaws.com';D=r53_client.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:A,_G:[{_J:B}],_H:1,_I:_K}}]},HostedZoneId=C)\n\
          def disableRDSProxyCheckRule():A='checkRDSProxyTargetRegistered';B=event_bridge_client.disable_rule(Name=A)\n\
          def enable_canary_cron():\n\ttry:event_bridge_client.enable_rule(Name=os.environ['CANARY_CRON_NAME'])\n\
          \texcept boto3_client_error as A:raise Exception(_N+str(A))\ndef allow_traffic_to_primary_rds_cluster():\n\
          \tA=boto3.client('ec2',region_name=os.environ['PRIMARY_REGION_NAME'])\n\t\
          try:A.replace_network_acl_entry(Egress=False,Protocol='-1',CidrBlock='0.0.0.0/0',RuleAction='allow',RuleNumber=100,NetworkAclId=os.environ['RDS_ACL_ID'])\n\
          \texcept boto3_client_error as B:raise Exception(_N+str(B))\ndef lambda_handler(event,context):\n\
          \tallow_traffic_to_primary_rds_cluster();promote_rds_proxy_to_primary_endoint();enable_canary_cron();A=get_rds_credentials();B=psycopg2.connect(host=A['host'],port=A['port'],user=A['username'],sslmode='require',password=A['password'],database=A['database'],connect_timeout=3)\n\
          \tfor D in ['dataclient','dataserver','failoverevents']:C=B.cursor();C.execute('DELETE\
          \ FROM '+D);B.commit()\n\tC.close();B.close();return{'statusCode':200,'body':json.dumps('Reset\
          \ Successful')}"
      Description: ''
      Environment:
        Variables:
          CANARY_CRON_NAME: !Join
            - ''
            - - !Ref 'MainStackName'
              - -canary
          PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'
          PUBLIC_FQDN: !Ref 'PublicFQDN'
          PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneID'
          RDS_NACL_ID: !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /DatabaseACLID}}
          WEB_ALB_FQDN: !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /LoadBalancerFQDN}}
      Handler: index.handler
      Layers:
        - !If
          - IsPrimaryRegion
          - !Ref 'PrimaryLambdaLayerARN'
          - !Ref 'FailoverLambdaLayerARN'
      MemorySize: 128
      Role: !GetAtt 'ResetDemoEnvironmentRole.Arn'
      Runtime: python3.9
      Timeout: 60
      TracingConfig:
        Mode: PassThrough
      VpcConfig:
        SecurityGroupIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /LambdaSecurityGroupID}}
        SubnetIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /PrimaryPrivateSubnetID}}
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /FailoverPrivateSubnetID}}
    Type: AWS::Lambda::Function
  ResetDemoEnvironmentLogGroup:
    DeletionPolicy: Retain
    DependsOn:
      - ResetDemoEnvironment
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'ResetDemoEnvironment'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  ResetDemoEnvironmentMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.records')
            StatusCode: '200'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 400.*'
            StatusCode: '400'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 401.*'
            StatusCode: '401'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 403.*'
            StatusCode: '403'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 404.*'
            StatusCode: '404'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 415.*'
            StatusCode: '415'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 429.*'
            StatusCode: '429'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 500.*'
            StatusCode: '500'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{}'
          application/x-www-form-urlencoded: '{}'
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt 'ResetDemoEnvironment.Arn'
            - /invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '400'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '401'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '403'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '404'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '415'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '429'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '500'
      OperationName: getResetDemoEnvironment
      ResourceId: !Ref 'ResetDemoEnvironmentResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  ResetDemoEnvironmentMethodInvocationPermission:
    Condition: ''
    DependsOn:
      - ResetDemoEnvironment
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'ResetDemoEnvironment.Arn'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /APIID}}
          - /*/
          - GET
          - /
          - reset-demo-environment
    Type: AWS::Lambda::Permission
  ResetDemoEnvironmentResource:
    Condition: ''
    DependsOn: []
    Properties:
      ParentId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIRootResourceID}}
      PathPart: reset-demo-environment
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Resource
  ResetDemoEnvironmentResourceOptionsMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: '{}'
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref 'ResetDemoEnvironmentResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  ResetDemoEnvironmentRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - rds-db:Connect
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSProxyARN}}
                Sid: ConnectToRDSProxy
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSAdminSecretARN}}
                Sid: GetRDSAdminSecret
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  - !If
                    - IsPrimaryRegion
                    - !Ref 'PrimaryKMSKeyID'
                    - !Ref 'FailoverKMSKeyID'
                Sid: DecryptWithKMS
          PolicyName: database-secret-retrieval
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:ReplaceNetworkAclEntry
                Effect: Allow
                Resource:
                  - '*'
                Sid: UpdateACLEntry
              - Action:
                  - events:EnableRule
                  - events:DisableRule
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:events:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :rule/
                      - !Join
                        - ''
                        - - !Ref 'MainStackName'
                          - -canary
                  - !Join
                    - ''
                    - - 'arn:aws:events:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :rule/
                      - !Join
                        - ''
                        - - !Ref 'MainStackName'
                          - -proxy-monitor
                Sid: ManageCrons
              - Action:
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - arn:aws:route53:::hostedzone/
                      - !Ref 'PublicHostedZoneID'
                  - !Join
                    - ''
                    - - arn:aws:route53:::hostedzone/
                      - !Ref 'PrivateHostedZoneID'
                Sid: UpdateR53HostedZone
          PolicyName: custom-policy
    Type: AWS::IAM::Role
  TestTrafficTopic:
    Condition: IsPrimaryRegion
    Type: AWS::SNS::Topic
  TestTrafficTopicPermission:
    Condition: IsPrimaryRegion
    DependsOn:
      - TrafficGenerator
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'TrafficGenerator'
      Principal: sns.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref 'TestTrafficTopic'
    Type: AWS::Lambda::Permission
  TestTrafficTopicSubscription:
    Condition: IsPrimaryRegion
    DependsOn:
      - TrafficGenerator
      - TestTrafficTopic
      - TestTrafficTopicPermission
    Properties:
      Endpoint: !GetAtt 'TrafficGenerator.Arn'
      Protocol: lambda
      TopicArn: !Ref 'TestTrafficTopic'
    Type: AWS::SNS::Subscription
  TrafficGenerator:
    Condition: IsPrimaryRegion
    DependsOn:
      - TrafficGeneratorRole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import os\nimport time\nimport json\nimport boto3\n\ndef get_region(context):\n\
          \    return context.invoked_function_arn.split(':')[3]\n    \ndef lambda_handler(event,\
          \ context):\n    \n    print(json.dumps(event))\n\n    sns_client = boto3.client('sns')\n\
          \    \n    for i in range(0, 5000):\n        \n        sns_client.publish(\n\
          \            Message = 'Hello',\n            TargetArn = os.environ['TEST_TRAFFIC_TOPIC_ARN'],\n\
          \        )\n        \n        time.sleep(0.1)\n    \n    return {\n    \
          \    'statusCode': 200,\n        'body': json.dumps('Hello from ' + get_region(context)\
          \ + ' SNS Client Lambda!')\n    }\n"
      Description: ''
      Environment:
        Variables:
          TEST_TRAFFIC_TOPIC_ARN: !Ref 'TestTrafficTopic'
      Handler: index.handler
      Layers:
        - !If
          - IsPrimaryRegion
          - !Ref 'PrimaryLambdaLayerARN'
          - !Ref 'FailoverLambdaLayerARN'
      MemorySize: 128
      Role: !GetAtt 'TrafficGeneratorRole.Arn'
      Runtime: python3.9
      Timeout: 60
      TracingConfig:
        Mode: PassThrough
      VpcConfig:
        SecurityGroupIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /LambdaSecurityGroupID}}
        SubnetIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /PrimaryPrivateSubnetID}}
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /FailoverPrivateSubnetID}}
    Type: AWS::Lambda::Function
  TrafficGeneratorLogGroup:
    Condition: IsPrimaryRegion
    DeletionPolicy: Retain
    DependsOn:
      - TrafficGenerator
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'TrafficGenerator'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  TrafficGeneratorMethod:
    Condition: IsPrimaryRegion
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.records')
            StatusCode: '200'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 400.*'
            StatusCode: '400'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 401.*'
            StatusCode: '401'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 403.*'
            StatusCode: '403'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 404.*'
            StatusCode: '404'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 415.*'
            StatusCode: '415'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 429.*'
            StatusCode: '429'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 500.*'
            StatusCode: '500'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{}'
          application/x-www-form-urlencoded: '{}'
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt 'TrafficGenerator.Arn'
            - /invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '400'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '401'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '403'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '404'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '415'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '429'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '500'
      OperationName: getTrafficGenerator
      ResourceId: !Ref 'TrafficGeneratorResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  TrafficGeneratorMethodInvocationPermission:
    Condition: IsPrimaryRegion
    DependsOn:
      - TrafficGenerator
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'TrafficGenerator.Arn'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /APIID}}
          - /*/
          - GET
          - /
          - traffic-generator
    Type: AWS::Lambda::Permission
  TrafficGeneratorResource:
    Condition: IsPrimaryRegion
    DependsOn: []
    Properties:
      ParentId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIRootResourceID}}
      PathPart: traffic-generator
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Resource
  TrafficGeneratorResourceOptionsMethod:
    Condition: IsPrimaryRegion
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: '{}'
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref 'TrafficGeneratorResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  TrafficGeneratorRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      MaxSessionDuration: 3600
      Policies: []
    Type: AWS::IAM::Role
  TrafficGeneratorRoleGenerateTestTraffic:
    Condition: IsPrimaryRegion
    DependsOn:
      - TrafficGeneratorRole
      - TestTrafficTopic
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sns:Publish
            Effect: Allow
            Resource:
              - !Ref 'TestTrafficTopic'
            Sid: SendMessagesToSNS
      PolicyName: generate-test-traffic
      Roles:
        - !Ref 'TrafficGeneratorRole'
    Type: AWS::IAM::Policy
