Conditions:
  IsFailoverRegion: !Not
    - !Equals
      - !Ref 'PrimaryRegionName'
      - !Ref 'AWS::Region'
  IsPrimaryRegion: !Equals
    - !Ref 'PrimaryRegionName'
    - !Ref 'AWS::Region'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: []
    ParameterLabels: {}
  Comments: ''
  CreatedBy: Carter Meyers (AWS)
  Description: This application deploys a Global RDS Aurora cluster.
  LastUpdated: November 29, 2022
  Version: v1.0
Outputs:
  DashboardURLExport:
    Export:
      Name: !Join
        - ''
        - - !Ref 'MainStackName'
          - -DashboardURL
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'CloudFrontDistribution.DomainName'
        - ?apiHost=
        - !Ref 'AWS::Region'
        - .api.
        - !Ref 'PublicFQDN'
        - '&primaryRegion='
        - !Ref 'PrimaryRegionName'
        - '&failoverRegion='
        - !Ref 'FailoverRegionName'
Parameters:
  CodeDownloadURL:
    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
    Description: The URL from which the supporting codebase can be downloaded. This
      codebase is used to deploy the demo dashboard.
    Type: String
  DBAdminPassword:
    Description: The password to be used for the RDS Aurora admin account.
    NoEcho: true
    Type: String
  DBAdminUsername:
    Description: The username to be used for the RDS Aurora admin account.
    Type: String
  FailoverFailoverDatabaseSubnetCIDR:
    Default: 10.10.13.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  FailoverFailoverPrivateSubnetCIDR:
    Default: 10.10.12.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  FailoverFailoverPublicSubnetCIDR:
    Default: 10.10.11.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  FailoverKMSKeyID:
    Description: >-
      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
      Manager). This must correspond to a multi-region CMK available in both the primary
      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
    Type: String
  FailoverPrimaryDatabaseSubnetCIDR:
    Default: 10.10.10.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  FailoverPrimaryPrivateSubnetCIDR:
    Default: 10.10.9.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  FailoverPrimaryPublicSubnetCIDR:
    Default: 10.10.8.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  FailoverRegionName:
    Description: The name of the failover region (e.g., us-east-1)
    Type: String
  FailoverVPCCIDR:
    Default: 10.10.8.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  MainStackName:
    Type: String
  PrimaryFailoverDatabaseSubnetCIDR:
    Default: 10.10.5.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  PrimaryFailoverPrivateSubnetCIDR:
    Default: 10.10.4.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  PrimaryFailoverPublicSubnetCIDR:
    Default: 10.10.3.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  PrimaryKMSKeyID:
    Description: >-
      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
      Manager). This must correspond to a multi-region CMK available in both the primary
      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
    Type: String
  PrimaryPrimaryDatabaseSubnetCIDR:
    Default: 10.10.2.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  PrimaryPrimaryPrivateSubnetCIDR:
    Default: 10.10.1.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  PrimaryPrimaryPublicSubnetCIDR:
    Default: 10.10.0.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  PrimaryRegionName:
    Description: The name of the primary region (e.g., us-east-1)
    Type: String
  PrimaryVPCCIDR:
    Default: 10.10.0.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  PublicFQDN:
    Description: The FQDN to be used by this application. An Amazon ACM Certificate
      will be issued for this FQDN.
    Type: String
  PublicHostedZoneID:
    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
    Type: String
Resources:
  Bucket:
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Suspended
    Type: AWS::S3::Bucket
  BucketPolicy:
    DependsOn:
      - Bucket
      - CloudFrontAccessIdentity
    Properties:
      Bucket: !Ref 'Bucket'
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':iam::cloudfront:user/CloudFront Origin Access Identity '
                  - !Ref 'CloudFrontAccessIdentity'
            Resource:
              - !Join
                - ''
                - - !GetAtt 'Bucket.Arn'
                  - /*
    Type: AWS::S3::BucketPolicy
  CloudFrontAccessIdentity:
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Dashboard
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
  CloudFrontDistribution:
    DependsOn:
      - ResponseHeadersPolicy
      - CloudFrontAccessIdentity
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: true
          ResponseHeadersPolicyId: !Ref 'ResponseHeadersPolicy'
          TargetOriginId: dashboard-bucket
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: !If
          - IsPrimaryRegion
          - primary-region.html
          - failover-region.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt 'Bucket.DomainName'
            Id: dashboard-bucket
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref 'CloudFrontAccessIdentity'
    Type: AWS::CloudFront::Distribution
  DashboardCodeDeployer:
    DependsOn:
      - DashboardCodeDeployerRole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import sys\nimport subprocess\n\nsubprocess.call('pip install cfnresponse\
          \ -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr\
          \ = subprocess.DEVNULL)\nsys.path.insert(1, '/tmp/')\n\nimport os\nimport\
          \ json\nimport glob\nimport boto3\nimport shutil\nimport urllib3\nimport\
          \ zipfile\nimport mimetypes\nimport cfnresponse\nfrom collections import\
          \ defaultdict\nfrom botocore.exceptions import ClientError as boto3_client_error\n\
          \nhttp = urllib3.PoolManager()\n\ntry:\n    from urllib2 import HTTPError,\
          \ build_opener, HTTPHandler, Request\nexcept ImportError:\n    from urllib.error\
          \ import HTTPError\n    from urllib.request import build_opener, HTTPHandler,\
          \ Request\n\ndef delete_all_objects(bucket_name):\n    \n    try:\n    \
          \        \n        boto3.resource('s3').Bucket(bucket_name).objects.all().delete()\n\
          \    \n    except boto3_client_error as e:\n        print('Failed to Empty\
          \ Dashboard Bucket: ' + str(e))\n        return False\n    \n    return\
          \ True\n    \n'''\n    - CodeBucketName | str\n    - CodeDownloadURL | str\n\
          '''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n\
          \    \n    arguments = event['ResourceProperties']['Properties']\n    response_data\
          \ = {}\n    \n    if event['RequestType'] in ['Create', 'Update']:\n   \
          \     \n        path_to_local_zip = '/tmp/dashboard_code.zip'\n        path_to_local_dir\
          \ = path_to_local_zip.replace('.zip', '')\n        \n        '''\n     \
          \       Download the codebase\n        '''\n        http = urllib3.PoolManager()\n\
          \        code_download_response = http.request('GET', arguments['CodeDownloadURL'],\
          \ preload_content = False)\n        \n        if code_download_response.status\
          \ != 200:\n            return False\n        \n        with code_download_response\
          \ as r, open(path_to_local_zip, 'wb') as out_file:\n            shutil.copyfileobj(r,\
          \ out_file)\n        \n        '''\n            Unzip the downloaded code\n\
          \        '''\n        with zipfile.ZipFile(path_to_local_zip, 'r') as zip_ref:\n\
          \            zip_ref.extractall(path_to_local_dir)\n            \n     \
          \   s3_client = boto3.client('s3')\n        \n        '''\n            For\
          \ each file in the local code directory\n        '''\n        for file_path\
          \ in glob.iglob(path_to_local_dir + '**/**', recursive = True):\n      \
          \      \n            '''\n                If it's one of the dashboard files\
          \ and it's a file, not a directory, we'll upload it to S3\n            '''\n\
          \            if '/dashboard/' in file_path and os.path.isfile(file_path):\n\
          \            \n                try:\n                    \n            \
          \        s3_key = file_path.split('/dashboard/')[1]\n                  \
          \  \n                    s3_client.upload_file(file_path, arguments['CodeBucketName'],\
          \ s3_key,\n                        ExtraArgs = {\n                     \
          \       'ContentType': mimetypes.guess_type(file_path)[0]\n            \
          \            })\n                    \n                except boto3_client_error\
          \ as e:\n                    print('Failed to Upload Dashboard File: ' +\
          \ str(e))\n                    return cfnresponse.send(event, context, cfnresponse.FAILED,\
          \ response_data)\n                    \n        properties = event['ResourceProperties']\n\
          \        \n    elif event['RequestType'] in ['Delete']:\n        \n    \
          \    object_deletion = delete_all_objects(arguments['CodeBucketName'])\n\
          \        \n        delete_marker_deletion = True\n        #delete_marker_deletion\
          \ = delete_all_delete_markers(arguments['CodeBucketName'])\n        \n \
          \       if object_deletion is False or delete_marker_deletion is False:\n\
          \                \n            return cfnresponse.send(event, context, cfnresponse.FAILED,\
          \ response_data)\n    \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS,\
          \ response_data)"
      Description: ''
      Environment:
        Variables:
          CODE_BUCKET_NAME: !Ref 'Bucket'
          CODE_DOWNLOAD_URL: !Ref 'CodeDownloadURL'
      Handler: index.handler
      Layers: []
      MemorySize: 128
      Role: !GetAtt 'DashboardCodeDeployerRole.Arn'
      Runtime: python3.9
      Timeout: 30
      TracingConfig:
        Mode: PassThrough
    Type: AWS::Lambda::Function
  DashboardCodeDeployerLogGroup:
    DeletionPolicy: Retain
    DependsOn:
      - DashboardCodeDeployer
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'DashboardCodeDeployer'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  DashboardCodeDeployerResource:
    DependsOn:
      - Bucket
      - DashboardCodeDeployer
      - DashboardCodeDeployerLogGroup
    Properties:
      Properties:
        CodeBucketName: !Ref 'Bucket'
        CodeDownloadURL: !Ref 'CodeDownloadURL'
      ServiceToken: !GetAtt 'DashboardCodeDeployer.Arn'
      Type: Custom::DeployDashboardCode
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  DashboardCodeDeployerRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:ListBucketVersions
                  - s3:DeleteObjectVersion
                Effect: Allow
                Resource:
                  - !GetAtt 'Bucket.Arn'
                  - !Join
                    - ''
                    - - !GetAtt 'Bucket.Arn'
                      - /*
                Sid: PutS3Objects
          PolicyName: main-policy
    Type: AWS::IAM::Role
  ResponseHeadersPolicy:
    Properties:
      ResponseHeadersPolicyConfig:
        CorsConfig:
          AccessControlAllowCredentials: false
          AccessControlAllowHeaders:
            Items:
              - '*'
          AccessControlAllowMethods:
            Items:
              - GET
              - POST
              - OPTIONS
          AccessControlAllowOrigins:
            Items:
              - '*'
          AccessControlExposeHeaders:
            Items:
              - '*'
          OriginOverride: false
        Name: !Join
          - ''
          - - !Ref 'MainStackName'
            - -CORS-With-Preflight-
            - !If
              - IsPrimaryRegion
              - Primary
              - Failover
    Type: AWS::CloudFront::ResponseHeadersPolicy
