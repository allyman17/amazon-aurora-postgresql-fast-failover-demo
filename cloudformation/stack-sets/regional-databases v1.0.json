{
 "Conditions": {
  "IsFailoverRegion": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Ref": "PrimaryRegionName"
      },
      {
       "Ref": "AWS::Region"
      }
     ]
    }
   ]
  },
  "IsPrimaryRegion": {
   "Fn::Equals": [
    {
     "Ref": "PrimaryRegionName"
    },
    {
     "Ref": "AWS::Region"
    }
   ]
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [],
   "ParameterLabels": {}
  },
  "Comments": "",
  "CreatedBy": "Carter Meyers (AWS)",
  "Description": "This application deploys a Global RDS Aurora cluster.",
  "LastUpdated": "November 29, 2022",
  "Version": "v1.0"
 },
 "Outputs": {
  "RDSAdminSecretARN": {
   "Condition": "",
   "Value": {
    "Ref": "RDSAdminSecret"
   }
  },
  "RDSClusterReaderEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::If": [
     "IsPrimaryRegion",
     {
      "Fn::GetAtt": [
       "PrimaryRDSCluster",
       "ReadEndpoint.Address"
      ]
     },
     {
      "Fn::GetAtt": [
       "FailoverRDSCluster",
       "ReadEndpoint.Address"
      ]
     }
    ]
   }
  },
  "RDSClusterWriterEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::If": [
     "IsPrimaryRegion",
     {
      "Fn::GetAtt": [
       "PrimaryRDSCluster",
       "Endpoint.Address"
      ]
     },
     {
      "Fn::GetAtt": [
       "FailoverRDSCluster",
       "Endpoint.Address"
      ]
     }
    ]
   }
  },
  "RDSGlobalClusterIdentifier": {
   "Condition": "",
   "Value": {
    "Ref": "MainStackName"
   }
  },
  "RDSGlobalReaderDNSEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::Join": [
     "",
     [
      "db.reader.",
      {
       "Ref": "PublicFQDN"
      },
      ".internal"
     ]
    ]
   }
  },
  "RDSGlobalWriterDNSEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::Join": [
     "",
     [
      "db.writer.",
      {
       "Ref": "PublicFQDN"
      },
      ".internal"
     ]
    ]
   }
  },
  "RDSProxyARN": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "RDSProxy",
     "DBProxyArn"
    ]
   }
  },
  "RDSProxyName": {
   "Condition": "",
   "Value": {
    "Ref": "RDSProxy"
   }
  },
  "RDSProxyPort": {
   "Condition": "",
   "Value": {
    "Fn::If": [
     "IsPrimaryRegion",
     {
      "Fn::GetAtt": [
       "PrimaryRDSCluster",
       "Endpoint.Port"
      ]
     },
     {
      "Fn::GetAtt": [
       "FailoverRDSCluster",
       "Endpoint.Port"
      ]
     }
    ]
   }
  },
  "RDSProxyReaderEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "ProxyReaderEndpoint",
     "Endpoint"
    ]
   }
  },
  "RDSProxyWriterEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "RDSProxy",
     "Endpoint"
    ]
   }
  },
  "RDSRegionalClusterARN": {
   "Condition": "",
   "Value": {
    "Fn::If": [
     "IsPrimaryRegion",
     {
      "Fn::GetAtt": [
       "PrimaryRDSCluster",
       "DBClusterArn"
      ]
     },
     {
      "Fn::GetAtt": [
       "FailoverRDSCluster",
       "DBClusterArn"
      ]
     }
    ]
   }
  },
  "RDSRegionalClusterIdentifier": {
   "Condition": "",
   "Value": {
    "Fn::If": [
     "IsPrimaryRegion",
     {
      "Ref": "PrimaryRDSCluster"
     },
     {
      "Ref": "FailoverRDSCluster"
     }
    ]
   }
  }
 },
 "Parameters": {
  "CodeDownloadURL": {
   "Default": "https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main",
   "Description": "The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.",
   "Type": "String"
  },
  "DBAdminPassword": {
   "Description": "The password to be used for the RDS Aurora admin account.",
   "NoEcho": true,
   "Type": "String"
  },
  "DBAdminUsername": {
   "Description": "The username to be used for the RDS Aurora admin account.",
   "Type": "String"
  },
  "FailoverFailoverDatabaseSubnetCIDR": {
   "Default": "10.10.13.0/24",
   "Description": "The CIDR range you wish to use for your failover database subnet.",
   "Type": "String"
  },
  "FailoverFailoverPrivateSubnetCIDR": {
   "Default": "10.10.12.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "FailoverFailoverPublicSubnetCIDR": {
   "Default": "10.10.11.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "FailoverKMSKeyID": {
   "Description": "The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets Manager). This must correspond to a multi-region CMK available in both the primary and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html",
   "Type": "String"
  },
  "FailoverLambdaLayerARN": {
   "Type": "String"
  },
  "FailoverPrimaryDatabaseSubnetCIDR": {
   "Default": "10.10.10.0/24",
   "Description": "The CIDR range you wish to use for your primary database subnet.",
   "Type": "String"
  },
  "FailoverPrimaryPrivateSubnetCIDR": {
   "Default": "10.10.9.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "FailoverPrimaryPublicSubnetCIDR": {
   "Default": "10.10.8.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "FailoverRegionName": {
   "Description": "The name of the failover region (e.g., us-east-1)",
   "Type": "String"
  },
  "FailoverVPCCIDR": {
   "Default": "10.10.8.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  },
  "MainStackName": {
   "Type": "String"
  },
  "PrimaryFailoverDatabaseSubnetCIDR": {
   "Default": "10.10.5.0/24",
   "Description": "The CIDR range you wish to use for your failover database subnet.",
   "Type": "String"
  },
  "PrimaryFailoverPrivateSubnetCIDR": {
   "Default": "10.10.4.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "PrimaryFailoverPublicSubnetCIDR": {
   "Default": "10.10.3.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "PrimaryKMSKeyID": {
   "Description": "The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets Manager). This must correspond to a multi-region CMK available in both the primary and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html",
   "Type": "String"
  },
  "PrimaryLambdaLayerARN": {
   "Type": "String"
  },
  "PrimaryPrimaryDatabaseSubnetCIDR": {
   "Default": "10.10.2.0/24",
   "Description": "The CIDR range you wish to use for your primary database subnet.",
   "Type": "String"
  },
  "PrimaryPrimaryPrivateSubnetCIDR": {
   "Default": "10.10.1.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "PrimaryPrimaryPublicSubnetCIDR": {
   "Default": "10.10.0.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "PrimaryRegionName": {
   "Description": "The name of the primary region (e.g., us-east-1)",
   "Type": "String"
  },
  "PrimaryVPCCIDR": {
   "Default": "10.10.0.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  },
  "PrivateHostedZoneID": {
   "Type": "String"
  },
  "PublicFQDN": {
   "Description": "The FQDN to be used by this application. An Amazon ACM Certificate will be issued for this FQDN.",
   "Type": "String"
  },
  "PublicHostedZoneID": {
   "Description": "The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.",
   "Type": "String"
  }
 },
 "Resources": {
  "DNSRecords": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "RDSProxy"
   ],
   "Properties": {
    "HostedZoneId": {
     "Ref": "PrivateHostedZoneID"
    },
    "RecordSets": [
     {
      "Name": {
       "Fn::Join": [
        ".",
        [
         "db",
         "cluster",
         "reader",
         {
          "Ref": "PublicFQDN"
         },
         "internal"
        ]
       ]
      },
      "ResourceRecords": [
       {
        "Fn::GetAtt": [
         "PrimaryRDSCluster",
         "ReadEndpoint.Address"
        ]
       }
      ],
      "TTL": "1",
      "Type": "CNAME"
     },
     {
      "Name": {
       "Fn::Join": [
        ".",
        [
         "db",
         "reader",
         {
          "Ref": "PublicFQDN"
         },
         "internal"
        ]
       ]
      },
      "ResourceRecords": [
       {
        "Fn::GetAtt": [
         "ProxyReaderEndpoint",
         "Endpoint"
        ]
       }
      ],
      "TTL": "1",
      "Type": "CNAME"
     },
     {
      "Name": {
       "Fn::Join": [
        ".",
        [
         "db",
         "cluster",
         "writer",
         {
          "Ref": "PublicFQDN"
         },
         "internal"
        ]
       ]
      },
      "ResourceRecords": [
       {
        "Fn::GetAtt": [
         "PrimaryRDSCluster",
         "Endpoint.Address"
        ]
       }
      ],
      "TTL": "1",
      "Type": "CNAME"
     },
     {
      "Name": {
       "Fn::Join": [
        ".",
        [
         "db",
         "writer",
         {
          "Ref": "PublicFQDN"
         },
         "internal"
        ]
       ]
      },
      "ResourceRecords": [
       {
        "Fn::GetAtt": [
         "RDSProxy",
         "Endpoint"
        ]
       }
      ],
      "TTL": "1",
      "Type": "CNAME"
     }
    ]
   },
   "Type": "AWS::Route53::RecordSetGroup"
  },
  "DatabasePreparer": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "DatabasePreparerRole"
   ],
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "import sys\nsys.path.append('/opt')\nimport subprocess\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport cfnresponse\nfrom botocore.exceptions import ClientError as boto3_client_error\n\n'''\n    RDSAdminSecretARN\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n    response_data = {}\n    \n    rds_client = boto3.client('rds')\n    secrets_manager_client = boto3.client('secretsmanager')\n\n    try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n            SecretId = arguments['RDSAdminSecretARN']\n        )\n        \n    except boto3_client_error as e:\n        print('Unable to retrieva RDS secret: ' + str(e))\n        return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n        \n    else:\n        rds_secret = json.loads(get_secret_value_response['SecretString'])\n    \n    if event['RequestType'] in ['Create']:\n        \n        try:\n            \n            try:\n                    \n                db_conn = psycopg2.connect(\n                    host = rds_secret['host'],\n                    port = rds_secret['port'],\n                    user = rds_secret['username'],\n                    password = rds_secret['password'],\n                    database = rds_secret['database'],\n                    connect_timeout = 3,\n                    sslmode = 'require',\n                )\n                \n                curs = db_conn.cursor()\n                \n                ddl_statements = [\n                    '''\n                    CREATE SEQUENCE data_sequence start 1 increment 1;\n                    ''',\n                    '''\n                    CREATE TABLE IF NOT EXISTS dataserver (\n                        id integer not null primary key default nextval('data_sequence'),\n                        guid VARCHAR(255) NOT NULL,\n                        insertedon timestamp NOT NULL DEFAULT NOW(),\n                        migratedon timestamp NOT NULL DEFAULT NOW()\n                    );\n                    ''',\n                    '''\n                    CREATE TABLE IF NOT EXISTS public.dataclient (\n                        guid character varying(255) COLLATE pg_catalog.\"default\" NOT NULL,\n                        useast1 integer NOT NULL,\n                        useast2 integer NOT NULL,\n                        http_code integer,\n                        insertedon time without time zone\n                    );\n                    ''',\n                    '''\n                    CREATE TABLE IF NOT EXISTS public.failoverevents (\n                        event integer NOT NULL,\n                        insertedon timestamp without time zone NOT NULL\n                    );\n                    '''\n                ]\n                \n                for ddl_statement in ddl_statements:\n                    \n                    curs.execute(ddl_statement.replace('\\r','').replace('\\n',' '))\n                    db_conn.commit()\n                \n                curs.close()\n                db_conn.close()\n            \n                return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\n                \n            except Exception as error:\n                print('There was a problem executing the DDL statements: ' + str(error))\n                return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n                \n        except boto3_client_error as e:\n            print('Failed to Prepare RDS Database: ' + str(e.response))\n            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n            \n    if event['RequestType'] in ['Update', 'Delete']:\n        \n        return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
    },
    "Description": "",
    "Environment": {
     "Variables": {
      "RDS_PROXY_ENDPOINT": {
       "Fn::GetAtt": [
        "RDSProxy",
        "Endpoint"
       ]
      },
      "RDS_PROXY_PORT": {
       "Fn::If": [
        "IsPrimaryRegion",
        {
         "Fn::GetAtt": [
          "PrimaryRDSCluster",
          "Endpoint.Port"
         ]
        },
        {
         "Fn::GetAtt": [
          "FailoverRDSCluster",
          "Endpoint.Port"
         ]
        }
       ]
      },
      "RDS_USERNAME": {
       "Ref": "DBAdminUsername"
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Fn::If": [
       "IsPrimaryRegion",
       {
        "Ref": "PrimaryLambdaLayerARN"
       },
       {
        "Ref": "FailoverLambdaLayerARN"
       }
      ]
     }
    ],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "DatabasePreparerRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "PassThrough"
    },
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupID}}"
        ]
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrimaryPrivateSubnetID}}"
        ]
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/FailoverPrivateSubnetID}}"
        ]
       ]
      }
     ]
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "DatabasePreparerLogGroup": {
   "Condition": "IsPrimaryRegion",
   "DeletionPolicy": "Retain",
   "DependsOn": [
    "DatabasePreparer"
   ],
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "DatabasePreparer"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "DatabasePreparerResource": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "RDSAdminSecret",
    "DatabasePreparerLogGroup"
   ],
   "Properties": {
    "Properties": {
     "RDSAdminSecretARN": {
      "Ref": "RDSAdminSecret"
     }
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "DatabasePreparer",
      "Arn"
     ]
    },
    "Type": "Custom::PrepareRDSDatabase",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "DatabasePreparerRole": {
   "DependsOn": [],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "rds-db:Connect"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ],
         "Sid": "UseRDSProxy"
        },
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Ref": "RDSAdminSecret"
          }
         ],
         "Sid": "GetRDSAdminSecret"
        },
        {
         "Action": [
          "kms:Decrypt"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::If": [
            "IsPrimaryRegion",
            {
             "Ref": "PrimaryKMSKeyID"
            },
            {
             "Ref": "FailoverKMSKeyID"
            }
           ]
          }
         ],
         "Sid": "DecryptWithKMS"
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "FailoverClusterDetacher": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "FailoverClusterDetacherRole"
   ],
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError as boto3_client_error\n\n'''\n    FailoverClusterARN\n    GlobalClusterIdentifier\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    #operation = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n    response_data = {}\n    \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\n        \n    elif event['RequestType'] in ['Delete']:\n        \n        rds_client = boto3.client('rds')\n        \n        try:\n            \n            describe_cluster_resp = rds_client.describe_global_clusters(\n                GlobalClusterIdentifier = arguments['GlobalClusterIdentifier']\n            )\n            \n            '''\n                For each Global Cluster member\n            '''\n            for cluster_member in describe_cluster_resp['GlobalClusters'][0]['GlobalClusterMembers']:\n                \n                '''\n                    If this failover cluster is a member of the Global Cluster\n                '''\n                if arguments['FailoverClusterARN'] == cluster_member['DBClusterArn']:\n                    \n                    '''\n                        We're goign to remove it from the global cluster.\n                    '''\n                    rds_client.remove_from_global_cluster(\n                        DbClusterIdentifier = arguments['FailoverClusterARN'],\n                        GlobalClusterIdentifier = arguments['GlobalClusterIdentifier'],\n                    )\n                    \n                    '''\n                        Now, we'll monitor the detachment and respond only after it's successful.\n                    '''\n                    while True:\n                \n                        failover_cluster_still_attached = False\n                        \n                        describe_cluster_resp = rds_client.describe_global_clusters(\n                            GlobalClusterIdentifier = arguments['GlobalClusterIdentifier']\n                        )\n                        \n                        '''\n                            For each global cluster member\n                        '''\n                        for cluster_member in describe_cluster_resp['GlobalClusters'][0]['GlobalClusterMembers']:\n                            \n                            '''\n                                If the failover cluster's identifier is present in this member's ARN\n                            '''\n                            if arguments['FailoverClusterARN'] == cluster_member['DBClusterArn']:\n        \n                                '''\n                                    We'll consider the failover cluster still attached\n                                '''\n                                failover_cluster_still_attached = True\n                        \n                        if failover_cluster_still_attached is False:\n                            break\n\n                \n        except boto3_client_error as e:\n            print('Failed to Detach Failover Cluster: ' + str(e.response))\n            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n            \n    if event['RequestType'] in ['Update', 'Delete']:\n        \n        return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
    },
    "Description": "",
    "Handler": "index.handler",
    "Layers": [
     {
      "Fn::If": [
       "IsPrimaryRegion",
       {
        "Ref": "PrimaryLambdaLayerARN"
       },
       {
        "Ref": "FailoverLambdaLayerARN"
       }
      ]
     }
    ],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "FailoverClusterDetacherRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300,
    "TracingConfig": {
     "Mode": "PassThrough"
    },
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupID}}"
        ]
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrimaryPrivateSubnetID}}"
        ]
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/FailoverPrivateSubnetID}}"
        ]
       ]
      }
     ]
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "FailoverClusterDetacherLogGroup": {
   "Condition": "IsPrimaryRegion",
   "DeletionPolicy": "Retain",
   "DependsOn": [
    "FailoverClusterDetacher"
   ],
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "FailoverClusterDetacher"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "FailoverClusterDetacherResource": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "GlobalRDSCluster",
    "FailoverClusterDetacherLogGroup"
   ],
   "Properties": {
    "Properties": {
     "FailoverClusterARN": {
      "Fn::Join": [
       ":",
       [
        "arn",
        {
         "Ref": "AWS::Partition"
        },
        "rds",
        {
         "Ref": "FailoverRegionName"
        },
        {
         "Ref": "AWS::AccountId"
        },
        "cluster",
        {
         "Fn::Join": [
          "-",
          [
           {
            "Ref": "MainStackName"
           },
           {
            "Ref": "FailoverRegionName"
           }
          ]
         ]
        }
       ]
      ]
     },
     "GlobalClusterIdentifier": {
      "Ref": "MainStackName"
     }
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "FailoverClusterDetacher",
      "Arn"
     ]
    },
    "Type": "Custom::DetachFailoverClusterFromGlobalCluster",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "FailoverClusterDetacherRole": {
   "DependsOn": [],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "rds:RemoveFromGlobalCluster"
         ],
         "Effect": "Allow",
         "Resource": [
          "*",
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "rds",
             {
              "Ref": "FailoverRegionName"
             },
             {
              "Ref": "AWS::AccountId"
             },
             "cluster",
             {
              "Fn::Join": [
               "-",
               [
                {
                 "Ref": "MainStackName"
                },
                {
                 "Ref": "FailoverRegionName"
                }
               ]
              ]
             }
            ]
           ]
          }
         ],
         "Sid": "DetachRDSCluster"
        },
        {
         "Action": [
          "rds:DescribeGlobalClusters"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "rds",
             "",
             {
              "Ref": "AWS::AccountId"
             },
             "global-cluster",
             {
              "Ref": "MainStackName"
             }
            ]
           ]
          }
         ],
         "Sid": "DescribeGlobalCluster"
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "FailoverRDSAdminSecretAttachment": {
   "Condition": "IsFailoverRegion",
   "DependsOn": [
    "RDSAdminSecret",
    "FailoverRDSCluster"
   ],
   "Properties": {
    "SecretId": {
     "Ref": "RDSAdminSecret"
    },
    "TargetId": {
     "Ref": "FailoverRDSCluster"
    },
    "TargetType": "AWS::RDS::DBCluster"
   },
   "Type": "AWS::SecretsManager::SecretTargetAttachment"
  },
  "FailoverRDSCluster": {
   "Condition": "IsFailoverRegion",
   "DependsOn": [
    "RDSSubnetGroup"
   ],
   "Properties": {
    "BackupRetentionPeriod": 30,
    "DBClusterIdentifier": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "MainStackName"
       },
       "-",
       {
        "Ref": "AWS::Region"
       }
      ]
     ]
    },
    "DBSubnetGroupName": {
     "Ref": "RDSSubnetGroup"
    },
    "DeletionProtection": false,
    "EnableIAMDatabaseAuthentication": false,
    "Engine": "aurora-postgresql",
    "EngineMode": "provisioned",
    "EngineVersion": "14.3",
    "GlobalClusterIdentifier": {
     "Ref": "MainStackName"
    },
    "KmsKeyId": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryKMSKeyID"
      },
      {
       "Ref": "FailoverKMSKeyID"
      }
     ]
    },
    "Port": 5432,
    "RestoreType": "copy-on-write",
    "StorageEncrypted": true,
    "VpcSecurityGroupIds": [
     {
      "Ref": "RDSSecurityGroup"
     }
    ]
   },
   "Type": "AWS::RDS::DBCluster"
  },
  "FailoverRDSInstance1": {
   "Condition": "IsFailoverRegion",
   "DependsOn": [
    "FailoverRDSCluster"
   ],
   "Properties": {
    "AllowMajorVersionUpgrade": false,
    "AutoMinorVersionUpgrade": true,
    "DBClusterIdentifier": {
     "Ref": "FailoverRDSCluster"
    },
    "DBInstanceClass": "db.r6g.large",
    "EnablePerformanceInsights": false,
    "Engine": "aurora-postgresql",
    "MultiAZ": false,
    "PubliclyAccessible": false
   },
   "Type": "AWS::RDS::DBInstance"
  },
  "FailoverRDSInstance2": {
   "Condition": "IsFailoverRegion",
   "DependsOn": [
    "FailoverRDSCluster"
   ],
   "Properties": {
    "AllowMajorVersionUpgrade": false,
    "AutoMinorVersionUpgrade": true,
    "DBClusterIdentifier": {
     "Ref": "FailoverRDSCluster"
    },
    "DBInstanceClass": "db.r6g.large",
    "EnablePerformanceInsights": false,
    "Engine": "aurora-postgresql",
    "MultiAZ": false,
    "PubliclyAccessible": false
   },
   "Type": "AWS::RDS::DBInstance"
  },
  "GlobalRDSCluster": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "PrimaryRDSCluster"
   ],
   "Properties": {
    "DeletionProtection": false,
    "GlobalClusterIdentifier": {
     "Ref": "MainStackName"
    },
    "SourceDBClusterIdentifier": {
     "Ref": "PrimaryRDSCluster"
    }
   },
   "Type": "AWS::RDS::GlobalCluster"
  },
  "PrimaryRDSAdminSecretAttachment": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "RDSAdminSecret",
    "PrimaryRDSCluster"
   ],
   "Properties": {
    "SecretId": {
     "Ref": "RDSAdminSecret"
    },
    "TargetId": {
     "Ref": "PrimaryRDSCluster"
    },
    "TargetType": "AWS::RDS::DBCluster"
   },
   "Type": "AWS::SecretsManager::SecretTargetAttachment"
  },
  "PrimaryRDSCluster": {
   "Condition": "IsPrimaryRegion",
   "DeletionPolicy": "Snapshot",
   "DependsOn": [
    "RDSSubnetGroup"
   ],
   "Properties": {
    "BackupRetentionPeriod": 30,
    "DBClusterIdentifier": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "MainStackName"
       },
       "-",
       {
        "Ref": "AWS::Region"
       }
      ]
     ]
    },
    "DBSubnetGroupName": {
     "Ref": "RDSSubnetGroup"
    },
    "DeletionProtection": false,
    "EnableIAMDatabaseAuthentication": false,
    "Engine": "aurora-postgresql",
    "EngineMode": "provisioned",
    "EngineVersion": "14.3",
    "KmsKeyId": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryKMSKeyID"
      },
      {
       "Ref": "FailoverKMSKeyID"
      }
     ]
    },
    "MasterUserPassword": {
     "Ref": "DBAdminPassword"
    },
    "MasterUsername": {
     "Ref": "DBAdminUsername"
    },
    "Port": 5432,
    "StorageEncrypted": true,
    "VpcSecurityGroupIds": [
     {
      "Ref": "RDSSecurityGroup"
     }
    ]
   },
   "Type": "AWS::RDS::DBCluster"
  },
  "PrimaryRDSInstance1": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "PrimaryRDSCluster"
   ],
   "Properties": {
    "AllowMajorVersionUpgrade": false,
    "AutoMinorVersionUpgrade": true,
    "DBClusterIdentifier": {
     "Ref": "PrimaryRDSCluster"
    },
    "DBInstanceClass": "db.r6g.large",
    "EnablePerformanceInsights": false,
    "Engine": "aurora-postgresql",
    "MultiAZ": false,
    "PubliclyAccessible": false
   },
   "Type": "AWS::RDS::DBInstance"
  },
  "PrimaryRDSInstance2": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "PrimaryRDSCluster"
   ],
   "Properties": {
    "AllowMajorVersionUpgrade": false,
    "AutoMinorVersionUpgrade": true,
    "DBClusterIdentifier": {
     "Ref": "PrimaryRDSCluster"
    },
    "DBInstanceClass": "db.r6g.large",
    "EnablePerformanceInsights": false,
    "Engine": "aurora-postgresql",
    "MultiAZ": false,
    "PubliclyAccessible": false
   },
   "Type": "AWS::RDS::DBInstance"
  },
  "ProxyReaderEndpoint": {
   "DependsOn": [
    "RDSProxy"
   ],
   "Properties": {
    "DBProxyEndpointName": {
     "Fn::Join": [
      "",
      [
       {
        "Fn::If": [
         "IsPrimaryRegion",
         {
          "Ref": "PrimaryRDSCluster"
         },
         {
          "Ref": "FailoverRDSCluster"
         }
        ]
       },
       "-",
       "writer"
      ]
     ]
    },
    "DBProxyName": {
     "Ref": "RDSProxy"
    },
    "TargetRole": "READ_ONLY",
    "VpcSecurityGroupIds": [
     {
      "Ref": "RDSProxySecurityGroup"
     }
    ],
    "VpcSubnetIds": [
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/PrimaryDatabaseSubnetID}}"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/FailoverDatabaseSubnetID}}"
       ]
      ]
     }
    ]
   },
   "Type": "AWS::RDS::DBProxyEndpoint"
  },
  "ProxyTargetGroup": {
   "Condition": "IsPrimaryRegion",
   "DependsOn": [
    "RDSProxy"
   ],
   "Properties": {
    "DBClusterIdentifiers": [
     {
      "Fn::If": [
       "IsPrimaryRegion",
       {
        "Ref": "PrimaryRDSCluster"
       },
       {
        "Ref": "FailoverRDSCluster"
       }
      ]
     }
    ],
    "DBProxyName": {
     "Ref": "RDSProxy"
    },
    "TargetGroupName": "default"
   },
   "Type": "AWS::RDS::DBProxyTargetGroup"
  },
  "RDSAdminSecret": {
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Cluster Admin Account for ",
       {
        "Ref": "MainStackName"
       }
      ]
     ]
    },
    "KmsKeyId": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryKMSKeyID"
      },
      {
       "Ref": "FailoverKMSKeyID"
      }
     ]
    },
    "SecretString": {
     "Fn::Join": [
      "",
      [
       "{\"username\": \"",
       {
        "Ref": "DBAdminUsername"
       },
       "\", \"password\": \"",
       {
        "Ref": "DBAdminPassword"
       },
       "\", \"database\": \"template1\"}"
      ]
     ]
    }
   },
   "Type": "AWS::SecretsManager::Secret"
  },
  "RDSAdminSecretARNParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS admin Secrets Manager Secret ARN for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSAdminSecretARN"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "RDSAdminSecret"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSClusterParameterGroup": {
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       " - Cluster Param Group"
      ]
     ]
    },
    "Family": "aurora-postgresql13",
    "Parameters": {
     "rds.logical_replication": 1,
     "wal_sender_timeout": 240000
    }
   },
   "Type": "AWS::RDS::DBClusterParameterGroup"
  },
  "RDSClusterReaderEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Cluster reader endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSClusterReaderEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Fn::GetAtt": [
        "PrimaryRDSCluster",
        "ReadEndpoint.Address"
       ]
      },
      {
       "Fn::GetAtt": [
        "FailoverRDSCluster",
        "ReadEndpoint.Address"
       ]
      }
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSClusterWriterEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Cluster writer endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSClusterWriterEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Fn::GetAtt": [
        "PrimaryRDSCluster",
        "Endpoint.Address"
       ]
      },
      {
       "Fn::GetAtt": [
        "FailoverRDSCluster",
        "Endpoint.Address"
       ]
      }
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSGlobalClusterIdentifierParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Global RDS Cluster Identifier for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSGlobalClusterIdentifier"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "MainStackName"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSGlobalReaderDNSEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Global DNS Endpoint for RDS Reader for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSGlobalReaderDNSEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::Join": [
      "",
      [
       "db.reader.",
       {
        "Ref": "PublicFQDN"
       },
       ".internal"
      ]
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSGlobalWriterDNSEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Global DNS Endpoint for RDS Writer for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSGlobalWriterDNSEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::Join": [
      "",
      [
       "db.writer.",
       {
        "Ref": "PublicFQDN"
       },
       ".internal"
      ]
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSProxy": {
   "Properties": {
    "Auth": [
     {
      "SecretArn": {
       "Ref": "RDSAdminSecret"
      }
     }
    ],
    "DBProxyName": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryRDSCluster"
      },
      {
       "Ref": "FailoverRDSCluster"
      }
     ]
    },
    "EngineFamily": "POSTGRESQL",
    "RequireTLS": true,
    "RoleArn": {
     "Fn::GetAtt": [
      "RDSProxyRole",
      "Arn"
     ]
    },
    "VpcSecurityGroupIds": [
     {
      "Ref": "RDSProxySecurityGroup"
     }
    ],
    "VpcSubnetIds": [
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/PrimaryDatabaseSubnetID}}"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/FailoverDatabaseSubnetID}}"
       ]
      ]
     }
    ]
   },
   "Type": "AWS::RDS::DBProxy"
  },
  "RDSProxyARNParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Proxy ARN for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSProxyARN"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "RDSProxy",
      "DBProxyArn"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSProxyNameParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Proxy name for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSProxyName"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "RDSProxy"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSProxyPortParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Proxy port for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSProxyPort"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Fn::GetAtt": [
        "PrimaryRDSCluster",
        "Endpoint.Port"
       ]
      },
      {
       "Fn::GetAtt": [
        "FailoverRDSCluster",
        "Endpoint.Port"
       ]
      }
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSProxyReaderEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Proxy reader endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSProxyReaderEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "ProxyReaderEndpoint",
      "Endpoint"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSProxyRole": {
   "DependsOn": [
    "RDSAdminSecret"
   ],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "rds.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/AdministratorAccess"
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Ref": "RDSAdminSecret"
          }
         ]
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "RDSProxySecurityGroup": {
   "Properties": {
    "GroupDescription": "RDS Security Group",
    "SecurityGroupEgress": [],
    "SecurityGroupIngress": [
     {
      "Description": "DB Access from Lambda",
      "FromPort": 5432,
      "IpProtocol": "tcp",
      "SourceSecurityGroupId": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupID}}"
        ]
       ]
      },
      "ToPort": 5432
     }
    ],
    "VpcId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/VPCID}}"
      ]
     ]
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "RDSProxyWriterEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Proxy writer endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSProxyWriterEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "RDSProxy",
      "Endpoint"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSRegionalClusterARNParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Regional RDS Cluster ARN for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSRegionalClusterARN"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Fn::GetAtt": [
        "PrimaryRDSCluster",
        "DBClusterArn"
       ]
      },
      {
       "Fn::GetAtt": [
        "FailoverRDSCluster",
        "DBClusterArn"
       ]
      }
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSRegionalClusterIdentifierParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Regional RDS Cluster Identifier for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "RDSRegionalClusterIdentifier"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::If": [
      "IsPrimaryRegion",
      {
       "Ref": "PrimaryRDSCluster"
      },
      {
       "Ref": "FailoverRDSCluster"
      }
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "RDSSecurityGroup": {
   "DependsOn": [
    "RDSProxySecurityGroup"
   ],
   "Properties": {
    "GroupDescription": "RDS Security Group",
    "SecurityGroupEgress": [],
    "SecurityGroupIngress": [
     {
      "Description": "DB Access from Lambda",
      "FromPort": 5432,
      "IpProtocol": "tcp",
      "SourceSecurityGroupId": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupID}}"
        ]
       ]
      },
      "ToPort": 5432
     },
     {
      "Description": "DB Access from RDS Proxy",
      "FromPort": 5432,
      "IpProtocol": "tcp",
      "SourceSecurityGroupId": {
       "Ref": "RDSProxySecurityGroup"
      },
      "ToPort": 5432
     }
    ],
    "VpcId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/VPCID}}"
      ]
     ]
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "RDSSubnetGroup": {
   "Properties": {
    "DBSubnetGroupDescription": "Database Subnets",
    "DBSubnetGroupName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       {
        "Fn::Join": [
         "",
         {
          "Fn::Split": [
           "subnet-",
           {
            "Fn::Join": [
             "-",
             [
              {
               "Fn::Join": [
                "",
                [
                 "{{resolve:ssm:/",
                 {
                  "Ref": "MainStackName"
                 },
                 "/PrimaryDatabaseSubnetID}}"
                ]
               ]
              },
              {
               "Fn::Join": [
                "",
                [
                 "{{resolve:ssm:/",
                 {
                  "Ref": "MainStackName"
                 },
                 "/FailoverDatabaseSubnetID}}"
                ]
               ]
              }
             ]
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "SubnetIds": [
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/PrimaryDatabaseSubnetID}}"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/FailoverDatabaseSubnetID}}"
       ]
      ]
     }
    ]
   },
   "Type": "AWS::RDS::DBSubnetGroup"
  }
 },
 "Transform": {
  "Name": "AWS::SecretsManager-2020-07-23"
 }
}