Conditions:
  IsFailoverRegion: !Not
    - !Equals
      - !Ref 'PrimaryRegionName'
      - !Ref 'AWS::Region'
  IsPrimaryRegion: !Equals
    - !Ref 'PrimaryRegionName'
    - !Ref 'AWS::Region'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: []
    ParameterLabels: {}
  Comments: ''
  CreatedBy: Carter Meyers (AWS)
  Description: This application deploys a Global RDS Aurora cluster.
  LastUpdated: November 29, 2022
  Version: v1.0
Parameters:
  CodeDownloadURL:
    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
    Description: The URL from which the supporting codebase can be downloaded. This
      codebase is used to deploy the demo dashboard.
    Type: String
  DBAdminPassword:
    Description: The password to be used for the RDS Aurora admin account.
    NoEcho: true
    Type: String
  DBAdminUsername:
    Description: The username to be used for the RDS Aurora admin account.
    Type: String
  FailoverFailoverDatabaseSubnetCIDR:
    Default: 10.10.13.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  FailoverFailoverPrivateSubnetCIDR:
    Default: 10.10.12.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  FailoverFailoverPublicSubnetCIDR:
    Default: 10.10.11.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  FailoverKMSKeyID:
    Description: >-
      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
      Manager). This must correspond to a multi-region CMK available in both the primary
      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
    Type: String
  FailoverLambdaLayerARN:
    Type: String
  FailoverPrimaryDatabaseSubnetCIDR:
    Default: 10.10.10.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  FailoverPrimaryPrivateSubnetCIDR:
    Default: 10.10.9.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  FailoverPrimaryPublicSubnetCIDR:
    Default: 10.10.8.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  FailoverRegionName:
    Description: The name of the failover region (e.g., us-east-1)
    Type: String
  FailoverVPCCIDR:
    Default: 10.10.8.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  MainStackName:
    Type: String
  PrimaryFailoverDatabaseSubnetCIDR:
    Default: 10.10.5.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  PrimaryFailoverPrivateSubnetCIDR:
    Default: 10.10.4.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  PrimaryFailoverPublicSubnetCIDR:
    Default: 10.10.3.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  PrimaryKMSKeyID:
    Description: >-
      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
      Manager). This must correspond to a multi-region CMK available in both the primary
      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
    Type: String
  PrimaryLambdaLayerARN:
    Type: String
  PrimaryPrimaryDatabaseSubnetCIDR:
    Default: 10.10.2.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  PrimaryPrimaryPrivateSubnetCIDR:
    Default: 10.10.1.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  PrimaryPrimaryPublicSubnetCIDR:
    Default: 10.10.0.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  PrimaryRegionName:
    Description: The name of the primary region (e.g., us-east-1)
    Type: String
  PrimaryVPCCIDR:
    Default: 10.10.0.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  PrivateHostedZoneID:
    Type: String
  PublicFQDN:
    Description: The FQDN to be used by this application. An Amazon ACM Certificate
      will be issued for this FQDN.
    Type: String
  PublicHostedZoneID:
    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
    Type: String
Resources:
  BypassRDSProxy:
    DependsOn:
      - BypassRDSProxyRole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import os\nimport json\nimport boto3\nimport dateutil.tz\nfrom datetime\
          \ import datetime\n\ndef get_region(context):\n    return context.invoked_function_arn.split(':')[3]\n\
          \ndef cnameChangeSiteToDB():\n    \n    r53_client = boto3.client('route53')\n\
          \    \n    for endpoint_type in ['reader', 'writer']:\n    \n        response\
          \ = r53_client.change_resource_record_sets(\n            ChangeBatch = {\n\
          \                'Changes': [\n                    {\n                 \
          \       'Action': 'UPSERT',\n                        'ResourceRecordSet':\
          \ {\n                            'Name': 'db.' + endpoint_type + '.' + os.environ['PUBLIC_FQDN']\
          \ + '.internal',\n                            'ResourceRecords': [\n   \
          \                             {\n                                    'Value':\
          \ os.environ['RDS_CLUSTER_' + endpoint_type.upper() + '_ENDPOINT'],\n  \
          \                              },\n                            ],\n    \
          \                        'TTL': 1,\n                            'Type':\
          \ 'CNAME',\n                        },\n                    },\n       \
          \         ],\n            },\n            HostedZoneId = os.environ['PRIVATE_HOSTED_ZONE_ID'],\n\
          \        )\n\ndef lambda_handler(event, context):\n    \n    cnameChangeSiteToDB()\n\
          \    \n    return {\n        'statusCode': 200,\n        'headers': {\n\
          \            'Access-Control-Allow-Headers': 'Content-Type',\n         \
          \   'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods':\
          \ 'OPTIONS,POST,GET',\n            'content-type': 'text/html'\n       \
          \ },\n        'body': json.dumps('DNS Records Updated Successfully')\n \
          \   }"
      Description: ''
      Environment:
        Variables:
          PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'
          PUBLIC_FQDN: !Ref 'PublicFQDN'
          RDS_CLUSTER_READER_ENDPOINT: !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /RDSClusterReaderEndpoint}}
          RDS_CLUSTER_WRITER_ENDPOINT: !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /RDSClusterWriterEndpoint}}
      Handler: index.handler
      Layers:
        - !If
          - IsPrimaryRegion
          - !Ref 'PrimaryLambdaLayerARN'
          - !Ref 'FailoverLambdaLayerARN'
      MemorySize: 128
      Role: !GetAtt 'BypassRDSProxyRole.Arn'
      Runtime: python3.9
      Timeout: 60
      TracingConfig:
        Mode: PassThrough
      VpcConfig:
        SecurityGroupIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /LambdaSecurityGroupID}}
        SubnetIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /PrimaryPrivateSubnetID}}
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /FailoverPrivateSubnetID}}
    Type: AWS::Lambda::Function
  BypassRDSProxyLogGroup:
    DeletionPolicy: Retain
    DependsOn:
      - BypassRDSProxy
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'BypassRDSProxy'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  BypassRDSProxyMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.records')
            StatusCode: '200'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 400.*'
            StatusCode: '400'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 401.*'
            StatusCode: '401'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 403.*'
            StatusCode: '403'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 404.*'
            StatusCode: '404'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 415.*'
            StatusCode: '415'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 429.*'
            StatusCode: '429'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 500.*'
            StatusCode: '500'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{}'
          application/x-www-form-urlencoded: '{}'
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt 'BypassRDSProxy.Arn'
            - /invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '400'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '401'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '403'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '404'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '415'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '429'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '500'
      OperationName: getBypassRDSProxy
      ResourceId: !Ref 'BypassRdsProxyResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  BypassRDSProxyMethodInvocationPermission:
    Condition: ''
    DependsOn:
      - BypassRDSProxy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'BypassRDSProxy.Arn'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /APIID}}
          - /*/
          - GET
          - /
          - bypass-rds-proxy
    Type: AWS::Lambda::Permission
  BypassRDSProxyRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - rds-db:Connect
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSProxyARN}}
                Sid: ConnectToRDSProxy
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSAdminSecretARN}}
                Sid: GetRDSAdminSecret
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  - !If
                    - IsPrimaryRegion
                    - !Ref 'PrimaryKMSKeyID'
                    - !Ref 'FailoverKMSKeyID'
                Sid: DecryptWithKMS
          PolicyName: database-secret-retrieval
        - PolicyDocument:
            Statement:
              - Action:
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - arn:aws:route53:::hostedzone/
                      - !Ref 'PrivateHostedZoneID'
                Sid: UpdateRoute53Records
          PolicyName: update-route53-records
    Type: AWS::IAM::Role
  BypassRdsProxyResource:
    Condition: ''
    DependsOn: []
    Properties:
      ParentId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIRootResourceID}}
      PathPart: bypass-rds-proxy
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Resource
  BypassRdsProxyResourceOptionsMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: '{}'
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref 'BypassRdsProxyResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  FailoverResource:
    Condition: ''
    DependsOn: []
    Properties:
      ParentId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIRootResourceID}}
      PathPart: failover
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Resource
  FailoverResourceOptionsMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: '{}'
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref 'FailoverResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  GetRTO:
    DependsOn:
      - GetRTORole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
          import boto3\nimport psycopg2\nfrom botocore.exceptions import ClientError\
          \ as boto3_client_error\n\ndef get_region(context):\n    return context.invoked_function_arn.split(':')[3]\n\
          \ndef get_rds_credentials():\n    \n    secrets_manager_client = boto3.client('secretsmanager')\n\
          \n    try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
          \            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\n        )\n\
          \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
          \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
          \ json.loads(get_secret_value_response['SecretString'])\n        \ndef lambda_handler(event,\
          \ context):\n    \n    print(json.dumps(event))\n    \n    return {\n  \
          \      'statusCode': 200,\n        'headers': {\n            'Access-Control-Allow-Headers':\
          \ 'Content-Type',\n            'Access-Control-Allow-Origin': '*',\n   \
          \         'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\n        \
          \    'content-type': 'text/html'\n        },\n        'body': json.dumps([])\n\
          \    }\n    \n    rds_secret = get_rds_credentials()\n\n    db_conn = psycopg2.connect(\n\
          \        host = rds_secret['host'],\n        port = rds_secret['port'],\n\
          \        user = rds_secret['username'],\n        password = rds_secret['password'],\n\
          \        database = rds_secret['database'],\n        connect_timeout = 3,\n\
          \        sslmode = 'require',\n    )\n        \n    curs = db_conn.cursor()\n\
          \    \n    curs.execute('''\n        SELECT\n            DATE_PART('second',\
          \ max(insertedon)::TIMESTAMP - min(insertedon)::TIMESTAMP) AS rto\n    \
          \    FROM dataclient \n        WHERE http_code = 500 \n        GROUP BY\
          \ http_code\n    ''');\n    \n    client_events = curs.fetchall()\n    \n\
          \    curs.close()\n    db_conn.close()\n    \n    records_to_return = []\n\
          \    \n    for x in client_events:\n    \n        c = 0\n        temp2 =\
          \ {}\n        \n        for col in curs.description:\n            \n   \
          \         temp2.update({str(col[0]): x[c]})\n            c += 1\n      \
          \  \n        records_to_return.append(temp2)\n    \n    return {\n     \
          \   'statusCode': 200,\n        'headers': {\n            'Access-Control-Allow-Headers':\
          \ 'Content-Type',\n            'Access-Control-Allow-Origin': '*',\n   \
          \         'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\n        \
          \    'content-type': 'text/html'\n        },\n        'body': json.dumps(records_to_return,\
          \ default = str)\n    }\n"
      Description: ''
      Handler: index.handler
      Layers:
        - !If
          - IsPrimaryRegion
          - !Ref 'PrimaryLambdaLayerARN'
          - !Ref 'FailoverLambdaLayerARN'
      MemorySize: 128
      Role: !GetAtt 'GetRTORole.Arn'
      Runtime: python3.9
      Timeout: 60
      TracingConfig:
        Mode: PassThrough
      VpcConfig:
        SecurityGroupIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /LambdaSecurityGroupID}}
        SubnetIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /PrimaryPrivateSubnetID}}
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /FailoverPrivateSubnetID}}
    Type: AWS::Lambda::Function
  GetRTOLogGroup:
    DeletionPolicy: Retain
    DependsOn:
      - GetRTO
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'GetRTO'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  GetRTOMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.records')
            StatusCode: '200'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 400.*'
            StatusCode: '400'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 401.*'
            StatusCode: '401'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 403.*'
            StatusCode: '403'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 404.*'
            StatusCode: '404'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 415.*'
            StatusCode: '415'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 429.*'
            StatusCode: '429'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 500.*'
            StatusCode: '500'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{}'
          application/x-www-form-urlencoded: '{}'
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt 'GetRTO.Arn'
            - /invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '400'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '401'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '403'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '404'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '415'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '429'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '500'
      OperationName: getRTO
      ResourceId: !Ref 'RtoResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  GetRTOMethodInvocationPermission:
    Condition: ''
    DependsOn:
      - GetRTO
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'GetRTO.Arn'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /APIID}}
          - /*/
          - GET
          - /
          - rto
    Type: AWS::Lambda::Permission
  GetRTORole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - rds-db:Connect
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSProxyARN}}
                Sid: ConnectToRDSProxy
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSAdminSecretARN}}
                Sid: GetRDSAdminSecret
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  - !If
                    - IsPrimaryRegion
                    - !Ref 'PrimaryKMSKeyID'
                    - !Ref 'FailoverKMSKeyID'
                Sid: DecryptWithKMS
          PolicyName: database-secret-retrieval
    Type: AWS::IAM::Role
  RtoResource:
    Condition: ''
    DependsOn: []
    Properties:
      ParentId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIRootResourceID}}
      PathPart: rto
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Resource
  RtoResourceOptionsMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: '{}'
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref 'RtoResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  TriggerFailover:
    DependsOn:
      - TriggerFailoverRole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
          import boto3\nimport psycopg2\nimport dateutil.tz\nimport datetime\nfrom\
          \ botocore.exceptions import ClientError as boto3_client_error\n\ndef get_region(context):\n\
          \    return context.invoked_function_arn.split(':')[3]\n    \ndef get_rds_credentials():\n\
          \    \n    secrets_manager_client = boto3.client('secretsmanager')\n\n \
          \   try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
          \            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\n        )\n\
          \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
          \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
          \ json.loads(get_secret_value_response['SecretString'])\n\ndef lambda_handler(event,\
          \ context):\n    \n    print(json.dumps(event))\n    \n    eastern = dateutil.tz.gettz('US/Eastern')\n\
          \    \n    rds_secret = get_rds_credentials()\n    \n    db_conn = psycopg2.connect(\n\
          \        host = rds_secret['host'],\n        port = rds_secret['port'],\n\
          \        user = rds_secret['username'],\n        sslmode = 'require',\n\
          \        password = rds_secret['password'],\n        database = rds_secret['database'],\n\
          \        connect_timeout = 3,\n    )\n\n    curs = db_conn.cursor()\n  \
          \  curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (1,'\"\
          +datetime.datetime.now(tz=eastern).strftime(\"%m/%d/%Y %H:%M:%S\")+\"' )\"\
          )\n    db_conn.commit()\n    curs.close()\n    db_conn.close()\n    \n \
          \   return {\n        'statusCode': 200,\n        'headers': {\n       \
          \     'Access-Control-Allow-Headers': 'Content-Type',\n            'Access-Control-Allow-Origin':\
          \ '*',\n            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\n\
          \            'content-type': 'text/html'\n        },\n        'body': 'done'\n\
          \    }"
      Description: ''
      Handler: index.handler
      Layers:
        - !If
          - IsPrimaryRegion
          - !Ref 'PrimaryLambdaLayerARN'
          - !Ref 'FailoverLambdaLayerARN'
      MemorySize: 128
      Role: !GetAtt 'TriggerFailoverRole.Arn'
      Runtime: python3.9
      Timeout: 60
      TracingConfig:
        Mode: PassThrough
      VpcConfig:
        SecurityGroupIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /LambdaSecurityGroupID}}
        SubnetIds:
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /PrimaryPrivateSubnetID}}
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /FailoverPrivateSubnetID}}
    Type: AWS::Lambda::Function
  TriggerFailoverLogGroup:
    DeletionPolicy: Retain
    DependsOn:
      - TriggerFailover
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'TriggerFailover'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  TriggerFailoverMethod:
    Condition: ''
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.records')
            StatusCode: '200'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 400.*'
            StatusCode: '400'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 401.*'
            StatusCode: '401'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 403.*'
            StatusCode: '403'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 404.*'
            StatusCode: '404'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 415.*'
            StatusCode: '415'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 429.*'
            StatusCode: '429'
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: $input.path('$.errorMessage')
            SelectionPattern: '.*"code": 500.*'
            StatusCode: '500'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{}'
          application/x-www-form-urlencoded: '{}'
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt 'TriggerFailover.Arn'
            - /invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '400'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '401'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '403'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '404'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '415'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '429'
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '500'
      OperationName: getFailover
      ResourceId: !Ref 'FailoverResource'
      RestApiId: !Join
        - ''
        - - '{{resolve:ssm:/'
          - !Ref 'MainStackName'
          - /APIID}}
    Type: AWS::ApiGateway::Method
  TriggerFailoverMethodInvocationPermission:
    Condition: ''
    DependsOn:
      - TriggerFailover
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'TriggerFailover.Arn'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Join
            - ''
            - - '{{resolve:ssm:/'
              - !Ref 'MainStackName'
              - /APIID}}
          - /*/
          - GET
          - /
          - failover
    Type: AWS::Lambda::Permission
  TriggerFailoverRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - rds-db:Connect
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSProxyARN}}
                Sid: ConnectToRDSProxy
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSAdminSecretARN}}
                Sid: GetRDSAdminSecret
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  - !If
                    - IsPrimaryRegion
                    - !Ref 'PrimaryKMSKeyID'
                    - !Ref 'FailoverKMSKeyID'
                Sid: DecryptWithKMS
          PolicyName: database-secret-retrieval
    Type: AWS::IAM::Role
