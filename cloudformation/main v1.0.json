{
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "Codebase"
     },
     "Parameters": [
      "CodeDownloadURL"
     ]
    },
    {
     "Label": {
      "default": "Database"
     },
     "Parameters": [
      "DBAdminUsername",
      "DBAdminPassword"
     ]
    },
    {
     "Label": {
      "default": "Primary Region"
     },
     "Parameters": [
      "PrimaryRegionName",
      "PrimaryVPCCIDR",
      "PrimaryPrimaryPublicSubnetCIDR",
      "PrimaryFailoverPublicSubnetCIDR",
      "PrimaryPrimaryPrivateSubnetCIDR",
      "PrimaryFailoverPrivateSubnetCIDR",
      "PrimaryPrimaryDatabaseSubnetCIDR",
      "PrimaryFailoverDatabaseSubnetCIDR",
      "PrimaryKMSKeyID"
     ]
    },
    {
     "Label": {
      "default": "Failover Region"
     },
     "Parameters": [
      "FailoverRegionName",
      "FailoverVPCCIDR",
      "FailoverPrimaryPublicSubnetCIDR",
      "FailoverFailoverPublicSubnetCIDR",
      "FailoverPrimaryPrivateSubnetCIDR",
      "FailoverFailoverPrivateSubnetCIDR",
      "FailoverPrimaryDatabaseSubnetCIDR",
      "FailoverFailoverDatabaseSubnetCIDR",
      "FailoverKMSKeyID"
     ]
    },
    {
     "Label": {
      "default": "Accessibility"
     },
     "Parameters": [
      "PublicFQDN",
      "PublicHostedZoneID"
     ]
    }
   ],
   "ParameterLabels": {
    "CodeDownloadURL": {
     "default": "Download URL"
    },
    "DBAdminPassword": {
     "default": "Admin Password"
    },
    "DBAdminUsername": {
     "default": "Admin Username"
    },
    "FailoverFailoverDatabaseSubnetCIDR": {
     "default": "Failover Database Subnet CIDR"
    },
    "FailoverFailoverPrivateSubnetCIDR": {
     "default": "Failover Private Subnet CIDR"
    },
    "FailoverFailoverPublicSubnetCIDR": {
     "default": "Failover Public Subnet CIDR"
    },
    "FailoverKMSKeyID": {
     "default": "KMS Key ARN"
    },
    "FailoverPrimaryDatabaseSubnetCIDR": {
     "default": "Primary Database Subnet CIDR"
    },
    "FailoverPrimaryPrivateSubnetCIDR": {
     "default": "Primary Private Subnet CIDR"
    },
    "FailoverPrimaryPublicSubnetCIDR": {
     "default": "Primary Public Subnet CIDR"
    },
    "FailoverRegionName": {
     "default": "Region Name"
    },
    "FailoverVPCCIDR": {
     "default": "VPC CIDR"
    },
    "PrimaryFailoverDatabaseSubnetCIDR": {
     "default": "Failover Database Subnet CIDR"
    },
    "PrimaryFailoverPrivateSubnetCIDR": {
     "default": "Failover Private Subnet CIDR"
    },
    "PrimaryFailoverPublicSubnetCIDR": {
     "default": "Failover Public Subnet CIDR"
    },
    "PrimaryKMSKeyID": {
     "default": "KMS Key ARN"
    },
    "PrimaryPrimaryDatabaseSubnetCIDR": {
     "default": "Primary Database Subnet CIDR"
    },
    "PrimaryPrimaryPrivateSubnetCIDR": {
     "default": "Primary Private Subnet CIDR"
    },
    "PrimaryPrimaryPublicSubnetCIDR": {
     "default": "Primary Public Subnet CIDR"
    },
    "PrimaryRegionName": {
     "default": "Region Name"
    },
    "PrimaryVPCCIDR": {
     "default": "VPC CIDR"
    },
    "PublicFQDN": {
     "default": "Service FQDN"
    },
    "PublicHostedZoneID": {
     "default": "Hosted Zone ID"
    }
   }
  },
  "Comments": "",
  "CreatedBy": "Carter Meyers (AWS)",
  "Description": "This application deploys a Global RDS Aurora cluster.",
  "LastUpdated": "November 29, 2022",
  "Version": "v1.0"
 },
 "Outputs": {
  "FailoverRegionDashboard": {
   "Value": {
    "Fn::GetAtt": [
     "FailoverRegionDashboardURLRetriever",
     "DashboardURL"
    ]
   }
  },
  "PrimaryRegionDashboard": {
   "Value": {
    "Fn::GetAtt": [
     "PrimaryRegionDashboardURLRetriever",
     "DashboardURL"
    ]
   }
  }
 },
 "Parameters": {
  "CodeDownloadURL": {
   "Default": "https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main",
   "Description": "The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.",
   "Type": "String"
  },
  "DBAdminPassword": {
   "Description": "The password to be used for the RDS Aurora admin account.",
   "NoEcho": true,
   "Type": "String"
  },
  "DBAdminUsername": {
   "Description": "The username to be used for the RDS Aurora admin account.",
   "Type": "String"
  },
  "FailoverFailoverDatabaseSubnetCIDR": {
   "Default": "10.10.13.0/24",
   "Description": "The CIDR range you wish to use for your failover database subnet.",
   "Type": "String"
  },
  "FailoverFailoverPrivateSubnetCIDR": {
   "Default": "10.10.12.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "FailoverFailoverPublicSubnetCIDR": {
   "Default": "10.10.11.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "FailoverKMSKeyID": {
   "Description": "The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets Manager). This must correspond to a multi-region CMK available in both the primary and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html",
   "Type": "String"
  },
  "FailoverPrimaryDatabaseSubnetCIDR": {
   "Default": "10.10.10.0/24",
   "Description": "The CIDR range you wish to use for your primary database subnet.",
   "Type": "String"
  },
  "FailoverPrimaryPrivateSubnetCIDR": {
   "Default": "10.10.9.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "FailoverPrimaryPublicSubnetCIDR": {
   "Default": "10.10.8.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "FailoverRegionName": {
   "Description": "The name of the failover region (e.g., us-east-1)",
   "Type": "String"
  },
  "FailoverVPCCIDR": {
   "Default": "10.10.8.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  },
  "PrimaryFailoverDatabaseSubnetCIDR": {
   "Default": "10.10.5.0/24",
   "Description": "The CIDR range you wish to use for your failover database subnet.",
   "Type": "String"
  },
  "PrimaryFailoverPrivateSubnetCIDR": {
   "Default": "10.10.4.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "PrimaryFailoverPublicSubnetCIDR": {
   "Default": "10.10.3.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "PrimaryKMSKeyID": {
   "Description": "The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets Manager). This must correspond to a multi-region CMK available in both the primary and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html",
   "Type": "String"
  },
  "PrimaryPrimaryDatabaseSubnetCIDR": {
   "Default": "10.10.2.0/24",
   "Description": "The CIDR range you wish to use for your primary database subnet.",
   "Type": "String"
  },
  "PrimaryPrimaryPrivateSubnetCIDR": {
   "Default": "10.10.1.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "PrimaryPrimaryPublicSubnetCIDR": {
   "Default": "10.10.0.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "PrimaryRegionName": {
   "Description": "The name of the primary region (e.g., us-east-1)",
   "Type": "String"
  },
  "PrimaryVPCCIDR": {
   "Default": "10.10.0.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  },
  "PublicFQDN": {
   "Description": "The FQDN to be used by this application. An Amazon ACM Certificate will be issued for this FQDN.",
   "Type": "String"
  },
  "PublicHostedZoneID": {
   "Description": "The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.",
   "Type": "String"
  }
 },
 "Resources": {
  "APIDeploymentStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "APIMethods1StackSet",
    "APIMethods2StackSet",
    "APIMethods3StackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - APIDeployment",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "APIDeployment"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nOutputs:\n  APIFQDN:\n    Condition: ''\n    Value: !Join\n      - ''\n      - - !Ref 'AWS::Region'\n        - .api.\n        - !Ref 'PublicFQDN'\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  APIFQDNParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'API Gateway Root Resource ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - APIFQDN\n      Tier: Standard\n      Type: String\n      Value: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - .api.\n          - !Ref 'PublicFQDN'\n    Type: AWS::SSM::Parameter\n  BasePathMapping:\n    DependsOn:\n      - DomainName\n      - Deployment\n      - DeploymentStage\n    Properties:\n      BasePath: v1\n      DomainName: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - .api.\n          - !Ref 'PublicFQDN'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n      Stage: v1\n    Type: AWS::ApiGateway::BasePathMapping\n  Certificate:\n    Properties:\n      DomainName: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - .api.\n          - !Ref 'PublicFQDN'\n      DomainValidationOptions:\n        - DomainName: !Join\n            - ''\n            - - !Ref 'AWS::Region'\n              - .api.\n              - !Ref 'PublicFQDN'\n          HostedZoneId: !Ref 'PublicHostedZoneID'\n      ValidationMethod: DNS\n    Type: AWS::CertificateManager::Certificate\n  DNSRecord:\n    DependsOn:\n      - DomainName\n    Properties:\n      HostedZoneId: !Ref 'PublicHostedZoneID'\n      RecordSets:\n        - AliasTarget:\n            DNSName: !GetAtt 'DomainName.RegionalDomainName'\n            HostedZoneId: !GetAtt 'DomainName.RegionalHostedZoneId'\n          Name: !Join\n            - ''\n            - - !Ref 'AWS::Region'\n              - .api.\n              - !Ref 'PublicFQDN'\n          Type: A\n    Type: AWS::Route53::RecordSetGroup\n  Deployment:\n    Properties:\n      Description: Initial Deployment\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Deployment\n  DeploymentStage:\n    DependsOn:\n      - Deployment\n    Properties:\n      DeploymentId: !Ref 'Deployment'\n      MethodSettings:\n        - CachingEnabled: false\n          DataTraceEnabled: true\n          HttpMethod: GET\n          LoggingLevel: INFO\n          MetricsEnabled: true\n          ResourcePath: /~1\n          ThrottlingBurstLimit: '5000'\n          ThrottlingRateLimit: '10000'\n        - CachingEnabled: false\n          DataTraceEnabled: true\n          HttpMethod: POST\n          LoggingLevel: INFO\n          MetricsEnabled: true\n          ResourcePath: /~1\n          ThrottlingBurstLimit: '5000'\n          ThrottlingRateLimit: '10000'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n      StageName: v1\n    Type: AWS::ApiGateway::Stage\n  DomainName:\n    DependsOn:\n      - Certificate\n    Properties:\n      DomainName: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - .api.\n          - !Ref 'PublicFQDN'\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      RegionalCertificateArn: !Ref 'Certificate'\n    Type: AWS::ApiGateway::DomainName\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "APIGatewayStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "PrivateHostedZone",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - APIGateway",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrivateHostedZoneID",
      "ParameterValue": {
       "Ref": "PrivateHostedZone"
      }
     },
     {
      "ParameterKey": "PrimaryLambdaLayerARN",
      "ParameterValue": {
       "Ref": "PrimaryLambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "FailoverLambdaLayerARN",
      "ParameterValue": {
       "Ref": "FailoverLambdaLayerCreatorResource"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "APIGateway"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nOutputs:\n  APIID:\n    Condition: ''\n    Value: !Ref 'API'\n  APIRootResourceID:\n    Condition: ''\n    Value: !GetAtt 'API.RootResourceId'\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverLambdaLayerARN:\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryLambdaLayerARN:\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PrivateHostedZoneID:\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  API:\n    Properties:\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n    Type: AWS::ApiGateway::RestApi\n  APIIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'API Gateway ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - APIID\n      Tier: Standard\n      Type: String\n      Value: !Ref 'API'\n    Type: AWS::SSM::Parameter\n  APIRootResourceIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'API Gateway Root Resource ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - APIRootResourceID\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'API.RootResourceId'\n    Type: AWS::SSM::Parameter\n  DEFAULT4XXGatewayResponse:\n    Properties:\n      ResponseParameters:\n        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n      ResponseType: DEFAULT_4XX\n      RestApiId: !Ref 'API'\n    Type: AWS::ApiGateway::GatewayResponse\n  DEFAULT5XXGatewayResponse:\n    Properties:\n      ResponseParameters:\n        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n      ResponseType: DEFAULT_5XX\n      RestApiId: !Ref 'API'\n    Type: AWS::ApiGateway::GatewayResponse\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "APIMethods1StackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "APIGatewayStackSet",
    "PrivateHostedZone",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - APIMethods1",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrivateHostedZoneID",
      "ParameterValue": {
       "Ref": "PrivateHostedZone"
      }
     },
     {
      "ParameterKey": "PrimaryLambdaLayerARN",
      "ParameterValue": {
       "Ref": "PrimaryLambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "FailoverLambdaLayerARN",
      "ParameterValue": {
       "Ref": "FailoverLambdaLayerCreatorResource"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "APIMethods1"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverLambdaLayerARN:\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryLambdaLayerARN:\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PrivateHostedZoneID:\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  ClusterInfoResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIRootResourceID}}\n      PathPart: cluster-info\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Resource\n  ClusterInfoResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'ClusterInfoResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  FailoverEventsResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIRootResourceID}}\n      PathPart: failover-events\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Resource\n  FailoverEventsResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'FailoverEventsResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  GetClusterInfo:\n    DependsOn:\n      - GetClusterInfoRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import os\\nimport json\\nimport boto3\\n\\ndef get_region(context):\\n\\\n          \\    return context.invoked_function_arn.split(':')[3]\\n    \\ndef handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n    \\n    data = {}\\n \\\n          \\   rds_client = boto3.client('rds')\\n\\n    cluster_resp = rds_client.describe_db_clusters(\\n\\\n          \\        DBClusterIdentifier = os.environ['REGIONAL_DB_CLUSTER_IDENTIFIER']\\n\\\n          \\    )\\n        \\n    for member in cluster_resp['DBClusters'][0]['DBClusterMembers']:\\n\\\n          \\        \\n        instance_resp = rds_client.describe_db_instances(\\n \\\n          \\           DBInstanceIdentifier = member['DBInstanceIdentifier']\\n    \\\n          \\    )\\n        \\n        data[member['DBInstanceIdentifier']] = {\\n   \\\n          \\         'az': instance_resp['DBInstances'][0]['AvailabilityZone'],\\n \\\n          \\           'type': 'WRITER' if member['IsClusterWriter'] is True else 'READER'\\n\\\n          \\        }\\n        \\n    return {\\n        'records': data\\n    }\"\n      Description: ''\n      Environment:\n        Variables:\n          REGIONAL_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSRegionalClusterIdentifier}}\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'GetClusterInfoRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  GetClusterInfoLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - GetClusterInfo\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetClusterInfo'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetClusterInfoMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.records')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 400.*'\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 401.*'\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 403.*'\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 404.*'\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 415.*'\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 429.*'\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 500.*'\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{}'\n          application/x-www-form-urlencoded: '{}'\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetClusterInfo.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getClusterInfo\n      ResourceId: !Ref 'ClusterInfoResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  GetClusterInfoMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - GetClusterInfo\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetClusterInfo.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /APIID}}\n          - /*/\n          - GET\n          - /\n          - cluster-info\n    Type: AWS::Lambda::Permission\n  GetClusterInfoRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:DescribeDBClusters\n                Effect: Allow\n                Resource:\n                  - '*'\n                Sid: DescribeRDSClusters\n          PolicyName: get-rds-clusters\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:DescribeDBInstances\n                Effect: Allow\n                Resource:\n                  - '*'\n                Sid: DescribeDBInstances\n          PolicyName: get-db-instances\n    Type: AWS::IAM::Role\n  GetFailoverEvents:\n    DependsOn:\n      - GetFailoverEventsRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\n\\\n          import boto3\\nimport psycopg2\\nfrom botocore.exceptions import ClientError\\\n          \\ as boto3_client_error\\n\\ndef get_region(context):\\n    return context.invoked_function_arn.split(':')[3]\\n\\\n          \\ndef get_rds_credentials():\\n    \\n    secrets_manager_client = boto3.client('secretsmanager')\\n\\\n          \\n    try:\\n        \\n        get_secret_value_response = secrets_manager_client.get_secret_value(\\n\\\n          \\            SecretId = os.environ['REGIONAL_RDS_SECRET_ARN']\\n        )\\n\\\n          \\        \\n    except boto3_client_error as e:\\n        raise Exception('Failed\\\n          \\ to Retrieve RDS Secret: ' + str(e))\\n        \\n    else:\\n        return\\\n          \\ json.loads(get_secret_value_response['SecretString'])\\n        \\ndef handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n    \\n    rds_secret =\\\n          \\ get_rds_credentials()\\n    \\n    db_conn = psycopg2.connect(\\n       \\\n          \\ host = os.environ['GLOBAL_DB_WRITER_ENDPOINT'],\\n        port = rds_secret['port'],\\n\\\n          \\        user = rds_secret['username'],\\n        password = rds_secret['password'],\\n\\\n          \\        database = rds_secret['database'],\\n        connect_timeout = 3,\\n\\\n          \\        sslmode = 'require',\\n    )\\n        \\n    curs = db_conn.cursor()\\n\\\n          \\    \\n    curs.execute('''\\n        SELECT \\n            event,\\n     \\\n          \\       to_char(insertedon,'HH24:MI:SS') AS time, \\n            insertedon\\\n          \\ \\n        FROM failoverevents\\n        ORDER BY insertedon\\n    ''');\\n\\\n          \\    \\n    failover_events = curs.fetchall()\\n    \\n    curs.close()\\n \\\n          \\   db_conn.close()\\n    \\n    records_to_return = []\\n    \\n    for x in\\\n          \\ failover_events:\\n    \\n        c = 0\\n        temp2 = {}\\n        \\n\\\n          \\        for col in curs.description:\\n            \\n            temp2.update({str(col[0]):\\\n          \\ x[c]})\\n            c += 1\\n        \\n        records_to_return.append(temp2)\\n\\\n          \\    \\n    return {\\n        'records': records_to_return\\n    }\"\n      Description: ''\n      Environment:\n        Variables:\n          GLOBAL_DB_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSGlobalWriterDNSEndpoint}}\n          REGIONAL_RDS_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSAdminSecretARN}}\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'GetFailoverEventsRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  GetFailoverEventsLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - GetFailoverEvents\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetFailoverEvents'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetFailoverEventsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.records')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 400.*'\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 401.*'\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 403.*'\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 404.*'\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 415.*'\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 429.*'\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 500.*'\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{}'\n          application/x-www-form-urlencoded: '{}'\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetFailoverEvents.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getFailoverEvents\n      ResourceId: !Ref 'FailoverEventsResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  GetFailoverEventsMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - GetFailoverEvents\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetFailoverEvents.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /APIID}}\n          - /*/\n          - GET\n          - /\n          - failover-events\n    Type: AWS::Lambda::Permission\n  GetFailoverEventsRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - ec2:ReplaceNetworkAclEntry\n                Effect: Allow\n                Resource:\n                  - '*'\n                Sid: UpdateACLEntry\n          PolicyName: custom-policy\n    Type: AWS::IAM::Role\n  RdsNaclResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIRootResourceID}}\n      PathPart: rds-nacl\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Resource\n  RdsNaclResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'RdsNaclResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  UpdateNACL:\n    DependsOn:\n      - UpdateNACLRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import os\\nimport json\\nimport boto3\\n\\ndef get_region(context):\\n\\\n          \\    return context.invoked_function_arn.split(':')[3]\\n    \\ndef lambda_handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n    \\n    ec2_client =\\\n          \\ boto3.client('ec2')\\n    \\n    ec2_client.replace_network_acl_entry(\\n\\\n          \\        Egress = False, \\n        CidrBlock = '0.0.0.0/0',\\n        NetworkAclId\\\n          \\ = os.environ['RDS_ACL_ID'],\\n        Protocol = '-1',\\n        RuleAction\\\n          \\ = 'deny',\\n        RuleNumber = 100\\n    )\\n    \\n    return {\\n     \\\n          \\   'records': []\\n    }\"\n      Description: ''\n      Environment:\n        Variables:\n          RDS_NACL_ID: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DatabaseACLID}}\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'UpdateNACLRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  UpdateNACLLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - UpdateNACL\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'UpdateNACL'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  UpdateNACLMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.records')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 400.*'\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 401.*'\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 403.*'\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 404.*'\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 415.*'\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 429.*'\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 500.*'\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{}'\n          application/x-www-form-urlencoded: '{}'\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'UpdateNACL.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getFailoverEvents\n      ResourceId: !Ref 'RdsNaclResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  UpdateNACLMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - UpdateNACL\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'UpdateNACL.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /APIID}}\n          - /*/\n          - GET\n          - /\n          - rds-nacl\n    Type: AWS::Lambda::Permission\n  UpdateNACLRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - ec2:ReplaceNetworkAclEntry\n                Effect: Allow\n                Resource:\n                  - '*'\n                Sid: UpdateACLEntry\n          PolicyName: custom-policy\n    Type: AWS::IAM::Role\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "APIMethods2StackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "APIGatewayStackSet",
    "PrivateHostedZone",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - APIMethods2",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrivateHostedZoneID",
      "ParameterValue": {
       "Ref": "PrivateHostedZone"
      }
     },
     {
      "ParameterKey": "PrimaryLambdaLayerARN",
      "ParameterValue": {
       "Ref": "PrimaryLambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "FailoverLambdaLayerARN",
      "ParameterValue": {
       "Ref": "FailoverLambdaLayerCreatorResource"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "APIMethods2"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverLambdaLayerARN:\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryLambdaLayerARN:\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PrivateHostedZoneID:\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  BypassRDSProxy:\n    DependsOn:\n      - BypassRDSProxyRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import os\\nimport json\\nimport boto3\\nimport dateutil.tz\\nfrom datetime\\\n          \\ import datetime\\n\\ndef get_region(context):\\n    return context.invoked_function_arn.split(':')[3]\\n\\\n          \\ndef cnameChangeSiteToDB():\\n    \\n    r53_client = boto3.client('route53')\\n\\\n          \\    \\n    for endpoint_type in ['reader', 'writer']:\\n    \\n        response\\\n          \\ = r53_client.change_resource_record_sets(\\n            ChangeBatch = {\\n\\\n          \\                'Changes': [\\n                    {\\n                 \\\n          \\       'Action': 'UPSERT',\\n                        'ResourceRecordSet':\\\n          \\ {\\n                            'Name': 'db.' + endpoint_type + '.' + os.environ['PUBLIC_FQDN']\\\n          \\ + '.internal',\\n                            'ResourceRecords': [\\n   \\\n          \\                             {\\n                                    'Value':\\\n          \\ os.environ['RDS_CLUSTER_' + endpoint_type.upper() + '_ENDPOINT'],\\n  \\\n          \\                              },\\n                            ],\\n    \\\n          \\                        'TTL': 1,\\n                            'Type':\\\n          \\ 'CNAME',\\n                        },\\n                    },\\n       \\\n          \\         ],\\n            },\\n            HostedZoneId = os.environ['PRIVATE_HOSTED_ZONE_ID'],\\n\\\n          \\        )\\n\\ndef lambda_handler(event, context):\\n    \\n    cnameChangeSiteToDB()\\n\\\n          \\    \\n    return {\\n        'statusCode': 200,\\n        'headers': {\\n\\\n          \\            'Access-Control-Allow-Headers': 'Content-Type',\\n         \\\n          \\   'Access-Control-Allow-Origin': '*',\\n            'Access-Control-Allow-Methods':\\\n          \\ 'OPTIONS,POST,GET',\\n            'content-type': 'text/html'\\n       \\\n          \\ },\\n        'body': json.dumps('DNS Records Updated Successfully')\\n \\\n          \\   }\"\n      Description: ''\n      Environment:\n        Variables:\n          PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'\n          PUBLIC_FQDN: !Ref 'PublicFQDN'\n          RDS_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSClusterReaderEndpoint}}\n          RDS_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSClusterWriterEndpoint}}\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'BypassRDSProxyRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  BypassRDSProxyLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - BypassRDSProxy\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'BypassRDSProxy'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  BypassRDSProxyMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.records')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 400.*'\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 401.*'\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 403.*'\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 404.*'\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 415.*'\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 429.*'\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 500.*'\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{}'\n          application/x-www-form-urlencoded: '{}'\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'BypassRDSProxy.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getBypassRDSProxy\n      ResourceId: !Ref 'BypassRdsProxyResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  BypassRDSProxyMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - BypassRDSProxy\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'BypassRDSProxy.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /APIID}}\n          - /*/\n          - GET\n          - /\n          - bypass-rds-proxy\n    Type: AWS::Lambda::Permission\n  BypassRDSProxyRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - route53:ChangeResourceRecordSets\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - arn:aws:route53:::hostedzone/\n                      - !Ref 'PrivateHostedZoneID'\n                Sid: UpdateRoute53Records\n          PolicyName: update-route53-records\n    Type: AWS::IAM::Role\n  BypassRdsProxyResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIRootResourceID}}\n      PathPart: bypass-rds-proxy\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Resource\n  BypassRdsProxyResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'BypassRdsProxyResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  FailoverResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIRootResourceID}}\n      PathPart: failover\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Resource\n  FailoverResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'FailoverResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  GetRTO:\n    DependsOn:\n      - GetRTORole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\n\\\n          import boto3\\nimport psycopg2\\nfrom botocore.exceptions import ClientError\\\n          \\ as boto3_client_error\\n\\ndef get_region(context):\\n    return context.invoked_function_arn.split(':')[3]\\n\\\n          \\ndef get_rds_credentials():\\n    \\n    secrets_manager_client = boto3.client('secretsmanager')\\n\\\n          \\n    try:\\n        \\n        get_secret_value_response = secrets_manager_client.get_secret_value(\\n\\\n          \\            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\\n        )\\n\\\n          \\        \\n    except boto3_client_error as e:\\n        raise Exception('Failed\\\n          \\ to Retrieve RDS Secret: ' + str(e))\\n        \\n    else:\\n        return\\\n          \\ json.loads(get_secret_value_response['SecretString'])\\n        \\ndef lambda_handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n    \\n    return {\\n  \\\n          \\      'statusCode': 200,\\n        'headers': {\\n            'Access-Control-Allow-Headers':\\\n          \\ 'Content-Type',\\n            'Access-Control-Allow-Origin': '*',\\n   \\\n          \\         'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\\n        \\\n          \\    'content-type': 'text/html'\\n        },\\n        'body': json.dumps([])\\n\\\n          \\    }\\n    \\n    rds_secret = get_rds_credentials()\\n\\n    db_conn = psycopg2.connect(\\n\\\n          \\        host = rds_secret['host'],\\n        port = rds_secret['port'],\\n\\\n          \\        user = rds_secret['username'],\\n        password = rds_secret['password'],\\n\\\n          \\        database = rds_secret['database'],\\n        connect_timeout = 3,\\n\\\n          \\        sslmode = 'require',\\n    )\\n        \\n    curs = db_conn.cursor()\\n\\\n          \\    \\n    curs.execute('''\\n        SELECT\\n            DATE_PART('second',\\\n          \\ max(insertedon)::TIMESTAMP - min(insertedon)::TIMESTAMP) AS rto\\n    \\\n          \\    FROM dataclient \\n        WHERE http_code = 500 \\n        GROUP BY\\\n          \\ http_code\\n    ''');\\n    \\n    client_events = curs.fetchall()\\n    \\n\\\n          \\    curs.close()\\n    db_conn.close()\\n    \\n    records_to_return = []\\n\\\n          \\    \\n    for x in client_events:\\n    \\n        c = 0\\n        temp2 =\\\n          \\ {}\\n        \\n        for col in curs.description:\\n            \\n   \\\n          \\         temp2.update({str(col[0]): x[c]})\\n            c += 1\\n      \\\n          \\  \\n        records_to_return.append(temp2)\\n    \\n    return {\\n     \\\n          \\   'statusCode': 200,\\n        'headers': {\\n            'Access-Control-Allow-Headers':\\\n          \\ 'Content-Type',\\n            'Access-Control-Allow-Origin': '*',\\n   \\\n          \\         'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\\n        \\\n          \\    'content-type': 'text/html'\\n        },\\n        'body': json.dumps(records_to_return,\\\n          \\ default = str)\\n    }\\n\"\n      Description: ''\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'GetRTORole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  GetRTOLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - GetRTO\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetRTO'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetRTOMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.records')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 400.*'\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 401.*'\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 403.*'\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 404.*'\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 415.*'\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 429.*'\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 500.*'\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{}'\n          application/x-www-form-urlencoded: '{}'\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetRTO.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getRTO\n      ResourceId: !Ref 'RtoResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  GetRTOMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - GetRTO\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetRTO.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /APIID}}\n          - /*/\n          - GET\n          - /\n          - rto\n    Type: AWS::Lambda::Permission\n  GetRTORole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  RtoResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIRootResourceID}}\n      PathPart: rto\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Resource\n  RtoResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'RtoResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  TriggerFailover:\n    DependsOn:\n      - TriggerFailoverRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\n\\\n          import boto3\\nimport psycopg2\\nimport dateutil.tz\\nimport datetime\\nfrom\\\n          \\ botocore.exceptions import ClientError as boto3_client_error\\n\\ndef get_region(context):\\n\\\n          \\    return context.invoked_function_arn.split(':')[3]\\n    \\ndef get_rds_credentials():\\n\\\n          \\    \\n    secrets_manager_client = boto3.client('secretsmanager')\\n\\n \\\n          \\   try:\\n        \\n        get_secret_value_response = secrets_manager_client.get_secret_value(\\n\\\n          \\            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\\n        )\\n\\\n          \\        \\n    except boto3_client_error as e:\\n        raise Exception('Failed\\\n          \\ to Retrieve RDS Secret: ' + str(e))\\n        \\n    else:\\n        return\\\n          \\ json.loads(get_secret_value_response['SecretString'])\\n\\ndef lambda_handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n    \\n    eastern = dateutil.tz.gettz('US/Eastern')\\n\\\n          \\    \\n    rds_secret = get_rds_credentials()\\n    \\n    db_conn = psycopg2.connect(\\n\\\n          \\        host = rds_secret['host'],\\n        port = rds_secret['port'],\\n\\\n          \\        user = rds_secret['username'],\\n        sslmode = 'require',\\n\\\n          \\        password = rds_secret['password'],\\n        database = rds_secret['database'],\\n\\\n          \\        connect_timeout = 3,\\n    )\\n\\n    curs = db_conn.cursor()\\n  \\\n          \\  curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values (1,'\\\"\\\n          +datetime.datetime.now(tz=eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\")+\\\"' )\\\"\\\n          )\\n    db_conn.commit()\\n    curs.close()\\n    db_conn.close()\\n    \\n \\\n          \\   return {\\n        'statusCode': 200,\\n        'headers': {\\n       \\\n          \\     'Access-Control-Allow-Headers': 'Content-Type',\\n            'Access-Control-Allow-Origin':\\\n          \\ '*',\\n            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\\n\\\n          \\            'content-type': 'text/html'\\n        },\\n        'body': 'done'\\n\\\n          \\    }\"\n      Description: ''\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'TriggerFailoverRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  TriggerFailoverLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - TriggerFailover\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'TriggerFailover'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  TriggerFailoverMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.records')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 400.*'\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 401.*'\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 403.*'\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 404.*'\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 415.*'\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 429.*'\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 500.*'\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{}'\n          application/x-www-form-urlencoded: '{}'\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'TriggerFailover.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getFailover\n      ResourceId: !Ref 'FailoverResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  TriggerFailoverMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - TriggerFailover\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'TriggerFailover.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /APIID}}\n          - /*/\n          - GET\n          - /\n          - failover\n    Type: AWS::Lambda::Permission\n  TriggerFailoverRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "APIMethods3StackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "APIGatewayStackSet",
    "PrivateHostedZone",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - APIMethods3",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrivateHostedZoneID",
      "ParameterValue": {
       "Ref": "PrivateHostedZone"
      }
     },
     {
      "ParameterKey": "PrimaryLambdaLayerARN",
      "ParameterValue": {
       "Ref": "PrimaryLambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "FailoverLambdaLayerARN",
      "ParameterValue": {
       "Ref": "FailoverLambdaLayerCreatorResource"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "APIMethods3"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverLambdaLayerARN:\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryLambdaLayerARN:\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PrivateHostedZoneID:\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  ClientError:\n    DependsOn:\n      - ClientErrorRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\n\\\n          import boto3\\nimport psycopg2\\nimport dateutil.tz\\nfrom datetime import\\\n          \\ datetime\\nfrom datetime import timedelta\\nfrom botocore.exceptions import\\\n          \\ ClientError as boto3_client_error\\n\\ndef get_region(context):\\n    return\\\n          \\ context.invoked_function_arn.split(':')[3]\\n\\ndef get_rds_credentials():\\n\\\n          \\    \\n    secrets_manager_client = boto3.client('secretsmanager')\\n\\n \\\n          \\   try:\\n        \\n        get_secret_value_response = secrets_manager_client.get_secret_value(\\n\\\n          \\            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\\n        )\\n\\\n          \\        \\n    except boto3_client_error as e:\\n        raise Exception('Failed\\\n          \\ to Retrieve RDS Secret: ' + str(e))\\n        \\n    else:\\n        return\\\n          \\ json.loads(get_secret_value_response['SecretString'])\\n        \\ndef addfivesec(firsttime):\\n\\\n          \\    return (datetime.strptime(str(firsttime), '%H:%M:%S')+timedelta(seconds=5)).strftime(\\\"\\\n          %H:%M:%S\\\")\\n\\ndef substractFiveSec(firsttime):\\n    return (datetime.strptime(str(firsttime),\\\n          \\ '%H:%M:%S')+timedelta(seconds=-5)).strftime(\\\"%H:%M:%S\\\")\\n    \\ndef addTime(label,data):\\n\\\n          \\    eastern = dateutil.tz.gettz('US/Pacific')\\n    mynow=datetime.now(tz=eastern)\\n\\\n          \\    print((datetime.strptime(label[len(label)-1], '%H:%M:%S')+timedelta(seconds=9)))\\n\\\n          \\    print(datetime.strptime(mynow.strftime(\\\"%H:%M:%S\\\"), '%H:%M:%S'))\\n\\\n          \\    \\n    \\n    while((datetime.strptime(label[len(label)-1], '%H:%M:%S')+timedelta(seconds=9))\\\n          \\    < datetime.strptime(mynow.strftime(\\\"%H:%M:%S\\\"), '%H:%M:%S')):\\n \\\n          \\       print('add')\\n        label.pop(0)\\n        data.pop(0)\\n      \\\n          \\  \\n        label.append(addfivesec(label[len(label)-1]))\\n        data.append('0')\\n\\\n          \\ndef lambda_handler(event, context):\\n    \\n    print(json.dumps(event))\\n\\\n          \\    \\n    rds_secret = get_rds_credentials()\\n\\n    db_conn = psycopg2.connect(\\n\\\n          \\        host = rds_secret['host'],\\n        port = rds_secret['port'],\\n\\\n          \\        user = rds_secret['username'],\\n        password = rds_secret['password'],\\n\\\n          \\        database = rds_secret['database'],\\n        connect_timeout = 3,\\n\\\n          \\        sslmode = 'require',\\n    )\\n        \\n    curs=db_conn.cursor()\\n\\\n          \\    curs.execute(\\\"select insertedon, sum(1) from dataclient where http_code=500\\\n          \\ group by insertedon order by insertedon desc limit 15\\\");\\n    east1_TPS=\\\n          \\ curs.fetchall()\\n    \\n    curs.close()\\n    db_conn.close()\\n    \\n \\\n          \\   \\n    label_json=\\\"\\\"\\n    data_json=\\\"\\\"\\n    \\n    label_arr=[]\\n\\\n          \\    data_arr=[]\\n    \\n    #for i in reversed(range(1,len(east1_TPS))):\\n\\\n          \\    #    label_arr.append(str(east1_TPS[i][0]))\\n    #    data_arr.append(str(east1_TPS[i][1]))\\n\\\n          \\    \\n    for r in reversed(east1_TPS):\\n        label_arr.append(str(r[0]))\\n\\\n          \\        data_arr.append(str(r[1]))\\n        \\n        \\n    if len(label_arr)>0:\\n\\\n          \\        for n in range(len(label_arr)+1,16):\\n            label_arr.insert(0,\\\n          \\ substractFiveSec(label_arr[0]))\\n            data_arr.insert(0,'0')\\n\\\n          \\        \\n        addTime(label_arr,data_arr)\\n    \\n    \\n    i=-1\\n \\\n          \\   for r in label_arr:\\n        i=i+1\\n        if label_json!=\\\"\\\":\\n \\\n          \\           label_json+=\\\",\\\"\\n        if data_json!=\\\"\\\":\\n           \\\n          \\ data_json+=\\\",\\\"\\n            \\n        label_json+= label_arr[i]\\n  \\\n          \\      data_json+=data_arr[i]\\n    \\n    \\n    json_data=json.dumps({'labels':\\\n          \\ label_json, 'data': data_json})\\n    json_data='['+json_data+']'\\n   \\\n          \\ \\n    return {\\n        'statusCode': 200,\\n        'headers': {\\n   \\\n          \\         'Access-Control-Allow-Headers': 'Content-Type',\\n            'Access-Control-Allow-Origin':\\\n          \\ '*',\\n            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\\n\\\n          \\            'content-type': 'text/html'\\n        },\\n        'body': json_data\\n\\\n          \\    }\\n\"\n      Description: ''\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'ClientErrorRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  ClientErrorLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - ClientError\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'ClientError'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  ClientErrorMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.records')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 400.*'\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 401.*'\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 403.*'\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 404.*'\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 415.*'\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 429.*'\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 500.*'\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{}'\n          application/x-www-form-urlencoded: '{}'\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'ClientError.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getClientError\n      ResourceId: !Ref 'ClientErrorResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  ClientErrorMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - ClientError\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'ClientError.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /APIID}}\n          - /*/\n          - GET\n          - /\n          - client-error\n    Type: AWS::Lambda::Permission\n  ClientErrorResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIRootResourceID}}\n      PathPart: client-error\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Resource\n  ClientErrorResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'ClientErrorResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  ClientErrorRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  ResetDemoEnvironment:\n    DependsOn:\n      - ResetDemoEnvironmentRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"_N='Failed to Reset NACL: '\\n_M='route53'\\n_L='PRIVATE_HOSTED_ZONE_ID'\\n\\\n          _K='CNAME'\\n_J='Value'\\n_I='Type'\\n_H='TTL'\\n_G='ResourceRecords'\\n_F='Name'\\n\\\n          _E='UPSERT'\\n_D='ResourceRecordSet'\\n_C='Action'\\n_B='Changes'\\n_A='PUBLIC_FQDN'\\n\\\n          import sys\\nsys.path.append('/opt')\\nimport os,json,boto3,psycopg2,dateutil.tz\\n\\\n          from datetime import datetime\\nfrom botocore.exceptions import ClientError\\\n          \\ as boto3_client_error\\nr53_client=boto3.client(_M)\\nevent_bridge_client=boto3.client('events')\\n\\\n          def get_region(context):return context.invoked_function_arn.split(':')[3]\\n\\\n          def get_rds_credentials():\\n\\tA=boto3.client('secretsmanager')\\n\\ttry:B=A.get_secret_value(SecretId=os.environ['RDS_ADMIN_SECRET_ARN'])\\n\\\n          \\texcept boto3_client_error as C:raise Exception('Failed to Retrieve RDS\\\n          \\ Secret: '+str(C))\\n\\telse:return json.loads(B['SecretString'])\\ndef update_dns_records():\\n\\\n          \\tE='comment';D='hostedZoneId';C='newValue';B='fqdn';F=boto3.client(_M);G=[{B:os.environ[_A],E:'Points\\\n          \\ the Service FQDN Back to the Primary Web ALB',C:os.environ['PRIMARY_WEB_ALB_FQDN'],D:os.environ['PUBLIC_HOSTED_ZONE_ID']},{B:'db.writer.'+os.environ[_A],E:\\\"\\\n          Points the Internal DB Writer Endpoint Back to the Primary Cluster's Writer\\\"\\\n          ,C:os.environ['RDS_REGIONAL_WRITER_ENDPOINT'],D:os.environ[_L]},{B:'db.reader.'+os.environ[_A],E:\\\"\\\n          Points the Internal DB Writer Endpoint Back to the Primary Cluster's Reader\\\"\\\n          ,C:os.environ['RDS_REGIONAL_READER_ENDPOINT'],D:os.environ[_L]}]\\n\\tfor\\\n          \\ A in G:F.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:A[B],_G:[{_J:A[C]}],_H:1,_I:_K}}]},HostedZoneId=A[D])\\n\\\n          def promote_rds_proxy_to_primary_endoint():\\n\\tfor A in ['reader','writer']:B=r53_client.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:'db.'+A+'.'+os.environ[_A]+'.internal',_G:[{_J:os.environ['RDS_PROXY_'+A.upper()+'_ENDPOINT']}],_H:1,_I:_K}}]},HostedZoneId=os.environ[_L])\\n\\\n          def cnameChangeCanaryToCluster():C='Z02605833FBBNQ31FGNI6';A='writer.cluster.endpoint.example.internal';B='database-3.cluster-c3uapa5iy3fn.us-west-1.rds.amazonaws.com';D=r53_client.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:A,_G:[{_J:B}],_H:1,_I:_K}}]},HostedZoneId=C);A='reader.cluster.endpoint.example.internal';B='database-3.cluster-ro-c3uapa5iy3fn.us-west-1.rds.amazonaws.com';D=r53_client.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:A,_G:[{_J:B}],_H:1,_I:_K}}]},HostedZoneId=C)\\n\\\n          def disableRDSProxyCheckRule():A='checkRDSProxyTargetRegistered';B=event_bridge_client.disable_rule(Name=A)\\n\\\n          def enable_canary_cron():\\n\\ttry:event_bridge_client.enable_rule(Name=os.environ['CANARY_CRON_NAME'])\\n\\\n          \\texcept boto3_client_error as A:raise Exception(_N+str(A))\\ndef allow_traffic_to_primary_rds_cluster():\\n\\\n          \\tA=boto3.client('ec2',region_name=os.environ['PRIMARY_REGION_NAME'])\\n\\t\\\n          try:A.replace_network_acl_entry(Egress=False,Protocol='-1',CidrBlock='0.0.0.0/0',RuleAction='allow',RuleNumber=100,NetworkAclId=os.environ['RDS_ACL_ID'])\\n\\\n          \\texcept boto3_client_error as B:raise Exception(_N+str(B))\\ndef lambda_handler(event,context):\\n\\\n          \\tallow_traffic_to_primary_rds_cluster();promote_rds_proxy_to_primary_endoint();enable_canary_cron();A=get_rds_credentials();B=psycopg2.connect(host=A['host'],port=A['port'],user=A['username'],sslmode='require',password=A['password'],database=A['database'],connect_timeout=3)\\n\\\n          \\tfor D in ['dataclient','dataserver','failoverevents']:C=B.cursor();C.execute('DELETE\\\n          \\ FROM '+D);B.commit()\\n\\tC.close();B.close();return{'statusCode':200,'body':json.dumps('Reset\\\n          \\ Successful')}\"\n      Description: ''\n      Environment:\n        Variables:\n          CANARY_CRON_NAME: !Join\n            - ''\n            - - !Ref 'MainStackName'\n              - -canary\n          PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'\n          PUBLIC_FQDN: !Ref 'PublicFQDN'\n          PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneID'\n          RDS_NACL_ID: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DatabaseACLID}}\n          WEB_ALB_FQDN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LoadBalancerFQDN}}\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'ResetDemoEnvironmentRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  ResetDemoEnvironmentLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - ResetDemoEnvironment\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'ResetDemoEnvironment'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  ResetDemoEnvironmentMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.records')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 400.*'\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 401.*'\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 403.*'\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 404.*'\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 415.*'\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 429.*'\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 500.*'\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{}'\n          application/x-www-form-urlencoded: '{}'\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'ResetDemoEnvironment.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getResetDemoEnvironment\n      ResourceId: !Ref 'ResetDemoEnvironmentResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  ResetDemoEnvironmentMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - ResetDemoEnvironment\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'ResetDemoEnvironment.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /APIID}}\n          - /*/\n          - GET\n          - /\n          - reset-demo-environment\n    Type: AWS::Lambda::Permission\n  ResetDemoEnvironmentResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIRootResourceID}}\n      PathPart: reset-demo-environment\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Resource\n  ResetDemoEnvironmentResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'ResetDemoEnvironmentResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  ResetDemoEnvironmentRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - ec2:ReplaceNetworkAclEntry\n                Effect: Allow\n                Resource:\n                  - '*'\n                Sid: UpdateACLEntry\n              - Action:\n                  - events:EnableRule\n                  - events:DisableRule\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - 'arn:aws:events:'\n                      - !Ref 'AWS::Region'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - :rule/\n                      - !Join\n                        - ''\n                        - - !Ref 'MainStackName'\n                          - -canary\n                  - !Join\n                    - ''\n                    - - 'arn:aws:events:'\n                      - !Ref 'AWS::Region'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - :rule/\n                      - !Join\n                        - ''\n                        - - !Ref 'MainStackName'\n                          - -proxy-monitor\n                Sid: ManageCrons\n              - Action:\n                  - route53:ChangeResourceRecordSets\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - arn:aws:route53:::hostedzone/\n                      - !Ref 'PublicHostedZoneID'\n                  - !Join\n                    - ''\n                    - - arn:aws:route53:::hostedzone/\n                      - !Ref 'PrivateHostedZoneID'\n                Sid: UpdateR53HostedZone\n          PolicyName: custom-policy\n    Type: AWS::IAM::Role\n  TestTrafficTopic:\n    Condition: IsPrimaryRegion\n    Type: AWS::SNS::Topic\n  TestTrafficTopicPermission:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - TrafficGenerator\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'TrafficGenerator'\n      Principal: sns.amazonaws.com\n      SourceAccount: !Ref 'AWS::AccountId'\n      SourceArn: !Ref 'TestTrafficTopic'\n    Type: AWS::Lambda::Permission\n  TestTrafficTopicSubscription:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - TrafficGenerator\n      - TestTrafficTopic\n      - TestTrafficTopicPermission\n    Properties:\n      Endpoint: !GetAtt 'TrafficGenerator.Arn'\n      Protocol: lambda\n      TopicArn: !Ref 'TestTrafficTopic'\n    Type: AWS::SNS::Subscription\n  TrafficGenerator:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - TrafficGeneratorRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import os\\nimport time\\nimport json\\nimport boto3\\n\\ndef get_region(context):\\n\\\n          \\    return context.invoked_function_arn.split(':')[3]\\n    \\ndef lambda_handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n\\n    sns_client = boto3.client('sns')\\n\\\n          \\    \\n    for i in range(0, 5000):\\n        \\n        sns_client.publish(\\n\\\n          \\            Message = 'Hello',\\n            TargetArn = os.environ['TEST_TRAFFIC_TOPIC_ARN'],\\n\\\n          \\        )\\n        \\n        time.sleep(0.1)\\n    \\n    return {\\n    \\\n          \\    'statusCode': 200,\\n        'body': json.dumps('Hello from ' + get_region(context)\\\n          \\ + ' SNS Client Lambda!')\\n    }\\n\"\n      Description: ''\n      Environment:\n        Variables:\n          TEST_TRAFFIC_TOPIC_ARN: !Ref 'TestTrafficTopic'\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'TrafficGeneratorRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  TrafficGeneratorLogGroup:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Retain\n    DependsOn:\n      - TrafficGenerator\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'TrafficGenerator'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  TrafficGeneratorMethod:\n    Condition: IsPrimaryRegion\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.records')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 400.*'\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 401.*'\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 403.*'\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 404.*'\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 415.*'\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 429.*'\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: '.*\"code\": 500.*'\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{}'\n          application/x-www-form-urlencoded: '{}'\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'TrafficGenerator.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getTrafficGenerator\n      ResourceId: !Ref 'TrafficGeneratorResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  TrafficGeneratorMethodInvocationPermission:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - TrafficGenerator\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'TrafficGenerator.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /APIID}}\n          - /*/\n          - GET\n          - /\n          - traffic-generator\n    Type: AWS::Lambda::Permission\n  TrafficGeneratorResource:\n    Condition: IsPrimaryRegion\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIRootResourceID}}\n      PathPart: traffic-generator\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Resource\n  TrafficGeneratorResourceOptionsMethod:\n    Condition: IsPrimaryRegion\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'TrafficGeneratorResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /APIID}}\n    Type: AWS::ApiGateway::Method\n  TrafficGeneratorRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies: []\n    Type: AWS::IAM::Role\n  TrafficGeneratorRoleGenerateTestTraffic:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - TrafficGeneratorRole\n      - TestTrafficTopic\n    Properties:\n      PolicyDocument:\n        Statement:\n          - Action:\n              - sns:Publish\n            Effect: Allow\n            Resource:\n              - !Ref 'TestTrafficTopic'\n            Sid: SendMessagesToSNS\n      PolicyName: generate-test-traffic\n      Roles:\n        - !Ref 'TrafficGeneratorRole'\n    Type: AWS::IAM::Policy\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "CFNExportRetriever": {
   "DependsOn": [
    "CFNExportRetrieverRole"
   ],
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "import sys\nimport subprocess\n\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)\nsys.path.insert(1, '/tmp/')\n\nimport io\nimport os\nimport json\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError, ParamValidationError\n\n'''\n    - Region | str\n    - ExportPrefix | str\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n    response_data = {}\n    \n    boto3Session = boto3.Session(\n        region_name = arguments['Region']\n    )\n    \n    cfn_client = boto3Session.client('cloudformation')\n    \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        try:\n            \n            response = cfn_client.list_exports()\n            \n            for export in response['Exports']:\n            \t\n                if export['Name'].startswith(arguments['ExportPrefix']):\n                    response_data[export['Name'].replace(arguments['ExportPrefix'] + '-', '')] = export['Value']\n                \n            print(response_data)\n            \n            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\n                \n        except ClientError as e:\n            print('Failed to Retrieve CFN Exports: ' + str(e.response))\n            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n            \n    if event['RequestType'] in ['Delete']:\n        \n        return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
    },
    "Description": "",
    "Environment": {
     "Variables": {}
    },
    "Handler": "index.handler",
    "Layers": [],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "CFNExportRetrieverRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 15,
    "TracingConfig": {
     "Mode": "PassThrough"
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "CFNExportRetrieverLogGroup": {
   "DeletionPolicy": "Retain",
   "DependsOn": [
    "CFNExportRetriever"
   ],
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "CFNExportRetriever"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "CFNExportRetrieverRole": {
   "DependsOn": [],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "cloudformation:ListExports"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ],
         "Sid": "GetCFNOutputs"
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "DashboardStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Dashboard",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Dashboard"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nOutputs:\n  DashboardURLExport:\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -DashboardURL\n    Value: !Join\n      - ''\n      - - https://\n        - !GetAtt 'CloudFrontDistribution.DomainName'\n        - ?apiHost=\n        - !Ref 'AWS::Region'\n        - .api.\n        - !Ref 'PublicFQDN'\n        - '&primaryRegion='\n        - !Ref 'PrimaryRegionName'\n        - '&failoverRegion='\n        - !Ref 'FailoverRegionName'\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  Bucket:\n    DeletionPolicy: Retain\n    Properties:\n      AccessControl: Private\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n      VersioningConfiguration:\n        Status: Suspended\n    Type: AWS::S3::Bucket\n  BucketPolicy:\n    DependsOn:\n      - Bucket\n      - CloudFrontAccessIdentity\n    Properties:\n      Bucket: !Ref 'Bucket'\n      PolicyDocument:\n        Statement:\n          - Action:\n              - s3:GetObject\n            Effect: Allow\n            Principal:\n              AWS: !Join\n                - ''\n                - - 'arn:'\n                  - !Ref 'AWS::Partition'\n                  - ':iam::cloudfront:user/CloudFront Origin Access Identity '\n                  - !Ref 'CloudFrontAccessIdentity'\n            Resource:\n              - !Join\n                - ''\n                - - !GetAtt 'Bucket.Arn'\n                  - /*\n    Type: AWS::S3::BucketPolicy\n  CloudFrontAccessIdentity:\n    Properties:\n      CloudFrontOriginAccessIdentityConfig:\n        Comment: Dashboard\n    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n  CloudFrontDistribution:\n    DependsOn:\n      - ResponseHeadersPolicy\n      - CloudFrontAccessIdentity\n    Properties:\n      DistributionConfig:\n        DefaultCacheBehavior:\n          Compress: true\n          ForwardedValues:\n            QueryString: true\n          ResponseHeadersPolicyId: !Ref 'ResponseHeadersPolicy'\n          TargetOriginId: dashboard-bucket\n          ViewerProtocolPolicy: redirect-to-https\n        DefaultRootObject: !If\n          - IsPrimaryRegion\n          - primary-region.html\n          - failover-region.html\n        Enabled: true\n        HttpVersion: http2\n        IPV6Enabled: true\n        Origins:\n          - DomainName: !GetAtt 'Bucket.DomainName'\n            Id: dashboard-bucket\n            S3OriginConfig:\n              OriginAccessIdentity: !Join\n                - ''\n                - - origin-access-identity/cloudfront/\n                  - !Ref 'CloudFrontAccessIdentity'\n    Type: AWS::CloudFront::Distribution\n  DashboardCodeDeployer:\n    DependsOn:\n      - DashboardCodeDeployerRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nimport subprocess\\n\\nsubprocess.call('pip install cfnresponse\\\n          \\ -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr\\\n          \\ = subprocess.DEVNULL)\\nsys.path.insert(1, '/tmp/')\\n\\nimport os\\nimport\\\n          \\ json\\nimport glob\\nimport boto3\\nimport shutil\\nimport urllib3\\nimport\\\n          \\ zipfile\\nimport mimetypes\\nimport cfnresponse\\nfrom collections import\\\n          \\ defaultdict\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\\n          \\nhttp = urllib3.PoolManager()\\n\\ntry:\\n    from urllib2 import HTTPError,\\\n          \\ build_opener, HTTPHandler, Request\\nexcept ImportError:\\n    from urllib.error\\\n          \\ import HTTPError\\n    from urllib.request import build_opener, HTTPHandler,\\\n          \\ Request\\n\\ndef delete_all_objects(bucket_name):\\n    \\n    try:\\n    \\\n          \\        \\n        boto3.resource('s3').Bucket(bucket_name).objects.all().delete()\\n\\\n          \\    \\n    except boto3_client_error as e:\\n        print('Failed to Empty\\\n          \\ Dashboard Bucket: ' + str(e))\\n        return False\\n    \\n    return\\\n          \\ True\\n    \\n'''\\n    - CodeBucketName | str\\n    - CodeDownloadURL | str\\n\\\n          '''\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n\\\n          \\    \\n    arguments = event['ResourceProperties']['Properties']\\n    response_data\\\n          \\ = {}\\n    \\n    if event['RequestType'] in ['Create', 'Update']:\\n   \\\n          \\     \\n        path_to_local_zip = '/tmp/dashboard_code.zip'\\n        path_to_local_dir\\\n          \\ = path_to_local_zip.replace('.zip', '')\\n        \\n        '''\\n     \\\n          \\       Download the codebase\\n        '''\\n        http = urllib3.PoolManager()\\n\\\n          \\        code_download_response = http.request('GET', arguments['CodeDownloadURL'],\\\n          \\ preload_content = False)\\n        \\n        if code_download_response.status\\\n          \\ != 200:\\n            return False\\n        \\n        with code_download_response\\\n          \\ as r, open(path_to_local_zip, 'wb') as out_file:\\n            shutil.copyfileobj(r,\\\n          \\ out_file)\\n        \\n        '''\\n            Unzip the downloaded code\\n\\\n          \\        '''\\n        with zipfile.ZipFile(path_to_local_zip, 'r') as zip_ref:\\n\\\n          \\            zip_ref.extractall(path_to_local_dir)\\n            \\n     \\\n          \\   s3_client = boto3.client('s3')\\n        \\n        '''\\n            For\\\n          \\ each file in the local code directory\\n        '''\\n        for file_path\\\n          \\ in glob.iglob(path_to_local_dir + '**/**', recursive = True):\\n      \\\n          \\      \\n            '''\\n                If it's one of the dashboard files\\\n          \\ and it's a file, not a directory, we'll upload it to S3\\n            '''\\n\\\n          \\            if '/dashboard/' in file_path and os.path.isfile(file_path):\\n\\\n          \\            \\n                try:\\n                    \\n            \\\n          \\        s3_key = file_path.split('/dashboard/')[1]\\n                  \\\n          \\  \\n                    s3_client.upload_file(file_path, arguments['CodeBucketName'],\\\n          \\ s3_key,\\n                        ExtraArgs = {\\n                     \\\n          \\       'ContentType': mimetypes.guess_type(file_path)[0]\\n            \\\n          \\            })\\n                    \\n                except boto3_client_error\\\n          \\ as e:\\n                    print('Failed to Upload Dashboard File: ' +\\\n          \\ str(e))\\n                    return cfnresponse.send(event, context, cfnresponse.FAILED,\\\n          \\ response_data)\\n                    \\n        properties = event['ResourceProperties']\\n\\\n          \\        \\n    elif event['RequestType'] in ['Delete']:\\n        \\n    \\\n          \\    object_deletion = delete_all_objects(arguments['CodeBucketName'])\\n\\\n          \\        \\n        delete_marker_deletion = True\\n        #delete_marker_deletion\\\n          \\ = delete_all_delete_markers(arguments['CodeBucketName'])\\n        \\n \\\n          \\       if object_deletion is False or delete_marker_deletion is False:\\n\\\n          \\                \\n            return cfnresponse.send(event, context, cfnresponse.FAILED,\\\n          \\ response_data)\\n    \\n    return cfnresponse.send(event, context, cfnresponse.SUCCESS,\\\n          \\ response_data)\"\n      Description: ''\n      Environment:\n        Variables:\n          CODE_BUCKET_NAME: !Ref 'Bucket'\n          CODE_DOWNLOAD_URL: !Ref 'CodeDownloadURL'\n      Handler: index.handler\n      Layers: []\n      MemorySize: 128\n      Role: !GetAtt 'DashboardCodeDeployerRole.Arn'\n      Runtime: python3.9\n      Timeout: 30\n      TracingConfig:\n        Mode: PassThrough\n    Type: AWS::Lambda::Function\n  DashboardCodeDeployerLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - DashboardCodeDeployer\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'DashboardCodeDeployer'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  DashboardCodeDeployerResource:\n    DependsOn:\n      - Bucket\n      - DashboardCodeDeployer\n      - DashboardCodeDeployerLogGroup\n    Properties:\n      Properties:\n        CodeBucketName: !Ref 'Bucket'\n        CodeDownloadURL: !Ref 'CodeDownloadURL'\n      ServiceToken: !GetAtt 'DashboardCodeDeployer.Arn'\n      Type: Custom::DeployDashboardCode\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  DashboardCodeDeployerRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - s3:PutObject\n                  - s3:ListBucket\n                  - s3:DeleteObject\n                  - s3:ListBucketVersions\n                  - s3:DeleteObjectVersion\n                Effect: Allow\n                Resource:\n                  - !GetAtt 'Bucket.Arn'\n                  - !Join\n                    - ''\n                    - - !GetAtt 'Bucket.Arn'\n                      - /*\n                Sid: PutS3Objects\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  ResponseHeadersPolicy:\n    Properties:\n      ResponseHeadersPolicyConfig:\n        CorsConfig:\n          AccessControlAllowCredentials: false\n          AccessControlAllowHeaders:\n            Items:\n              - '*'\n          AccessControlAllowMethods:\n            Items:\n              - GET\n              - POST\n              - OPTIONS\n          AccessControlAllowOrigins:\n            Items:\n              - '*'\n          AccessControlExposeHeaders:\n            Items:\n              - '*'\n          OriginOverride: false\n        Name: !Join\n          - ''\n          - - !Ref 'MainStackName'\n            - -CORS-With-Preflight-\n            - !If\n              - IsPrimaryRegion\n              - Primary\n              - Failover\n    Type: AWS::CloudFront::ResponseHeadersPolicy\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "DatabasesStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "NetworkingStackSet",
    "PrivateHostedZone",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Databases",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 1,
     "RegionConcurrencyType": "SEQUENTIAL",
     "RegionOrder": [
      {
       "Ref": "PrimaryRegionName"
      },
      {
       "Ref": "FailoverRegionName"
      }
     ]
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrivateHostedZoneID",
      "ParameterValue": {
       "Ref": "PrivateHostedZone"
      }
     },
     {
      "ParameterKey": "PrimaryLambdaLayerARN",
      "ParameterValue": {
       "Ref": "PrimaryLambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "FailoverLambdaLayerARN",
      "ParameterValue": {
       "Ref": "FailoverLambdaLayerCreatorResource"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Databases"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nOutputs:\n  RDSAdminSecretARN:\n    Condition: ''\n    Value: !Ref 'RDSAdminSecret'\n  RDSClusterReaderEndpoint:\n    Condition: ''\n    Value: !If\n      - IsPrimaryRegion\n      - !GetAtt 'PrimaryRDSCluster.ReadEndpoint.Address'\n      - !GetAtt 'FailoverRDSCluster.ReadEndpoint.Address'\n  RDSClusterWriterEndpoint:\n    Condition: ''\n    Value: !If\n      - IsPrimaryRegion\n      - !GetAtt 'PrimaryRDSCluster.Endpoint.Address'\n      - !GetAtt 'FailoverRDSCluster.Endpoint.Address'\n  RDSGlobalClusterIdentifier:\n    Condition: ''\n    Value: !Ref 'MainStackName'\n  RDSGlobalReaderDNSEndpoint:\n    Condition: ''\n    Value: !Join\n      - ''\n      - - db.reader.\n        - !Ref 'PublicFQDN'\n        - .internal\n  RDSGlobalWriterDNSEndpoint:\n    Condition: ''\n    Value: !Join\n      - ''\n      - - db.writer.\n        - !Ref 'PublicFQDN'\n        - .internal\n  RDSProxyARN:\n    Condition: ''\n    Value: !GetAtt 'RDSProxy.DBProxyArn'\n  RDSProxyName:\n    Condition: ''\n    Value: !Ref 'RDSProxy'\n  RDSProxyPort:\n    Condition: ''\n    Value: !If\n      - IsPrimaryRegion\n      - !GetAtt 'PrimaryRDSCluster.Endpoint.Port'\n      - !GetAtt 'FailoverRDSCluster.Endpoint.Port'\n  RDSProxyReaderEndpoint:\n    Condition: ''\n    Value: !GetAtt 'ProxyReaderEndpoint.Endpoint'\n  RDSProxyWriterEndpoint:\n    Condition: ''\n    Value: !GetAtt 'RDSProxy.Endpoint'\n  RDSRegionalClusterARN:\n    Condition: ''\n    Value: !If\n      - IsPrimaryRegion\n      - !GetAtt 'PrimaryRDSCluster.DBClusterArn'\n      - !GetAtt 'FailoverRDSCluster.DBClusterArn'\n  RDSRegionalClusterIdentifier:\n    Condition: ''\n    Value: !If\n      - IsPrimaryRegion\n      - !Ref 'PrimaryRDSCluster'\n      - !Ref 'FailoverRDSCluster'\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverLambdaLayerARN:\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryLambdaLayerARN:\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PrivateHostedZoneID:\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  DNSRecords:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - RDSProxy\n    Properties:\n      HostedZoneId: !Ref 'PrivateHostedZoneID'\n      RecordSets:\n        - Name: !Join\n            - .\n            - - db\n              - cluster\n              - reader\n              - !Ref 'PublicFQDN'\n              - internal\n          ResourceRecords:\n            - !GetAtt 'PrimaryRDSCluster.ReadEndpoint.Address'\n          TTL: '1'\n          Type: CNAME\n        - Name: !Join\n            - .\n            - - db\n              - reader\n              - !Ref 'PublicFQDN'\n              - internal\n          ResourceRecords:\n            - !GetAtt 'ProxyReaderEndpoint.Endpoint'\n          TTL: '1'\n          Type: CNAME\n        - Name: !Join\n            - .\n            - - db\n              - cluster\n              - writer\n              - !Ref 'PublicFQDN'\n              - internal\n          ResourceRecords:\n            - !GetAtt 'PrimaryRDSCluster.Endpoint.Address'\n          TTL: '1'\n          Type: CNAME\n        - Name: !Join\n            - .\n            - - db\n              - writer\n              - !Ref 'PublicFQDN'\n              - internal\n          ResourceRecords:\n            - !GetAtt 'RDSProxy.Endpoint'\n          TTL: '1'\n          Type: CNAME\n    Type: AWS::Route53::RecordSetGroup\n  DatabasePreparer:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - DatabasePreparerRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\nimport subprocess\\n\\nimport\\\n          \\ os\\nimport json\\nimport boto3\\nimport psycopg2\\nimport cfnresponse\\nfrom\\\n          \\ botocore.exceptions import ClientError as boto3_client_error\\n\\n'''\\n\\\n          \\    RDSAdminSecretARN\\n'''\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n\\\n          \\    \\n    arguments = event['ResourceProperties']['Properties']\\n    operation\\\n          \\ = event['ResourceProperties']['Type'].replace('Custom::', '')\\n    \\n\\\n          \\    response_data = {}\\n    \\n    rds_client = boto3.client('rds')\\n  \\\n          \\  secrets_manager_client = boto3.client('secretsmanager')\\n\\n    try:\\n\\\n          \\        \\n        get_secret_value_response = secrets_manager_client.get_secret_value(\\n\\\n          \\            SecretId = arguments['RDSAdminSecretARN']\\n        )\\n    \\\n          \\    \\n    except boto3_client_error as e:\\n        print('Unable to retrieva\\\n          \\ RDS secret: ' + str(e))\\n        return cfnresponse.send(event, context,\\\n          \\ cfnresponse.FAILED, response_data)\\n        \\n    else:\\n        rds_secret\\\n          \\ = json.loads(get_secret_value_response['SecretString'])\\n    \\n    if\\\n          \\ event['RequestType'] in ['Create']:\\n        \\n        try:\\n        \\\n          \\    \\n            try:\\n                    \\n                db_conn =\\\n          \\ psycopg2.connect(\\n                    host = rds_secret['host'],\\n  \\\n          \\                  port = rds_secret['port'],\\n                    user\\\n          \\ = rds_secret['username'],\\n                    password = rds_secret['password'],\\n\\\n          \\                    database = rds_secret['database'],\\n              \\\n          \\      connect_timeout = 3,\\n                    sslmode = 'require',\\n\\\n          \\                )\\n                \\n                curs = db_conn.cursor()\\n\\\n          \\                \\n                ddl_statements = [\\n                \\\n          \\    '''\\n                    CREATE SEQUENCE data_sequence start 1 increment\\\n          \\ 1;\\n                    ''',\\n                    '''\\n              \\\n          \\      CREATE TABLE IF NOT EXISTS dataserver (\\n                       \\\n          \\ id integer not null primary key default nextval('data_sequence'),\\n  \\\n          \\                      guid VARCHAR(255) NOT NULL,\\n                   \\\n          \\     insertedon timestamp NOT NULL DEFAULT NOW(),\\n                   \\\n          \\     migratedon timestamp NOT NULL DEFAULT NOW()\\n                    );\\n\\\n          \\                    ''',\\n                    '''\\n                   \\\n          \\ CREATE TABLE IF NOT EXISTS public.dataclient (\\n                     \\\n          \\   guid character varying(255) COLLATE pg_catalog.\\\"default\\\" NOT NULL,\\n\\\n          \\                        useast1 integer NOT NULL,\\n                   \\\n          \\     useast2 integer NOT NULL,\\n                        http_code integer,\\n\\\n          \\                        insertedon time without time zone\\n           \\\n          \\         );\\n                    ''',\\n                    '''\\n      \\\n          \\              CREATE TABLE IF NOT EXISTS public.failoverevents (\\n    \\\n          \\                    event integer NOT NULL,\\n                        insertedon\\\n          \\ timestamp without time zone NOT NULL\\n                    );\\n       \\\n          \\             '''\\n                ]\\n                \\n               \\\n          \\ for ddl_statement in ddl_statements:\\n                    \\n         \\\n          \\           curs.execute(ddl_statement.replace('\\\\r','').replace('\\\\n','\\\n          \\ '))\\n                    db_conn.commit()\\n                \\n        \\\n          \\        curs.close()\\n                db_conn.close()\\n            \\n \\\n          \\               return cfnresponse.send(event, context, cfnresponse.SUCCESS,\\\n          \\ response_data)\\n                \\n            except Exception as error:\\n\\\n          \\                print('There was a problem executing the DDL statements:\\\n          \\ ' + str(error))\\n                return cfnresponse.send(event, context,\\\n          \\ cfnresponse.FAILED, response_data)\\n                \\n        except boto3_client_error\\\n          \\ as e:\\n            print('Failed to Prepare RDS Database: ' + str(e.response))\\n\\\n          \\            return cfnresponse.send(event, context, cfnresponse.FAILED,\\\n          \\ response_data)\\n            \\n    if event['RequestType'] in ['Update',\\\n          \\ 'Delete']:\\n        \\n        return cfnresponse.send(event, context,\\\n          \\ cfnresponse.SUCCESS, response_data)\"\n      Description: ''\n      Environment:\n        Variables:\n          RDS_PROXY_ENDPOINT: !GetAtt 'RDSProxy.Endpoint'\n          RDS_PROXY_PORT: !If\n            - IsPrimaryRegion\n            - !GetAtt 'PrimaryRDSCluster.Endpoint.Port'\n            - !GetAtt 'FailoverRDSCluster.Endpoint.Port'\n          RDS_USERNAME: !Ref 'DBAdminUsername'\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'DatabasePreparerRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  DatabasePreparerLogGroup:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Retain\n    DependsOn:\n      - DatabasePreparer\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'DatabasePreparer'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  DatabasePreparerResource:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - RDSAdminSecret\n      - DatabasePreparerLogGroup\n    Properties:\n      Properties:\n        RDSAdminSecretARN: !Ref 'RDSAdminSecret'\n      ServiceToken: !GetAtt 'DatabasePreparer.Arn'\n      Type: Custom::PrepareRDSDatabase\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  DatabasePreparerRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - '*'\n                Sid: UseRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Ref 'RDSAdminSecret'\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  FailoverClusterDetacher:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - FailoverClusterDetacherRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\n\\\n          import boto3\\nimport cfnresponse\\nfrom botocore.exceptions import ClientError\\\n          \\ as boto3_client_error\\n\\n'''\\n    FailoverClusterARN\\n    GlobalClusterIdentifier\\n\\\n          '''\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n\\\n          \\    \\n    arguments = event['ResourceProperties']['Properties']\\n    #operation\\\n          \\ = event['ResourceProperties']['Type'].replace('Custom::', '')\\n    \\n\\\n          \\    response_data = {}\\n    \\n    if event['RequestType'] in ['Create',\\\n          \\ 'Update']:\\n        \\n        return cfnresponse.send(event, context,\\\n          \\ cfnresponse.SUCCESS, response_data)\\n        \\n    elif event['RequestType']\\\n          \\ in ['Delete']:\\n        \\n        rds_client = boto3.client('rds')\\n \\\n          \\       \\n        try:\\n            \\n            describe_cluster_resp\\\n          \\ = rds_client.describe_global_clusters(\\n                GlobalClusterIdentifier\\\n          \\ = arguments['GlobalClusterIdentifier']\\n            )\\n            \\n\\\n          \\            '''\\n                For each Global Cluster member\\n     \\\n          \\       '''\\n            for cluster_member in describe_cluster_resp['GlobalClusters'][0]['GlobalClusterMembers']:\\n\\\n          \\                \\n                '''\\n                    If this failover\\\n          \\ cluster is a member of the Global Cluster\\n                '''\\n     \\\n          \\           if arguments['FailoverClusterARN'] == cluster_member['DBClusterArn']:\\n\\\n          \\                    \\n                    '''\\n                       \\\n          \\ We're goign to remove it from the global cluster.\\n                  \\\n          \\  '''\\n                    rds_client.remove_from_global_cluster(\\n   \\\n          \\                     DbClusterIdentifier = arguments['FailoverClusterARN'],\\n\\\n          \\                        GlobalClusterIdentifier = arguments['GlobalClusterIdentifier'],\\n\\\n          \\                    )\\n                    \\n                    '''\\n\\\n          \\                        Now, we'll monitor the detachment and respond only\\\n          \\ after it's successful.\\n                    '''\\n                    while\\\n          \\ True:\\n                \\n                        failover_cluster_still_attached\\\n          \\ = False\\n                        \\n                        describe_cluster_resp\\\n          \\ = rds_client.describe_global_clusters(\\n                            GlobalClusterIdentifier\\\n          \\ = arguments['GlobalClusterIdentifier']\\n                        )\\n  \\\n          \\                      \\n                        '''\\n                 \\\n          \\           For each global cluster member\\n                        '''\\n\\\n          \\                        for cluster_member in describe_cluster_resp['GlobalClusters'][0]['GlobalClusterMembers']:\\n\\\n          \\                            \\n                            '''\\n       \\\n          \\                         If the failover cluster's identifier is present\\\n          \\ in this member's ARN\\n                            '''\\n              \\\n          \\              if arguments['FailoverClusterARN'] == cluster_member['DBClusterArn']:\\n\\\n          \\        \\n                                '''\\n                       \\\n          \\             We'll consider the failover cluster still attached\\n     \\\n          \\                           '''\\n                                failover_cluster_still_attached\\\n          \\ = True\\n                        \\n                        if failover_cluster_still_attached\\\n          \\ is False:\\n                            break\\n\\n                \\n   \\\n          \\     except boto3_client_error as e:\\n            print('Failed to Detach\\\n          \\ Failover Cluster: ' + str(e.response))\\n            return cfnresponse.send(event,\\\n          \\ context, cfnresponse.FAILED, response_data)\\n            \\n    if event['RequestType']\\\n          \\ in ['Update', 'Delete']:\\n        \\n        return cfnresponse.send(event,\\\n          \\ context, cfnresponse.SUCCESS, response_data)\"\n      Description: ''\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'FailoverClusterDetacherRole.Arn'\n      Runtime: python3.9\n      Timeout: 300\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  FailoverClusterDetacherLogGroup:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Retain\n    DependsOn:\n      - FailoverClusterDetacher\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'FailoverClusterDetacher'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  FailoverClusterDetacherResource:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - GlobalRDSCluster\n      - FailoverClusterDetacherLogGroup\n    Properties:\n      Properties:\n        FailoverClusterARN: !Join\n          - ':'\n          - - arn\n            - !Ref 'AWS::Partition'\n            - rds\n            - !Ref 'FailoverRegionName'\n            - !Ref 'AWS::AccountId'\n            - cluster\n            - !Join\n              - '-'\n              - - !Ref 'MainStackName'\n                - !Ref 'FailoverRegionName'\n        GlobalClusterIdentifier: !Ref 'MainStackName'\n      ServiceToken: !GetAtt 'FailoverClusterDetacher.Arn'\n      Type: Custom::DetachFailoverClusterFromGlobalCluster\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  FailoverClusterDetacherRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:RemoveFromGlobalCluster\n                Effect: Allow\n                Resource:\n                  - '*'\n                  - !Join\n                    - ':'\n                    - - arn\n                      - !Ref 'AWS::Partition'\n                      - rds\n                      - !Ref 'FailoverRegionName'\n                      - !Ref 'AWS::AccountId'\n                      - cluster\n                      - !Join\n                        - '-'\n                        - - !Ref 'MainStackName'\n                          - !Ref 'FailoverRegionName'\n                Sid: DetachRDSCluster\n              - Action:\n                  - rds:DescribeGlobalClusters\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ':'\n                    - - arn\n                      - !Ref 'AWS::Partition'\n                      - rds\n                      - ''\n                      - !Ref 'AWS::AccountId'\n                      - global-cluster\n                      - !Ref 'MainStackName'\n                Sid: DescribeGlobalCluster\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  FailoverRDSAdminSecretAttachment:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - RDSAdminSecret\n      - FailoverRDSCluster\n    Properties:\n      SecretId: !Ref 'RDSAdminSecret'\n      TargetId: !Ref 'FailoverRDSCluster'\n      TargetType: AWS::RDS::DBCluster\n    Type: AWS::SecretsManager::SecretTargetAttachment\n  FailoverRDSCluster:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - RDSSubnetGroup\n    Properties:\n      BackupRetentionPeriod: 30\n      DBClusterIdentifier: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - '-'\n          - !Ref 'AWS::Region'\n      DBSubnetGroupName: !Ref 'RDSSubnetGroup'\n      DeletionProtection: false\n      EnableIAMDatabaseAuthentication: false\n      Engine: aurora-postgresql\n      EngineMode: provisioned\n      EngineVersion: '14.3'\n      GlobalClusterIdentifier: !Ref 'MainStackName'\n      KmsKeyId: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryKMSKeyID'\n        - !Ref 'FailoverKMSKeyID'\n      Port: 5432\n      RestoreType: copy-on-write\n      StorageEncrypted: true\n      VpcSecurityGroupIds:\n        - !Ref 'RDSSecurityGroup'\n    Type: AWS::RDS::DBCluster\n  FailoverRDSInstance1:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - FailoverRDSCluster\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'FailoverRDSCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n      PubliclyAccessible: false\n    Type: AWS::RDS::DBInstance\n  FailoverRDSInstance2:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - FailoverRDSCluster\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'FailoverRDSCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n      PubliclyAccessible: false\n    Type: AWS::RDS::DBInstance\n  GlobalRDSCluster:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - PrimaryRDSCluster\n    Properties:\n      DeletionProtection: false\n      GlobalClusterIdentifier: !Ref 'MainStackName'\n      SourceDBClusterIdentifier: !Ref 'PrimaryRDSCluster'\n    Type: AWS::RDS::GlobalCluster\n  PrimaryRDSAdminSecretAttachment:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - RDSAdminSecret\n      - PrimaryRDSCluster\n    Properties:\n      SecretId: !Ref 'RDSAdminSecret'\n      TargetId: !Ref 'PrimaryRDSCluster'\n      TargetType: AWS::RDS::DBCluster\n    Type: AWS::SecretsManager::SecretTargetAttachment\n  PrimaryRDSCluster:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Snapshot\n    DependsOn:\n      - RDSSubnetGroup\n    Properties:\n      BackupRetentionPeriod: 30\n      DBClusterIdentifier: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - '-'\n          - !Ref 'AWS::Region'\n      DBSubnetGroupName: !Ref 'RDSSubnetGroup'\n      DeletionProtection: false\n      EnableIAMDatabaseAuthentication: false\n      Engine: aurora-postgresql\n      EngineMode: provisioned\n      EngineVersion: '14.3'\n      KmsKeyId: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryKMSKeyID'\n        - !Ref 'FailoverKMSKeyID'\n      MasterUserPassword: !Ref 'DBAdminPassword'\n      MasterUsername: !Ref 'DBAdminUsername'\n      Port: 5432\n      StorageEncrypted: true\n      VpcSecurityGroupIds:\n        - !Ref 'RDSSecurityGroup'\n    Type: AWS::RDS::DBCluster\n  PrimaryRDSInstance1:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - PrimaryRDSCluster\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'PrimaryRDSCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n      PubliclyAccessible: false\n    Type: AWS::RDS::DBInstance\n  PrimaryRDSInstance2:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - PrimaryRDSCluster\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'PrimaryRDSCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n      PubliclyAccessible: false\n    Type: AWS::RDS::DBInstance\n  ProxyReaderEndpoint:\n    DependsOn:\n      - RDSProxy\n    Properties:\n      DBProxyEndpointName: !Join\n        - ''\n        - - !If\n            - IsPrimaryRegion\n            - !Ref 'PrimaryRDSCluster'\n            - !Ref 'FailoverRDSCluster'\n          - '-'\n          - writer\n      DBProxyName: !Ref 'RDSProxy'\n      TargetRole: READ_ONLY\n      VpcSecurityGroupIds:\n        - !Ref 'RDSProxySecurityGroup'\n      VpcSubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PrimaryDatabaseSubnetID}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /FailoverDatabaseSubnetID}}\n    Type: AWS::RDS::DBProxyEndpoint\n  ProxyTargetGroup:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - RDSProxy\n    Properties:\n      DBClusterIdentifiers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryRDSCluster'\n          - !Ref 'FailoverRDSCluster'\n      DBProxyName: !Ref 'RDSProxy'\n      TargetGroupName: default\n    Type: AWS::RDS::DBProxyTargetGroup\n  RDSAdminSecret:\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Cluster Admin Account for '\n          - !Ref 'MainStackName'\n      KmsKeyId: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryKMSKeyID'\n        - !Ref 'FailoverKMSKeyID'\n      SecretString: !Join\n        - ''\n        - - '{\"username\": \"'\n          - !Ref 'DBAdminUsername'\n          - '\", \"password\": \"'\n          - !Ref 'DBAdminPassword'\n          - '\", \"database\": \"template1\"}'\n    Type: AWS::SecretsManager::Secret\n  RDSAdminSecretARNParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS admin Secrets Manager Secret ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSAdminSecretARN\n      Tier: Standard\n      Type: String\n      Value: !Ref 'RDSAdminSecret'\n    Type: AWS::SSM::Parameter\n  RDSClusterParameterGroup:\n    Properties:\n      Description: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - ' - Cluster Param Group'\n      Family: aurora-postgresql13\n      Parameters:\n        rds.logical_replication: 1\n        wal_sender_timeout: 240000\n    Type: AWS::RDS::DBClusterParameterGroup\n  RDSClusterReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Cluster reader endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSClusterReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !If\n        - IsPrimaryRegion\n        - !GetAtt 'PrimaryRDSCluster.ReadEndpoint.Address'\n        - !GetAtt 'FailoverRDSCluster.ReadEndpoint.Address'\n    Type: AWS::SSM::Parameter\n  RDSClusterWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Cluster writer endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSClusterWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !If\n        - IsPrimaryRegion\n        - !GetAtt 'PrimaryRDSCluster.Endpoint.Address'\n        - !GetAtt 'FailoverRDSCluster.Endpoint.Address'\n    Type: AWS::SSM::Parameter\n  RDSGlobalClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Global RDS Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSGlobalClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !Ref 'MainStackName'\n    Type: AWS::SSM::Parameter\n  RDSGlobalReaderDNSEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Global DNS Endpoint for RDS Reader for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSGlobalReaderDNSEndpoint\n      Tier: Standard\n      Type: String\n      Value: !Join\n        - ''\n        - - db.reader.\n          - !Ref 'PublicFQDN'\n          - .internal\n    Type: AWS::SSM::Parameter\n  RDSGlobalWriterDNSEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Global DNS Endpoint for RDS Writer for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSGlobalWriterDNSEndpoint\n      Tier: Standard\n      Type: String\n      Value: !Join\n        - ''\n        - - db.writer.\n          - !Ref 'PublicFQDN'\n          - .internal\n    Type: AWS::SSM::Parameter\n  RDSProxy:\n    Properties:\n      Auth:\n        - SecretArn: !Ref 'RDSAdminSecret'\n      DBProxyName: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryRDSCluster'\n        - !Ref 'FailoverRDSCluster'\n      EngineFamily: POSTGRESQL\n      RequireTLS: true\n      RoleArn: !GetAtt 'RDSProxyRole.Arn'\n      VpcSecurityGroupIds:\n        - !Ref 'RDSProxySecurityGroup'\n      VpcSubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PrimaryDatabaseSubnetID}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /FailoverDatabaseSubnetID}}\n    Type: AWS::RDS::DBProxy\n  RDSProxyARNParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSProxyARN\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'RDSProxy.DBProxyArn'\n    Type: AWS::SSM::Parameter\n  RDSProxyNameParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy name for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSProxyName\n      Tier: Standard\n      Type: String\n      Value: !Ref 'RDSProxy'\n    Type: AWS::SSM::Parameter\n  RDSProxyPortParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy port for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSProxyPort\n      Tier: Standard\n      Type: String\n      Value: !If\n        - IsPrimaryRegion\n        - !GetAtt 'PrimaryRDSCluster.Endpoint.Port'\n        - !GetAtt 'FailoverRDSCluster.Endpoint.Port'\n    Type: AWS::SSM::Parameter\n  RDSProxyReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy reader endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSProxyReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'ProxyReaderEndpoint.Endpoint'\n    Type: AWS::SSM::Parameter\n  RDSProxyRole:\n    DependsOn:\n      - RDSAdminSecret\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - rds.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Ref 'RDSAdminSecret'\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  RDSProxySecurityGroup:\n    Properties:\n      GroupDescription: RDS Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress:\n        - Description: DB Access from Lambda\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n          ToPort: 5432\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /VPCID}}\n    Type: AWS::EC2::SecurityGroup\n  RDSProxyWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy writer endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSProxyWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'RDSProxy.Endpoint'\n    Type: AWS::SSM::Parameter\n  RDSRegionalClusterARNParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional RDS Cluster ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSRegionalClusterARN\n      Tier: Standard\n      Type: String\n      Value: !If\n        - IsPrimaryRegion\n        - !GetAtt 'PrimaryRDSCluster.DBClusterArn'\n        - !GetAtt 'FailoverRDSCluster.DBClusterArn'\n    Type: AWS::SSM::Parameter\n  RDSRegionalClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional RDS Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RDSRegionalClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryRDSCluster'\n        - !Ref 'FailoverRDSCluster'\n    Type: AWS::SSM::Parameter\n  RDSSecurityGroup:\n    DependsOn:\n      - RDSProxySecurityGroup\n    Properties:\n      GroupDescription: RDS Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress:\n        - Description: DB Access from Lambda\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n          ToPort: 5432\n        - Description: DB Access from RDS Proxy\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Ref 'RDSProxySecurityGroup'\n          ToPort: 5432\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /VPCID}}\n    Type: AWS::EC2::SecurityGroup\n  RDSSubnetGroup:\n    Properties:\n      DBSubnetGroupDescription: Database Subnets\n      DBSubnetGroupName: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - !Join\n            - ''\n            - !Split\n              - subnet-\n              - !Join\n                - '-'\n                - - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /PrimaryDatabaseSubnetID}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /FailoverDatabaseSubnetID}}\n      SubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PrimaryDatabaseSubnetID}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /FailoverDatabaseSubnetID}}\n    Type: AWS::RDS::DBSubnetGroup\nTransform:\n  Name: AWS::SecretsManager-2020-07-23\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "FailoverLambdaLayerCreatorResource": {
   "DependsOn": [
    "LambdaLayerCreatorLogGroup"
   ],
   "Properties": {
    "Properties": {
     "LayerName": {
      "Ref": "AWS::StackName"
     },
     "Packages": [
      "requests",
      "cfnresponse",
      "psycopg2-binary"
     ],
     "Region": {
      "Ref": "FailoverRegionName"
     }
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "LambdaLayerCreator",
      "Arn"
     ]
    },
    "Type": "Custom::DeployLambdaLayer",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "FailoverRegionDashboardURLRetriever": {
   "DependsOn": [
    "DashboardStackSet",
    "CFNExportRetrieverLogGroup"
   ],
   "Properties": {
    "Properties": {
     "ExportPrefix": {
      "Ref": "AWS::StackName"
     },
     "Region": {
      "Ref": "FailoverRegionName"
     }
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "CFNExportRetriever",
      "Arn"
     ]
    },
    "Type": "Custom::GetCFNExports",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "FailoverRegionVPCIdRetriever": {
   "DependsOn": [
    "NetworkingStackSet",
    "CFNExportRetrieverLogGroup"
   ],
   "Properties": {
    "Properties": {
     "ExportPrefix": {
      "Ref": "AWS::StackName"
     },
     "Region": {
      "Ref": "FailoverRegionName"
     }
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "CFNExportRetriever",
      "Arn"
     ]
    },
    "Type": "Custom::GetCFNExports",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "FailoverStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "DatabasesStackSet",
    "NetworkingStackSet",
    "PrivateHostedZone",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Failover",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrivateHostedZoneID",
      "ParameterValue": {
       "Ref": "PrivateHostedZone"
      }
     },
     {
      "ParameterKey": "PrimaryLambdaLayerARN",
      "ParameterValue": {
       "Ref": "PrimaryLambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "FailoverLambdaLayerARN",
      "ParameterValue": {
       "Ref": "FailoverLambdaLayerCreatorResource"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Failover"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverLambdaLayerARN:\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryLambdaLayerARN:\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PrivateHostedZoneID:\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  Canary:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - CanaryRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport time\\n\\\n          import json\\nimport boto3\\nimport psycopg2\\nimport dateutil.tz\\nfrom datetime\\\n          \\ import datetime\\nfrom datetime import timedelta\\nfrom botocore.exceptions\\\n          \\ import ClientError as boto3_client_error\\n\\ndef get_rds_credentials():\\n\\\n          \\    \\n    secrets_manager_client = boto3.client('secretsmanager')\\n\\n \\\n          \\   try:\\n        \\n        get_secret_value_response = secrets_manager_client.get_secret_value(\\n\\\n          \\            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\\n        )\\n\\\n          \\        \\n    except boto3_client_error as e:\\n        raise Exception('Failed\\\n          \\ to Retrieve RDS Secret: ' + str(e))\\n        \\n    else:\\n        return\\\n          \\ json.loads(get_secret_value_response['SecretString'])\\n\\nrds_secret =\\\n          \\ get_rds_credentials()\\n\\ndb_conn = psycopg2.connect(\\n    host = rds_secret['host'],\\n\\\n          \\    port = rds_secret['port'],\\n    user = rds_secret['username'],\\n  \\\n          \\  sslmode = 'require',\\n    password = rds_secret['password'],\\n    database\\\n          \\ = rds_secret['database'],\\n    connect_timeout = 3,\\n)\\n\\ndef test_db_connection():\\n\\\n          \\n    with db_conn:\\n        with db_conn.cursor() as curs:\\n          \\\n          \\  curs.execute('SELECT NOW()')\\n            results = curs.fetchall()\\n\\\n          \\            db_conn.commit()\\n            \\ndef disable_canary_rule():\\n\\\n          \\n    try:\\n        \\n        boto3.client('events').disable_rule(\\n   \\\n          \\         Name = os.environ['CANARY_CRON_NAME']\\n        )\\n        \\n \\\n          \\   except boto3_client_error as e:\\n        raise Exception('Failed to\\\n          \\ Disable Canary Cron: ' + str(e))\\n        \\n    return True\\n\\ndef detach_and_promote_failover_cluster():\\n\\\n          \\    \\n    try:\\n        \\n        boto3.client('rds').remove_from_global_cluster(\\n\\\n          \\            DbClusterIdentifier = os.environ['FAILOVER_CLUSTER_ARN'],\\n\\\n          \\            GlobalClusterIdentifier = os.environ['GLOBAL_CLUSTER_IDENTIFIER'],\\n\\\n          \\        )\\n        \\n    except boto3_client_error as e:\\n        raise\\\n          \\ Exception('Failed to Detach Failover Cluster from Primary: ' + str(e))\\n\\\n          \\    \\n    return True\\n    \\ndef log_failover_event():\\n    \\n    eastern\\\n          \\ = dateutil.tz.gettz('US/Eastern')\\n    \\n    curs = db_conn.cursor()\\n\\\n          \\    curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values\\\n          \\ (2,'\\\"+ datetime.now(tz=eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\")+\\\"' )\\\"\\\n          )\\n    db_conn.commit()\\n    curs.close()\\n    db_conn.close()\\n   \\ndef\\\n          \\ lambda_handler(event, context):\\n    \\n    statusCode = 200\\n    \\n  \\\n          \\  now = datetime.now()\\n    end = now + timedelta(seconds = 110)\\n    failures\\\n          \\ = 0\\n    \\n    while (datetime.now() < end):\\n        \\n        try:\\n\\\n          \\            test_db_connection()\\n            \\n        except Exception\\\n          \\ as e:\\n            failures += 1\\n        \\n        if failures > 1:\\n\\\n          \\            \\n            detach_and_promote_failover_cluster()\\n     \\\n          \\       print('Detached and Promoted Failover Cluster');\\n            \\n\\\n          \\            disable_canary_rule()\\n            print('Canary Rule Disabled');\\n\\\n          \\            \\n            log_failover_event()\\n            print('Failover\\\n          \\ Event Logged');\\n            \\n            return {\\n                'statusCode':\\\n          \\ 500\\n            }\\n            \\n        time.sleep(10)\\n    \\n    return\\\n          \\ {\\n        'statusCode': statusCode\\n    }\"\n      Description: ''\n      Environment:\n        Variables:\n          CANARY_CRON_NAME: !Join\n            - ''\n            - - !Ref 'MainStackName'\n              - -canary\n          FAILOVER_CLUSTER_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSRegionalClusterARN}}\n          GLOBAL_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSGlobalClusterIdentifier}}\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'CanaryRole.Arn'\n      Runtime: python3.9\n      Timeout: 65\n      TracingConfig:\n        Mode: PassThrough\n    Type: AWS::Lambda::Function\n  CanaryCron:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - Canary\n    Properties:\n      Description: !Join\n        - ''\n        - - Invokes Regional DB Canary.\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -canary\n      ScheduleExpression: rate(1 minute)\n      State: DISABLED\n      Targets:\n        - Arn: !GetAtt 'Canary.Arn'\n          Id: Canary\n    Type: AWS::Events::Rule\n  CanaryCronPermission:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - Canary\n      - CanaryCron\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'Canary'\n      Principal: events.amazonaws.com\n      SourceArn: !GetAtt 'CanaryCron.Arn'\n    Type: AWS::Lambda::Permission\n  CanaryLogGroup:\n    Condition: IsFailoverRegion\n    DeletionPolicy: Retain\n    DependsOn:\n      - Canary\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'Canary'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  CanaryRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n              - Action:\n                  - rds:RemoveFromGlobalCluster\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - 'arn:'\n                      - !Ref 'AWS::Partition'\n                      - ':rds:'\n                      - !Ref 'AWS::Region'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - ':cluster:'\n                      - !Join\n                        - ''\n                        - - '{{resolve:ssm:/'\n                          - !Ref 'MainStackName'\n                          - /RDSRegionalClusterIdentifier}}\n                  - !Join\n                    - ''\n                    - - 'arn:'\n                      - !Ref 'AWS::Partition'\n                      - ':rds:'\n                      - !Ref 'AWS::Region'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - ':global-cluster:'\n                      - !Join\n                        - ''\n                        - - '{{resolve:ssm:/'\n                          - !Ref 'MainStackName'\n                          - /RDSGlobalClusterIdentifier}}\n                Sid: DetachFailoverCluster\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  CanaryRoleEventBridgePolicy:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - CanaryRole\n      - CanaryCron\n    Properties:\n      PolicyDocument:\n        Statement:\n          - Action:\n              - events:DisableRule\n            Effect: Allow\n            Resource:\n              - !GetAtt 'CanaryCron.Arn'\n            Sid: DisableEventBridgeRule\n      PolicyName: event-bridge-policy\n      Roles:\n        - !Ref 'CanaryRole'\n    Type: AWS::IAM::Policy\n  FailoverCompletedEventListener:\n    DependsOn:\n      - FailoverCompletedHandler\n    Properties:\n      Description: Invokes handler when failover is completed\n      EventPattern:\n        detail:\n          EventID:\n            - RDS-EVENT-0071\n          SourceArn:\n            - !Join\n              - ''\n              - - '{{resolve:ssm:/'\n                - !Ref 'MainStackName'\n                - /RDSRegionalClusterARN}}\n        detail-type:\n          - RDS DB Cluster Event\n        source:\n          - aws.rds\n      State: ENABLED\n      Targets:\n        - Arn: !GetAtt 'FailoverCompletedHandler.Arn'\n          Id: FailoverCompletedHandler\n    Type: AWS::Events::Rule\n  FailoverCompletedHandler:\n    DependsOn:\n      - FailoverCompletedHandlerRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\n\\\n          import boto3\\nimport psycopg2\\nimport dateutil.tz\\nfrom datetime import\\\n          \\ datetime\\nfrom datetime import timedelta\\nfrom botocore.exceptions import\\\n          \\ ClientError as boto3_client_error\\n\\ndef get_region(context):\\n    return\\\n          \\ context.invoked_function_arn.split(':')[3]\\n\\ndef get_rds_credentials():\\n\\\n          \\    \\n    secrets_manager_client = boto3.client('secretsmanager')\\n\\n \\\n          \\   try:\\n        \\n        get_secret_value_response = secrets_manager_client.get_secret_value(\\n\\\n          \\            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\\n        )\\n\\\n          \\        \\n    except boto3_client_error as e:\\n        raise Exception('Failed\\\n          \\ to Retrieve RDS Secret: ' + str(e))\\n        \\n    else:\\n        return\\\n          \\ json.loads(get_secret_value_response['SecretString'])\\n        \\ndef lambda_handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n    \\n    eastern = dateutil.tz.gettz('US/Eastern')\\n\\\n          \\    \\n    rds_secret = get_rds_credentials()\\n\\n    db_conn = psycopg2.connect(\\n\\\n          \\        host = rds_secret['host'],\\n        port = rds_secret['port'],\\n\\\n          \\        user = rds_secret['username'],\\n        password = rds_secret['password'],\\n\\\n          \\        database = rds_secret['database'],\\n        connect_timeout = 3,\\n\\\n          \\        sslmode = 'require',\\n    )\\n    \\n    current_region = get_region(context)\\n\\\n          \\    \\n    if current_region == os.environ['PRIMARY_REGION_NAME']:\\n   \\\n          \\     \\n        curs = db_conn.cursor()\\n        curs.execute(\\\"INSERT INTO\\\n          \\ failoverevents (event,insertedon) values (3,'\\\"+datetime.now(tz=eastern).strftime(\\\"\\\n          %m/%d/%Y %H:%M:%S\\\")+\\\"' )\\\")\\n        db_conn.commit()\\n        \\n    elif\\\n          \\ current_region == os.environ['FAILOVER_REGION_NAME']:\\n        \\n    \\\n          \\    r53_client = boto3.client('route53')\\n        \\n        dns_changes\\\n          \\ = [\\n            {\\n                'fqdn': os.environ['PUBLIC_FQDN'],\\n\\\n          \\                'newValue': '',\\n                'hostedZoneId': os.environ['PUBLIC_HOSTED_ZONE_ID']\\n\\\n          \\            },\\n            {\\n                'fqdn': 'db.writer.' + os.environ['PUBLIC_FQDN'],\\n\\\n          \\                'newValue': os.environ['RDS_REGIONAL_WRITER_ENDPOINT'],\\n\\\n          \\                'hostedZoneId': os.environ['PRIVATE_HOSTED_ZONE_ID'],\\n\\\n          \\            },\\n            {\\n                'fqdn': 'db.reader.' + os.environ['PUBLIC_FQDN'],\\n\\\n          \\                'newValue': os.environ['RDS_REGIONAL_READER_ENDPOINT'],\\n\\\n          \\                'hostedZoneId': os.environ['PRIVATE_HOSTED_ZONE_ID'],\\n\\\n          \\            }\\n        ]\\n        \\n        for dns_change in dns_changes:\\n\\\n          \\            \\n            r53_client.change_resource_record_sets(\\n   \\\n          \\             ChangeBatch = {\\n                    'Changes': [\\n      \\\n          \\                  {\\n                            'Action': 'UPSERT',\\n\\\n          \\                            'ResourceRecordSet': {\\n                  \\\n          \\              'Name': dns_change['fqdn'],\\n                           \\\n          \\     'ResourceRecords': [\\n                                    {\\n    \\\n          \\                                    'Value': dns_change['newValue'],\\n\\\n          \\                                    },\\n                              \\\n          \\  ],\\n                                'TTL': 1,\\n                     \\\n          \\           'Type': 'CNAME',\\n                            },\\n         \\\n          \\               },\\n                    ],\\n                },\\n       \\\n          \\         HostedZoneId = dns_change['hostedZoneId'],\\n            )\\n  \\\n          \\    \\n     \\n      \\n    '''\\n        Logs Failover Completion\\n    '''\\n\\\n          \\    curs = db_conn.cursor()\\n    curs.execute(\\\"INSERT INTO failoverevents\\\n          \\ (event,insertedon) values (3,'\\\" + datetime.now(tz = eastern).strftime(\\\"\\\n          %m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\")\\n    db_conn.commit()\\n    \\n    '''\\n \\\n          \\       Logs CNAME Update\\n    '''\\n    curs = db_conn.cursor()\\n    curs.execute(\\\"\\\n          INSERT INTO failoverevents (event,insertedon) values (4,'\\\" + datetime.now(tz\\\n          \\ = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\")\\n    db_conn.commit()\\n\\\n          \\        \\n    curs.close()\\n    db_conn.close()\\n    \\n    return True\"\n      Description: Processes failover completed events\n      Environment:\n        Variables:\n          PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'\n          PUBLIC_FQDN: !Ref 'PublicFQDN'\n          PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneID'\n          RDS_ADMIN_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSAdminSecretARN}}\n          RDS_PROXY_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSProxyWriterEndpoint}}\n          RDS_REGIONAL_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSClusterReaderEndpoint}}\n          RDS_REGIONAL_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSClusterWriterEndpoint}}\n      Handler: index.lambda_handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'FailoverCompletedHandlerRole.Arn'\n      Runtime: python3.9\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  FailoverCompletedHandlerLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - FailoverCompletedHandler\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'FailoverCompletedHandler'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  FailoverCompletedHandlerPermission:\n    DependsOn:\n      - FailoverCompletedHandler\n      - FailoverCompletedEventListener\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'FailoverCompletedHandler'\n      Principal: events.amazonaws.com\n      SourceArn: !GetAtt 'FailoverCompletedEventListener.Arn'\n    Type: AWS::Lambda::Permission\n  FailoverCompletedHandlerRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  FailoverStartedEventListener:\n    DependsOn:\n      - FailoverStartedHandler\n    Properties:\n      Description: Invokes handler when failover is started\n      EventPattern:\n        detail:\n          EventID:\n            - RDS-EVENT-0073\n          SourceArn:\n            - !Join\n              - ''\n              - - '{{resolve:ssm:/'\n                - !Ref 'MainStackName'\n                - /RDSRegionalClusterARN}}\n        detail-type:\n          - RDS DB Cluster Event\n        source:\n          - aws.rds\n      State: ENABLED\n      Targets:\n        - Arn: !GetAtt 'FailoverStartedHandler.Arn'\n          Id: FailoverStartedHandler\n    Type: AWS::Events::Rule\n  FailoverStartedHandler:\n    DependsOn:\n      - FailoverStartedHandlerRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\n\\\n          import boto3\\nimport psycopg2\\nimport datetime\\nimport dateutil.tz\\nfrom\\\n          \\ botocore.exceptions import ClientError as boto3_client_error\\n\\ndef get_region(context):\\n\\\n          \\    return context.invoked_function_arn.split(':')[3]\\n\\ndef get_rds_credentials():\\n\\\n          \\    \\n    secrets_manager_client = boto3.client('secretsmanager')\\n\\n \\\n          \\   try:\\n        \\n        get_secret_value_response = secrets_manager_client.get_secret_value(\\n\\\n          \\            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\\n        )\\n\\\n          \\        \\n    except boto3_client_error as e:\\n        raise Exception('Failed\\\n          \\ to Retrieve RDS Secret: ' + str(e))\\n        \\n    else:\\n        return\\\n          \\ json.loads(get_secret_value_response['SecretString'])\\n        \\ndef lambda_handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n    \\n    eastern = dateutil.tz.gettz('US/Eastern')\\n\\\n          \\    \\n    rds_secret = get_rds_credentials()\\n\\n    db_conn = psycopg2.connect(\\n\\\n          \\        host = rds_secret['host'],\\n        port = rds_secret['port'],\\n\\\n          \\        user = rds_secret['username'],\\n        password = rds_secret['password'],\\n\\\n          \\        database = rds_secret['database'],\\n        connect_timeout = 3,\\n\\\n          \\        sslmode = 'require',\\n    )\\n\\n    curs = db_conn.cursor()\\n  \\\n          \\  curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values (2,'\\\"\\\n          +datetime.datetime.now(tz=eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\")+\\\"' )\\\"\\\n          )\\n    db_conn.commit()\\n    curs.close()\\n    db_conn.close()\\n    \\n \\\n          \\   return {\\n        'statusCode': 200,\\n        'body': json.dumps('Hello\\\n          \\ from Lambda!')\\n    }\\n\"\n      Description: Processes failover started events\n      Environment:\n        Variables:\n          PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'\n          PUBLIC_FQDN: !Ref 'PublicFQDN'\n          PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneID'\n          RDS_ADMIN_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSAdminSecretARN}}\n          RDS_PROXY_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSProxyWriterEndpoint}}\n          RDS_REGIONAL_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSClusterReaderEndpoint}}\n          RDS_REGIONAL_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSClusterWriterEndpoint}}\n      Handler: index.lambda_handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'FailoverStartedHandlerRole.Arn'\n      Runtime: python3.9\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  FailoverStartedHandlerLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - FailoverStartedHandler\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'FailoverStartedHandler'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  FailoverStartedHandlerPermission:\n    DependsOn:\n      - FailoverStartedHandler\n      - FailoverStartedEventListener\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'FailoverStartedHandler'\n      Principal: events.amazonaws.com\n      SourceArn: !GetAtt 'FailoverStartedEventListener.Arn'\n    Type: AWS::Lambda::Permission\n  FailoverStartedHandlerRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  RDSProxyMonitor:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - RDSProxyMonitorRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"_A=True\\nimport sys\\nsys.path.append('/opt')\\nimport os,json,time,boto3,psycopg2,dateutil.tz\\n\\\n          from datetime import datetime,timedelta\\nfrom botocore.exceptions import\\\n          \\ ClientError as boto3_client_error\\nrds_client=boto3.client('rds')\\ndef\\\n          \\ get_rds_credentials():\\n\\tA=boto3.client('secretsmanager')\\n\\ttry:B=A.get_secret_value(SecretId=os.environ['RDS_ADMIN_SECRET_ARN'])\\n\\\n          \\texcept boto3_client_error as C:raise Exception('Failed to Retrieve RDS\\\n          \\ Secret: '+str(C))\\n\\telse:return json.loads(B['SecretString'])\\ndef change_db_cnames_to_rds_proxy():\\n\\\n          \\tI='PRIVATE_HOSTED_ZONE_ID';H='PUBLIC_FQDN';G='comment';D='hostedZoneId';C='newValue';B='fqdn';E=boto3.client('route53');F=[{B:'db.writer.'+os.environ[H],G:\\\"\\\n          Points the Internal DB Writer Endpoint Back to the RDS Proxy's Writer\\\"\\\n          ,C:os.environ['RDS_REGIONAL_WRITER_ENDPOINT'],D:os.environ[I]},{B:'db.reader.'+os.environ[H],G:\\\"\\\n          Points the Internal DB Reader Endpoint Back to the RDS Proxy's Writer\\\"\\\n          ,C:os.environ['RDS_REGIONAL_READER_ENDPOINT'],D:os.environ[I]}]\\n\\tfor A\\\n          \\ in F:E.change_resource_record_sets(ChangeBatch={'Changes':[{'Action':'UPSERT','ResourceRecordSet':{'Name':A[B],'ResourceRecords':[{'Value':A[C]}],'TTL':1,'Type':'CNAME'}}]},HostedZoneId=A[D])\\n\\\n          \\treturn _A\\ndef disable_proxy_monitor_cron():\\n\\ttry:boto3.client('events').disable_rule(Name=os.environ['PROXY_MONITOR_CRON_NAME'])\\n\\\n          \\texcept boto3_client_error as A:raise Exception('Failed to Disable Proxy\\\n          \\ Monitor Cron: '+str(A))\\n\\treturn _A\\ndef is_rds_proxy_target_available():\\n\\\n          \\ttry:A=rds_client.describe_db_proxy_targets(DBProxyName=os.environ['REGIONAL_RDS_PROXY_NAME'],TargetGroupName='default')\\n\\\n          \\texcept boto3_client_error as B:raise Exception('Failed to Retrieve RDS\\\n          \\ Proxy Targets: '+str(B))\\n\\tprint(A)\\n\\tif\\\"'State': 'AVAILABLE'\\\"in str(A):return\\\n          \\ _A\\n\\telse:return False\\ndef log_event():D=dateutil.tz.gettz('US/Eastern');A=get_rds_credentials();B=psycopg2.connect(host=A['host'],port=A['port'],user=A['username'],sslmode='require',password=A['password'],database=A['database'],connect_timeout=3);C=B.cursor();C.execute(\\\"\\\n          INSERT INTO failoverevents (event,insertedon) values (5,'\\\"+datetime.now(tz=D).strftime('%m/%d/%Y\\\n          \\ %H:%M:%S')+\\\"' )\\\");B.commit();C.close();B.close()\\ndef lambda_handler(event,context):\\n\\\n          \\tA=datetime.now();B=A+timedelta(seconds=50)\\n\\twhile datetime.now()<B:\\n\\\n          \\t\\ttry:\\n\\t\\t\\tif is_rds_proxy_target_available():print('Target is Registered\\\n          \\ and Available');log_event();disable_proxy_monitor_cron();change_db_cnames_to_rds_proxy();break\\n\\\n          \\t\\t\\telse:print('Target is NOT Registered and Available')\\n\\t\\texcept Exception\\\n          \\ as C:time.sleep(10)\"\n      Description: ''\n      Environment:\n        Variables:\n          PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'\n          PROXY_MONITOR_CRON_NAME: !Join\n            - ''\n            - - !Ref 'MainStackName'\n              - -proxy-monitor\n          REGIONAL_RDS_PROXY_NAME: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - RDSProxyName}}\n          REGIONAL_RDS_PROXY_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - RDSProxyReaderEndpoint}}\n          REGIONAL_RDS_PROXY_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - RDSProxyWriterEndpoint}}\n      Handler: index.handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'RDSProxyMonitorRole.Arn'\n      Runtime: python3.9\n      Timeout: 120\n      TracingConfig:\n        Mode: PassThrough\n    Type: AWS::Lambda::Function\n  RDSProxyMonitorCron:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - RDSProxyMonitor\n    Properties:\n      Description: !Join\n        - ''\n        - - Invokes the RDS Proxy Monitor\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -proxy-monitor\n      ScheduleExpression: rate(1 minute)\n      State: DISABLED\n      Targets:\n        - Arn: !GetAtt 'RDSProxyMonitor.Arn'\n          Id: RDSProxyMonitor\n    Type: AWS::Events::Rule\n  RDSProxyMonitorCronPermission:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - RDSProxyMonitor\n      - RDSProxyMonitorCron\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'RDSProxyMonitor'\n      Principal: events.amazonaws.com\n      SourceArn: !GetAtt 'RDSProxyMonitorCron.Arn'\n    Type: AWS::Lambda::Permission\n  RDSProxyMonitorLogGroup:\n    Condition: IsFailoverRegion\n    DeletionPolicy: Retain\n    DependsOn:\n      - RDSProxyMonitor\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'RDSProxyMonitor'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  RDSProxyMonitorRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n              - Action:\n                  - rds:DescribeDBProxyTargets\n                Effect: Allow\n                Resource:\n                  - '*'\n                Sid: DescribeDBProxyTargets\n              - Action:\n                  - route53:ChangeResourceRecordSets\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - arn:aws:route53:::hostedzone/\n                      - !Ref 'PrivateHostedZoneID'\n                Sid: SendMessagesToSNS\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  RDSProxyMonitorRoleEventBridgePolicy:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - RDSProxyMonitorRole\n      - RDSProxyMonitorCron\n    Properties:\n      PolicyDocument:\n        Statement:\n          - Action:\n              - events:DisableRule\n            Effect: Allow\n            Resource:\n              - !GetAtt 'RDSProxyMonitorCron.Arn'\n            Sid: DisableEventBridgeRule\n      PolicyName: event-bridge-policy\n      Roles:\n        - !Ref 'RDSProxyMonitorRole'\n    Type: AWS::IAM::Policy\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "LambdaLayerCreator": {
   "DependsOn": [
    "LambdaLayerCreatorRole"
   ],
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "import sys\nsys.path.append('/opt')\n\nimport io\nimport os\nimport json\nimport boto3\nimport subprocess\nimport cfnresponse\nfrom zipfile import ZipFile\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ndef zip_directory(path):\n    for root, dirs, files in os.walk(path):\n        for f in files:\n            full_path = os.path.join(root, f)\n            archive_name = full_path[len(path) + len(os.sep):]\n            yield full_path, archive_name\n            \ndef make_zip_file_bytes(path):\n    \n    buf = io.BytesIO()\n    with ZipFile(buf, 'w') as z:\n        for full_path, archive_name in zip_directory(path = path):\n            z.write(full_path, archive_name)\n    \n    return buf.getvalue()\n    \n'''\n    - Region | str\n    - Packages | list\n    - LayerName | str\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n    response_data = {}\n    \n    boto3Session = boto3.Session(\n        region_name = arguments['Region']\n    )\n                \n    lambda_client = boto3Session.client('lambda')\n    \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        subprocess.call(('pip install ' + ' '.join(arguments['Packages']) + ' -t /tmp/lambda-layer --no-cache-dir').split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)\n        \n        try:\n            \n            response = lambda_client.publish_layer_version(\n                LayerName = arguments['LayerName'],\n                Content = {\n                    'ZipFile': make_zip_file_bytes('/tmp/lambda-layer')\n                },\n                CompatibleRuntimes = [\n                    'python3.9',\n                ],\n                CompatibleArchitectures = [\n                    'x86_64', 'arm64',\n                ]\n            )\n            \n            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, response['LayerVersionArn'])\n        \n        except boto3_client_error as e:\n            print('Failed to Deploy Lambda Layer: ' + str(e.response))\n            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n            \n    if event['RequestType'] in ['Delete']:\n        \n        try:\n            \n            layer_versions_response = lambda_client.list_layer_versions(\n                LayerName = arguments['LayerName'],\n            )\n            \n            for version in layer_versions_response['LayerVersions']:\n                \n                response = lambda_client.delete_layer_version(\n                    LayerName = arguments['LayerName'],\n                    VersionNumber = version['Version']\n                )\n\n        except boto3_client_error as e:\n            print('Failed to Delete Layer Versions: ' + str(e.response))\n            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n        \n        return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
    },
    "Description": "",
    "Handler": "index.handler",
    "Layers": [],
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "LambdaLayerCreatorRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 30,
    "TracingConfig": {
     "Mode": "PassThrough"
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "LambdaLayerCreatorLogGroup": {
   "DeletionPolicy": "Retain",
   "DependsOn": [
    "LambdaLayerCreator"
   ],
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "LambdaLayerCreator"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "LambdaLayerCreatorRole": {
   "DependsOn": [],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "lambda:ListLayerVersions",
          "lambda:DeleteLayerVersion",
          "lambda:PublishLayerVersion"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "lambda",
             {
              "Ref": "PrimaryRegionName"
             },
             {
              "Ref": "AWS::AccountId"
             },
             "layer",
             {
              "Ref": "AWS::StackName"
             }
            ]
           ]
          },
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "lambda",
             {
              "Ref": "FailoverRegionName"
             },
             {
              "Ref": "AWS::AccountId"
             },
             "layer",
             {
              "Ref": "AWS::StackName"
             }
            ]
           ]
          },
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "lambda",
             {
              "Ref": "PrimaryRegionName"
             },
             {
              "Ref": "AWS::AccountId"
             },
             "layer",
             {
              "Ref": "AWS::StackName"
             },
             "*"
            ]
           ]
          },
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "lambda",
             {
              "Ref": "FailoverRegionName"
             },
             {
              "Ref": "AWS::AccountId"
             },
             "layer",
             {
              "Ref": "AWS::StackName"
             },
             "*"
            ]
           ]
          }
         ],
         "Sid": "CreateAndDeleteLambdaLayers"
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "NetworkingStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Networking",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Networking"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nOutputs:\n  DatabaseACLID:\n    Condition: ''\n    Value: !GetAtt 'DatabaseACL.Id'\n  FailoverDatabaseSubnetID:\n    Condition: ''\n    Value: !Ref 'FailoverDatabaseSubnet'\n  FailoverPrivateSubnetID:\n    Condition: ''\n    Value: !Ref 'FailoverPrivateSubnet'\n  FailoverPublicSubnetID:\n    Condition: ''\n    Value: !Ref 'FailoverPublicSubnet'\n  LambdaSecurityGroupID:\n    Condition: ''\n    Value: !Ref 'LambdaSecurityGroup'\n  PrimaryDatabaseSubnetID:\n    Condition: ''\n    Value: !Ref 'PrimaryDatabaseSubnet'\n  PrimaryPrivateSubnetID:\n    Condition: ''\n    Value: !Ref 'PrimaryPrivateSubnet'\n  PrimaryPublicSubnetID:\n    Condition: ''\n    Value: !Ref 'PrimaryPublicSubnet'\n  VPCExport:\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -VPCId\n    Value: !Ref 'VPC'\n  VPCID:\n    Condition: ''\n    Value: !Ref 'VPC'\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  DatabaseACL:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - '-'\n            - - !Ref 'AWS::StackName'\n              - Database\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::NetworkAcl\n  DatabaseACLEgressEntry:\n    Properties:\n      CidrBlock: '0.0.0.0/0'\n      Egress: true\n      NetworkAclId: !Ref 'DatabaseACL'\n      Protocol: -1\n      RuleAction: allow\n      RuleNumber: 100\n    Type: AWS::EC2::NetworkAclEntry\n  DatabaseACLIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Database ACL ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - DatabaseACLID\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'DatabaseACL.Id'\n    Type: AWS::SSM::Parameter\n  DatabaseACLIngressEntry:\n    Properties:\n      CidrBlock: '0.0.0.0/0'\n      Egress: false\n      NetworkAclId: !Ref 'DatabaseACL'\n      Protocol: -1\n      RuleAction: allow\n      RuleNumber: 100\n    Type: AWS::EC2::NetworkAclEntry\n  FailoverDatabaseRouteTable:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - FailoverDatabaseRouteTable\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::RouteTable\n  FailoverDatabaseRouteToNATGateway:\n    DependsOn:\n      - FailoverNATGateway\n      - FailoverDatabaseRouteTable\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      NatGatewayId: !Ref 'FailoverNATGateway'\n      RouteTableId: !Ref 'FailoverDatabaseRouteTable'\n    Type: AWS::EC2::Route\n  FailoverDatabaseSubnet:\n    DependsOn:\n      - VPC\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - b\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryFailoverDatabaseSubnetCIDR'\n        - !Ref 'FailoverFailoverDatabaseSubnetCIDR'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - FailoverDatabaseSubnet\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::Subnet\n  FailoverDatabaseSubnetACLAssociation:\n    Properties:\n      NetworkAclId: !Ref 'DatabaseACL'\n      SubnetId: !Ref 'FailoverDatabaseSubnet'\n    Type: AWS::EC2::SubnetNetworkAclAssociation\n  FailoverDatabaseSubnetIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Failover Database Subnet for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - FailoverDatabaseSubnetID\n      Tier: Standard\n      Type: String\n      Value: !Ref 'FailoverDatabaseSubnet'\n    Type: AWS::SSM::Parameter\n  FailoverDatabaseSubnetTableAssociation:\n    DependsOn:\n      - VPC\n      - FailoverDatabaseSubnet\n      - FailoverDatabaseRouteTable\n    Properties:\n      RouteTableId: !Ref 'FailoverDatabaseRouteTable'\n      SubnetId: !Ref 'FailoverDatabaseSubnet'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  FailoverNATGateway:\n    DependsOn:\n      - FailoverPublicSubnet\n      - FailoverNATGatewayEIP\n    Properties:\n      AllocationId: !GetAtt 'FailoverNATGatewayEIP.AllocationId'\n      SubnetId: !Ref 'FailoverPublicSubnet'\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - FailoverNATGateway\n              - '-'\n              - !Ref 'AWS::StackName'\n    Type: AWS::EC2::NatGateway\n  FailoverNATGatewayEIP:\n    Properties:\n      Domain: VPC\n    Type: AWS::EC2::EIP\n  FailoverPrivateRouteTable:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - FailoverPrivateRouteTable\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::RouteTable\n  FailoverPrivateRouteToNATGateway:\n    DependsOn:\n      - FailoverNATGateway\n      - FailoverPrivateRouteTable\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      NatGatewayId: !Ref 'FailoverNATGateway'\n      RouteTableId: !Ref 'FailoverPrivateRouteTable'\n    Type: AWS::EC2::Route\n  FailoverPrivateSubnet:\n    DependsOn:\n      - VPC\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - b\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryFailoverPrivateSubnetCIDR'\n        - !Ref 'FailoverFailoverPrivateSubnetCIDR'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - FailoverPrivateSubnet\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::Subnet\n  FailoverPrivateSubnetIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Failover Private Subnet for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - FailoverPrivateSubnetID\n      Tier: Standard\n      Type: String\n      Value: !Ref 'FailoverPrivateSubnet'\n    Type: AWS::SSM::Parameter\n  FailoverPrivateSubnetTableAssociation:\n    DependsOn:\n      - VPC\n      - FailoverPrivateSubnet\n      - FailoverPrivateRouteTable\n    Properties:\n      RouteTableId: !Ref 'FailoverPrivateRouteTable'\n      SubnetId: !Ref 'FailoverPrivateSubnet'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  FailoverPublicSubnet:\n    DependsOn:\n      - VPC\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - b\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryFailoverPublicSubnetCIDR'\n        - !Ref 'FailoverFailoverPublicSubnetCIDR'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - FailoverPublicSubnet\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::Subnet\n  FailoverPublicSubnetIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Failover Public Subnet for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - FailoverPublicSubnetID\n      Tier: Standard\n      Type: String\n      Value: !Ref 'FailoverPublicSubnet'\n    Type: AWS::SSM::Parameter\n  FailoverPublicSubnetTableAssociation:\n    DependsOn:\n      - VPC\n      - FailoverPublicSubnet\n      - PublicRouteTable\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      SubnetId: !Ref 'FailoverPublicSubnet'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  InternetGateway:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Ref 'AWS::StackName'\n    Type: AWS::EC2::InternetGateway\n  InternetGatewayVPCAssociation:\n    DependsOn:\n      - VPC\n      - InternetGateway\n    Properties:\n      InternetGatewayId: !Ref 'InternetGateway'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::VPCGatewayAttachment\n  LambdaSecurityGroup:\n    Properties:\n      GroupDescription: Lambda Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress: []\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::SecurityGroup\n  LambdaSecurityGroupIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Lambda Security Group ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - LambdaSecurityGroupID\n      Tier: Standard\n      Type: String\n      Value: !Ref 'LambdaSecurityGroup'\n    Type: AWS::SSM::Parameter\n  PrimaryDatabaseRouteTable:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrimaryDatabaseRouteTable\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::RouteTable\n  PrimaryDatabaseRouteToNATGateway:\n    DependsOn:\n      - PrimaryNATGateway\n      - PrimaryDatabaseRouteTable\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      NatGatewayId: !Ref 'PrimaryNATGateway'\n      RouteTableId: !Ref 'PrimaryDatabaseRouteTable'\n    Type: AWS::EC2::Route\n  PrimaryDatabaseSubnet:\n    DependsOn:\n      - VPC\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - a\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'\n        - !Ref 'FailoverPrimaryDatabaseSubnetCIDR'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrimaryDatabaseSubnet\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::Subnet\n  PrimaryDatabaseSubnetACLAssociation:\n    Properties:\n      NetworkAclId: !Ref 'DatabaseACL'\n      SubnetId: !Ref 'PrimaryDatabaseSubnet'\n    Type: AWS::EC2::SubnetNetworkAclAssociation\n  PrimaryDatabaseSubnetIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Primary Database Subnet for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrimaryDatabaseSubnetID\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrimaryDatabaseSubnet'\n    Type: AWS::SSM::Parameter\n  PrimaryDatabaseSubnetTableAssociation:\n    DependsOn:\n      - VPC\n      - PrimaryDatabaseSubnet\n      - PrimaryDatabaseRouteTable\n    Properties:\n      RouteTableId: !Ref 'PrimaryDatabaseRouteTable'\n      SubnetId: !Ref 'PrimaryDatabaseSubnet'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PrimaryNATGateway:\n    DependsOn:\n      - PrimaryPublicSubnet\n      - PrimaryNATGatewayEIP\n    Properties:\n      AllocationId: !GetAtt 'PrimaryNATGatewayEIP.AllocationId'\n      SubnetId: !Ref 'PrimaryPublicSubnet'\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrimaryNATGateway\n              - '-'\n              - !Ref 'AWS::StackName'\n    Type: AWS::EC2::NatGateway\n  PrimaryNATGatewayEIP:\n    Properties:\n      Domain: VPC\n    Type: AWS::EC2::EIP\n  PrimaryPrivateRouteTable:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrimaryPrivateRouteTable\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::RouteTable\n  PrimaryPrivateRouteToNATGateway:\n    DependsOn:\n      - PrimaryNATGateway\n      - PrimaryPrivateRouteTable\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      NatGatewayId: !Ref 'PrimaryNATGateway'\n      RouteTableId: !Ref 'PrimaryPrivateRouteTable'\n    Type: AWS::EC2::Route\n  PrimaryPrivateSubnet:\n    DependsOn:\n      - VPC\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - a\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryPrimaryPrivateSubnetCIDR'\n        - !Ref 'FailoverPrimaryPrivateSubnetCIDR'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrimaryPrivateSubnet\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::Subnet\n  PrimaryPrivateSubnetIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Primary Private Subnet for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrimaryPrivateSubnetID\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrimaryPrivateSubnet'\n    Type: AWS::SSM::Parameter\n  PrimaryPrivateSubnetTableAssociation:\n    DependsOn:\n      - VPC\n      - PrimaryPrivateSubnet\n      - PrimaryPrivateRouteTable\n    Properties:\n      RouteTableId: !Ref 'PrimaryPrivateRouteTable'\n      SubnetId: !Ref 'PrimaryPrivateSubnet'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PrimaryPublicSubnet:\n    DependsOn:\n      - VPC\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - a\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryPrimaryPublicSubnetCIDR'\n        - !Ref 'FailoverPrimaryPublicSubnetCIDR'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrimaryPublicSubnet\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::Subnet\n  PrimaryPublicSubnetIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Primary Public Subnet for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrimaryPublicSubnetID\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrimaryPublicSubnet'\n    Type: AWS::SSM::Parameter\n  PrimaryPublicSubnetTableAssociation:\n    DependsOn:\n      - VPC\n      - PrimaryPublicSubnet\n      - PublicRouteTable\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      SubnetId: !Ref 'PrimaryPublicSubnet'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PublicRouteTable:\n    DependsOn:\n      - VPC\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PublicRouteTable-\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'VPC'\n    Type: AWS::EC2::RouteTable\n  PublicRouteToInternet:\n    DependsOn:\n      - InternetGateway\n      - PublicRouteTable\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref 'InternetGateway'\n      RouteTableId: !Ref 'PublicRouteTable'\n    Type: AWS::EC2::Route\n  VPC:\n    Properties:\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryVPCCIDR'\n        - !Ref 'FailoverVPCCIDR'\n      EnableDnsHostnames: true\n      EnableDnsSupport: true\n      Tags:\n        - Key: Name\n          Value: !Ref 'AWS::StackName'\n    Type: AWS::EC2::VPC\n  VPCIDParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'VPC for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - VPCID\n      Tier: Standard\n      Type: String\n      Value: !Ref 'VPC'\n    Type: AWS::SSM::Parameter\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "PrimaryLambdaLayerCreatorResource": {
   "DependsOn": [
    "LambdaLayerCreatorLogGroup"
   ],
   "Properties": {
    "Properties": {
     "LayerName": {
      "Ref": "AWS::StackName"
     },
     "Packages": [
      "requests",
      "cfnresponse",
      "psycopg2-binary"
     ],
     "Region": {
      "Ref": "PrimaryRegionName"
     }
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "LambdaLayerCreator",
      "Arn"
     ]
    },
    "Type": "Custom::DeployLambdaLayer",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "PrimaryRegionDashboardURLRetriever": {
   "DependsOn": [
    "DashboardStackSet",
    "CFNExportRetrieverLogGroup"
   ],
   "Properties": {
    "Properties": {
     "ExportPrefix": {
      "Ref": "AWS::StackName"
     },
     "Region": {
      "Ref": "PrimaryRegionName"
     }
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "CFNExportRetriever",
      "Arn"
     ]
    },
    "Type": "Custom::GetCFNExports",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "PrimaryRegionVPCIdRetriever": {
   "DependsOn": [
    "NetworkingStackSet",
    "CFNExportRetrieverLogGroup"
   ],
   "Properties": {
    "Properties": {
     "ExportPrefix": {
      "Ref": "AWS::StackName"
     },
     "Region": {
      "Ref": "PrimaryRegionName"
     }
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "CFNExportRetriever",
      "Arn"
     ]
    },
    "Type": "Custom::GetCFNExports",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "PrivateHostedZone": {
   "DependsOn": [
    "NetworkingStackSet",
    "PrimaryRegionVPCIdRetriever",
    "FailoverRegionVPCIdRetriever"
   ],
   "Properties": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "PublicFQDN"
       },
       ".internal"
      ]
     ]
    },
    "VPCs": [
     {
      "VPCId": {
       "Fn::GetAtt": [
        "PrimaryRegionVPCIdRetriever",
        "VPCId"
       ]
      },
      "VPCRegion": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "VPCId": {
       "Fn::GetAtt": [
        "FailoverRegionVPCIdRetriever",
        "VPCId"
       ]
      },
      "VPCRegion": {
       "Ref": "FailoverRegionName"
      }
     }
    ]
   },
   "Type": "AWS::Route53::HostedZone"
  },
  "StackSetAdministrationRole": {
   "DependsOn": [
    "StackSetExecutionRole"
   ],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "cloudformation.amazonaws.com"
        ]
       }
      }
     ]
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "sts:AssumeRole"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "StackSetExecutionRole",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "StackSetExecutionRole": {
   "DependsOn": [],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": [
         {
          "Ref": "AWS::AccountId"
         }
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/AdministratorAccess"
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "WebsiteStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "DatabasesStackSet",
    "NetworkingStackSet",
    "PrivateHostedZone",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource",
    "PrimaryLambdaLayerCreatorResource",
    "FailoverLambdaLayerCreatorResource"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Website",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "CodeDownloadURL",
      "ParameterValue": {
       "Ref": "CodeDownloadURL"
      }
     },
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DBAdminUsername",
      "ParameterValue": {
       "Ref": "DBAdminUsername"
      }
     },
     {
      "ParameterKey": "DBAdminPassword",
      "ParameterValue": {
       "Ref": "DBAdminPassword"
      }
     },
     {
      "ParameterKey": "PublicFQDN",
      "ParameterValue": {
       "Ref": "PublicFQDN"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneID",
      "ParameterValue": {
       "Ref": "PublicHostedZoneID"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryKMSKeyID",
      "ParameterValue": {
       "Ref": "PrimaryKMSKeyID"
      }
     },
     {
      "ParameterKey": "PrimaryVPCCIDR",
      "ParameterValue": {
       "Ref": "PrimaryVPCCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrimaryFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "PrimaryFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverKMSKeyID",
      "ParameterValue": {
       "Ref": "FailoverKMSKeyID"
      }
     },
     {
      "ParameterKey": "FailoverVPCCIDR",
      "ParameterValue": {
       "Ref": "FailoverVPCCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverPrimaryDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverPrimaryDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPublicSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPublicSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverPrivateSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverPrivateSubnetCIDR"
      }
     },
     {
      "ParameterKey": "FailoverFailoverDatabaseSubnetCIDR",
      "ParameterValue": {
       "Ref": "FailoverFailoverDatabaseSubnetCIDR"
      }
     },
     {
      "ParameterKey": "PrivateHostedZoneID",
      "ParameterValue": {
       "Ref": "PrivateHostedZone"
      }
     },
     {
      "ParameterKey": "PrimaryLambdaLayerARN",
      "ParameterValue": {
       "Ref": "PrimaryLambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "FailoverLambdaLayerARN",
      "ParameterValue": {
       "Ref": "FailoverLambdaLayerCreatorResource"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Website"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 29, 2022\n  Version: v1.0\nOutputs:\n  LoadBalancerARN:\n    Condition: ''\n    Value: !Ref 'ALB'\n  LoadBalancerFQDN:\n    Condition: ''\n    Value: !GetAtt 'ALB.DNSName'\n  Port443ALBListenerARN:\n    Condition: ''\n    Value: !Ref 'Port443ALBListener'\nParameters:\n  CodeDownloadURL:\n    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This\n      codebase is used to deploy the demo dashboard.\n    Type: String\n  DBAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DBAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverFailoverDatabaseSubnetCIDR:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverFailoverPrivateSubnetCIDR:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverFailoverPublicSubnetCIDR:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  FailoverLambdaLayerARN:\n    Type: String\n  FailoverPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverPrimaryPrivateSubnetCIDR:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrimaryPublicSubnetCIDR:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverRegionName:\n    Description: The name of the failover region (e.g., us-east-1)\n    Type: String\n  FailoverVPCCIDR:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryFailoverDatabaseSubnetCIDR:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryFailoverPrivateSubnetCIDR:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryFailoverPublicSubnetCIDR:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryKMSKeyID:\n    Description: >-\n      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets\n      Manager). This must correspond to a multi-region CMK available in both the primary\n      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n    Type: String\n  PrimaryLambdaLayerARN:\n    Type: String\n  PrimaryPrimaryDatabaseSubnetCIDR:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryPrimaryPrivateSubnetCIDR:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrimaryPublicSubnetCIDR:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryRegionName:\n    Description: The name of the primary region (e.g., us-east-1)\n    Type: String\n  PrimaryVPCCIDR:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PrivateHostedZoneID:\n    Type: String\n  PublicFQDN:\n    Description: The FQDN to be used by this application. An Amazon ACM Certificate\n      will be issued for this FQDN.\n    Type: String\n  PublicHostedZoneID:\n    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.\n    Type: String\nResources:\n  ALB:\n    DependsOn:\n      - ALBSecurityGroup\n    Properties:\n      IpAddressType: ipv4\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref 'ALBSecurityGroup'\n      Subnets:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PrimaryPublicSubnetID}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /FailoverPublicSubnetID}}\n      Type: application\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n  ALBSecurityGroup:\n    Properties:\n      GroupDescription: ALB Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress:\n        - CidrIp: '0.0.0.0/0'\n          Description: IPv4 HTTP Access from Internet\n          FromPort: 80\n          IpProtocol: tcp\n          ToPort: 80\n        - CidrIp: '0.0.0.0/0'\n          Description: IPv4 HTTP Access from Internet\n          FromPort: 443\n          IpProtocol: tcp\n          ToPort: 443\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /VPCID}}\n    Type: AWS::EC2::SecurityGroup\n  Certificate:\n    Properties:\n      DomainName: !Ref 'PublicFQDN'\n      DomainValidationOptions:\n        - DomainName: !Ref 'PublicFQDN'\n          HostedZoneId: !Ref 'PublicHostedZoneID'\n      ValidationMethod: DNS\n    Type: AWS::CertificateManager::Certificate\n  DNSRecord:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - ALB\n    Properties:\n      HostedZoneId: !Ref 'PublicHostedZoneID'\n      RecordSets:\n        - AliasTarget:\n            DNSName: !GetAtt 'ALB.DNSName'\n            EvaluateTargetHealth: false\n            HostedZoneId: !GetAtt 'ALB.CanonicalHostedZoneID'\n          Name: !Ref 'PublicFQDN'\n          Type: A\n    Type: AWS::Route53::RecordSetGroup\n  DemoSite:\n    DependsOn:\n      - DemoSiteRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\n\\\n          import boto3\\nimport datetime\\nimport psycopg2\\nimport dateutil.tz\\nfrom\\\n          \\ botocore.exceptions import ClientError as boto3_client_error\\n\\ndef get_region(context):\\n\\\n          \\    return context.invoked_function_arn.split(':')[3]\\n\\ndef get_rds_credentials():\\n\\\n          \\    \\n    secrets_manager_client = boto3.client('secretsmanager')\\n\\n \\\n          \\   try:\\n        \\n        get_secret_value_response = secrets_manager_client.get_secret_value(\\n\\\n          \\            SecretId = os.environ['REGIONAL_RDS_SECRET_ARN']\\n        )\\n\\\n          \\        \\n    except boto3_client_error as e:\\n        raise Exception('Failed\\\n          \\ to Retrieve RDS Secret: ' + str(e))\\n        \\n    else:\\n        return\\\n          \\ json.loads(get_secret_value_response['SecretString'])\\n        \\ndef lambda_handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n    \\n    http_status_code\\\n          \\ = 200\\n    \\n    try: \\n        \\n        guid = event['queryStringParameters']['guid']\\n\\\n          \\n        eastern = dateutil.tz.gettz('US/Eastern')\\n\\n        sql_statement\\\n          \\ = \\\"INSERT INTO dataserver (guid,insertedon) VALUES ('\\\" + str(guid) +\\\n          \\ \\\"','\\\" + datetime.datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\"\\\n          ) + \\\"') RETURNING id\\\"\\n        \\n        rds_secret = get_rds_credentials()\\n\\\n          \\        \\n        db_conn = psycopg2.connect(\\n            host = os.environ['GLOBAL_DB_WRITER_ENDPOINT'],\\n\\\n          \\            port = rds_secret['port'],\\n            user = rds_secret['username'],\\n\\\n          \\            password = rds_secret['password'],\\n            database =\\\n          \\ rds_secret['database'],\\n            connect_timeout = 3,\\n          \\\n          \\  sslmode = 'require',\\n        )\\n        \\n        id = 0\\n        http_status_code\\\n          \\ = 200\\n        curs = db_conn.cursor()\\n        curs.execute(sql_statement)\\n\\\n          \\        id = curs.fetchone()[0]\\n        print(id)\\n        db_conn.commit()\\n\\\n          \\        curs.close()\\n        db_conn.close()\\n        \\n    except Exception\\\n          \\ as e:\\n        http_status_code = 500\\n        print(e)\\n        \\n  \\\n          \\  return {\\n        'statusCode': http_status_code,\\n        'headers':\\\n          \\ {'content-type': 'text/html'},\\n        'body': 'You\\\\'ve reached the\\\n          \\ <strong>' + get_region(context) + '</strong> site!'\\n    }\"\n      Description: ''\n      Environment:\n        Variables:\n          GLOBAL_DB_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSGlobalWriterDNSEndpoint}}\n          REGIONAL_RDS_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RDSAdminSecretARN}}\n      Handler: index.lambda_handler\n      Layers:\n        - !If\n          - IsPrimaryRegion\n          - !Ref 'PrimaryLambdaLayerARN'\n          - !Ref 'FailoverLambdaLayerARN'\n      MemorySize: 128\n      Role: !GetAtt 'DemoSiteRole.Arn'\n      Runtime: python3.9\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupID}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrimaryPrivateSubnetID}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /FailoverPrivateSubnetID}}\n    Type: AWS::Lambda::Function\n  DemoSiteLogGroup:\n    DeletionPolicy: Retain\n    DependsOn:\n      - DemoSite\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'DemoSite'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  DemoSiteRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds-db:Connect\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSProxyARN}}\n                Sid: ConnectToRDSProxy\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RDSAdminSecretARN}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !Ref 'PrimaryKMSKeyID'\n                    - !Ref 'FailoverKMSKeyID'\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  DemoSiteTargetGroup:\n    DependsOn:\n      - DemoSite\n    Properties:\n      HealthCheckEnabled: false\n      Matcher:\n        HttpCode: '200'\n      TargetType: lambda\n      Targets:\n        - Id: !GetAtt 'DemoSite.Arn'\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n  DemoSiteTargetGroupPermission:\n    DependsOn:\n      - DemoSite\n      - DemoSiteTargetGroup\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'DemoSite'\n      Principal: elasticloadbalancing.amazonaws.com\n      SourceAccount: !Ref 'AWS::AccountId'\n      SourceArn: !Ref 'DemoSiteTargetGroup'\n    Type: AWS::Lambda::Permission\n  LoadBalancerARNParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'ALB ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - LoadBalancerARN\n      Tier: Standard\n      Type: String\n      Value: !Ref 'ALB'\n    Type: AWS::SSM::Parameter\n  LoadBalancerFQDNParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'ALB FQDN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - LoadBalancerFQDN\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'ALB.DNSName'\n    Type: AWS::SSM::Parameter\n  Port443ALBListener:\n    DependsOn:\n      - DemoSiteTargetGroup\n    Properties:\n      Certificates:\n        - CertificateArn: !Ref 'Certificate'\n      DefaultActions:\n        - TargetGroupArn: !Ref 'DemoSiteTargetGroup'\n          Type: forward\n      LoadBalancerArn: !Ref 'ALB'\n      Port: 443\n      Protocol: HTTPS\n    Type: AWS::ElasticLoadBalancingV2::Listener\n  Port443ALBListenerARNParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'ALB ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - Port443ALBListenerARN\n      Tier: Standard\n      Type: String\n      Value: !Ref 'Port443ALBListener'\n    Type: AWS::SSM::Parameter\n  Port80ALBListener:\n    DependsOn:\n      - ALB\n    Properties:\n      DefaultActions:\n        - RedirectConfig:\n            Host: '#{host}'\n            Path: /#{path}\n            Port: '443'\n            Protocol: HTTPS\n            Query: '#{query}'\n            StatusCode: HTTP_301\n          Type: redirect\n      LoadBalancerArn: !Ref 'ALB'\n      Port: 80\n      Protocol: HTTP\n    Type: AWS::ElasticLoadBalancingV2::Listener\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  }
 }
}