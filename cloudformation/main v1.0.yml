Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Codebase
        Parameters:
          - CodeDownloadURL
      - Label:
          default: Database
        Parameters:
          - DBAdminUsername
          - DBAdminPassword
      - Label:
          default: Primary Region
        Parameters:
          - PrimaryRegionName
          - PrimaryVPCCIDR
          - PrimaryPrimaryPublicSubnetCIDR
          - PrimaryFailoverPublicSubnetCIDR
          - PrimaryPrimaryPrivateSubnetCIDR
          - PrimaryFailoverPrivateSubnetCIDR
          - PrimaryPrimaryDatabaseSubnetCIDR
          - PrimaryFailoverDatabaseSubnetCIDR
          - PrimaryKMSKeyID
      - Label:
          default: Failover Region
        Parameters:
          - FailoverRegionName
          - FailoverVPCCIDR
          - FailoverPrimaryPublicSubnetCIDR
          - FailoverFailoverPublicSubnetCIDR
          - FailoverPrimaryPrivateSubnetCIDR
          - FailoverFailoverPrivateSubnetCIDR
          - FailoverPrimaryDatabaseSubnetCIDR
          - FailoverFailoverDatabaseSubnetCIDR
          - FailoverKMSKeyID
      - Label:
          default: Accessibility
        Parameters:
          - PublicFQDN
          - PublicHostedZoneID
    ParameterLabels:
      CodeDownloadURL:
        default: Download URL
      DBAdminPassword:
        default: Admin Password
      DBAdminUsername:
        default: Admin Username
      FailoverFailoverDatabaseSubnetCIDR:
        default: Failover Database Subnet CIDR
      FailoverFailoverPrivateSubnetCIDR:
        default: Failover Private Subnet CIDR
      FailoverFailoverPublicSubnetCIDR:
        default: Failover Public Subnet CIDR
      FailoverKMSKeyID:
        default: KMS Key ARN
      FailoverPrimaryDatabaseSubnetCIDR:
        default: Primary Database Subnet CIDR
      FailoverPrimaryPrivateSubnetCIDR:
        default: Primary Private Subnet CIDR
      FailoverPrimaryPublicSubnetCIDR:
        default: Primary Public Subnet CIDR
      FailoverRegionName:
        default: Region Name
      FailoverVPCCIDR:
        default: VPC CIDR
      PrimaryFailoverDatabaseSubnetCIDR:
        default: Failover Database Subnet CIDR
      PrimaryFailoverPrivateSubnetCIDR:
        default: Failover Private Subnet CIDR
      PrimaryFailoverPublicSubnetCIDR:
        default: Failover Public Subnet CIDR
      PrimaryKMSKeyID:
        default: KMS Key ARN
      PrimaryPrimaryDatabaseSubnetCIDR:
        default: Primary Database Subnet CIDR
      PrimaryPrimaryPrivateSubnetCIDR:
        default: Primary Private Subnet CIDR
      PrimaryPrimaryPublicSubnetCIDR:
        default: Primary Public Subnet CIDR
      PrimaryRegionName:
        default: Region Name
      PrimaryVPCCIDR:
        default: VPC CIDR
      PublicFQDN:
        default: Service FQDN
      PublicHostedZoneID:
        default: Hosted Zone ID
  Comments: ''
  CreatedBy: Carter Meyers (AWS)
  Description: This application deploys a Global RDS Aurora cluster.
  LastUpdated: November 29, 2022
  Version: v1.0
Outputs:
  FailoverRegionDashboard:
    Value: !GetAtt 'FailoverRegionDashboardURLRetriever.DashboardURL'
  PrimaryRegionDashboard:
    Value: !GetAtt 'PrimaryRegionDashboardURLRetriever.DashboardURL'
Parameters:
  CodeDownloadURL:
    Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
    Description: The URL from which the supporting codebase can be downloaded. This
      codebase is used to deploy the demo dashboard.
    Type: String
  DBAdminPassword:
    Description: The password to be used for the RDS Aurora admin account.
    NoEcho: true
    Type: String
  DBAdminUsername:
    Description: The username to be used for the RDS Aurora admin account.
    Type: String
  FailoverFailoverDatabaseSubnetCIDR:
    Default: 10.10.13.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  FailoverFailoverPrivateSubnetCIDR:
    Default: 10.10.12.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  FailoverFailoverPublicSubnetCIDR:
    Default: 10.10.11.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  FailoverKMSKeyID:
    Description: >-
      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
      Manager). This must correspond to a multi-region CMK available in both the primary
      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
    Type: String
  FailoverPrimaryDatabaseSubnetCIDR:
    Default: 10.10.10.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  FailoverPrimaryPrivateSubnetCIDR:
    Default: 10.10.9.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  FailoverPrimaryPublicSubnetCIDR:
    Default: 10.10.8.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  FailoverRegionName:
    Description: The name of the failover region (e.g., us-east-1)
    Type: String
  FailoverVPCCIDR:
    Default: 10.10.8.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  PrimaryFailoverDatabaseSubnetCIDR:
    Default: 10.10.5.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  PrimaryFailoverPrivateSubnetCIDR:
    Default: 10.10.4.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  PrimaryFailoverPublicSubnetCIDR:
    Default: 10.10.3.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  PrimaryKMSKeyID:
    Description: >-
      The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
      Manager). This must correspond to a multi-region CMK available in both the primary
      and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
    Type: String
  PrimaryPrimaryDatabaseSubnetCIDR:
    Default: 10.10.2.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  PrimaryPrimaryPrivateSubnetCIDR:
    Default: 10.10.1.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  PrimaryPrimaryPublicSubnetCIDR:
    Default: 10.10.0.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  PrimaryRegionName:
    Description: The name of the primary region (e.g., us-east-1)
    Type: String
  PrimaryVPCCIDR:
    Default: 10.10.0.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  PublicFQDN:
    Description: The FQDN to be used by this application. An Amazon ACM Certificate
      will be issued for this FQDN.
    Type: String
  PublicHostedZoneID:
    Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
    Type: String
Resources:
  APIDeploymentStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - WebsiteStackSet
      - NetworkingStackSet
      - APIMethods1StackSet
      - APIMethods2StackSet
      - APIMethods3StackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - APIDeployment
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - APIDeployment
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Outputs:
          APIFQDN:
            Condition: ''
            Value: !Join
              - ''
              - - !Ref 'AWS::Region'
                - .api.
                - !Ref 'PublicFQDN'
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          APIFQDNParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'API Gateway Root Resource ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - APIFQDN
              Tier: Standard
              Type: String
              Value: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - .api.
                  - !Ref 'PublicFQDN'
            Type: AWS::SSM::Parameter
          BasePathMapping:
            DependsOn:
              - DomainName
              - Deployment
              - DeploymentStage
            Properties:
              BasePath: v1
              DomainName: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - .api.
                  - !Ref 'PublicFQDN'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
              Stage: v1
            Type: AWS::ApiGateway::BasePathMapping
          Certificate:
            Properties:
              DomainName: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - .api.
                  - !Ref 'PublicFQDN'
              DomainValidationOptions:
                - DomainName: !Join
                    - ''
                    - - !Ref 'AWS::Region'
                      - .api.
                      - !Ref 'PublicFQDN'
                  HostedZoneId: !Ref 'PublicHostedZoneID'
              ValidationMethod: DNS
            Type: AWS::CertificateManager::Certificate
          DNSRecord:
            DependsOn:
              - DomainName
            Properties:
              HostedZoneId: !Ref 'PublicHostedZoneID'
              RecordSets:
                - AliasTarget:
                    DNSName: !GetAtt 'DomainName.RegionalDomainName'
                    HostedZoneId: !GetAtt 'DomainName.RegionalHostedZoneId'
                  Name: !Join
                    - ''
                    - - !Ref 'AWS::Region'
                      - .api.
                      - !Ref 'PublicFQDN'
                  Type: A
            Type: AWS::Route53::RecordSetGroup
          Deployment:
            Properties:
              Description: Initial Deployment
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Deployment
          DeploymentStage:
            DependsOn:
              - Deployment
            Properties:
              DeploymentId: !Ref 'Deployment'
              MethodSettings:
                - CachingEnabled: false
                  DataTraceEnabled: true
                  HttpMethod: GET
                  LoggingLevel: INFO
                  MetricsEnabled: true
                  ResourcePath: /~1
                  ThrottlingBurstLimit: '5000'
                  ThrottlingRateLimit: '10000'
                - CachingEnabled: false
                  DataTraceEnabled: true
                  HttpMethod: POST
                  LoggingLevel: INFO
                  MetricsEnabled: true
                  ResourcePath: /~1
                  ThrottlingBurstLimit: '5000'
                  ThrottlingRateLimit: '10000'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
              StageName: v1
            Type: AWS::ApiGateway::Stage
          DomainName:
            DependsOn:
              - Certificate
            Properties:
              DomainName: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - .api.
                  - !Ref 'PublicFQDN'
              EndpointConfiguration:
                Types:
                  - REGIONAL
              RegionalCertificateArn: !Ref 'Certificate'
            Type: AWS::ApiGateway::DomainName
    Type: AWS::CloudFormation::StackSet
  APIGatewayStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - WebsiteStackSet
      - NetworkingStackSet
      - PrivateHostedZone
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - APIGateway
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
        - ParameterKey: PrivateHostedZoneID
          ParameterValue: !Ref 'PrivateHostedZone'
        - ParameterKey: PrimaryLambdaLayerARN
          ParameterValue: !Ref 'PrimaryLambdaLayerCreatorResource'
        - ParameterKey: FailoverLambdaLayerARN
          ParameterValue: !Ref 'FailoverLambdaLayerCreatorResource'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - APIGateway
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Outputs:
          APIID:
            Condition: ''
            Value: !Ref 'API'
          APIRootResourceID:
            Condition: ''
            Value: !GetAtt 'API.RootResourceId'
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverLambdaLayerARN:
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryLambdaLayerARN:
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PrivateHostedZoneID:
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          API:
            Properties:
              EndpointConfiguration:
                Types:
                  - REGIONAL
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
            Type: AWS::ApiGateway::RestApi
          APIIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'API Gateway ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - APIID
              Tier: Standard
              Type: String
              Value: !Ref 'API'
            Type: AWS::SSM::Parameter
          APIRootResourceIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'API Gateway Root Resource ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - APIRootResourceID
              Tier: Standard
              Type: String
              Value: !GetAtt 'API.RootResourceId'
            Type: AWS::SSM::Parameter
          DEFAULT4XXGatewayResponse:
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              ResponseType: DEFAULT_4XX
              RestApiId: !Ref 'API'
            Type: AWS::ApiGateway::GatewayResponse
          DEFAULT5XXGatewayResponse:
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              ResponseType: DEFAULT_5XX
              RestApiId: !Ref 'API'
            Type: AWS::ApiGateway::GatewayResponse
    Type: AWS::CloudFormation::StackSet
  APIMethods1StackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - WebsiteStackSet
      - NetworkingStackSet
      - APIGatewayStackSet
      - PrivateHostedZone
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - APIMethods1
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
        - ParameterKey: PrivateHostedZoneID
          ParameterValue: !Ref 'PrivateHostedZone'
        - ParameterKey: PrimaryLambdaLayerARN
          ParameterValue: !Ref 'PrimaryLambdaLayerCreatorResource'
        - ParameterKey: FailoverLambdaLayerARN
          ParameterValue: !Ref 'FailoverLambdaLayerCreatorResource'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - APIMethods1
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverLambdaLayerARN:
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryLambdaLayerARN:
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PrivateHostedZoneID:
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          ClusterInfoResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIRootResourceID}}
              PathPart: cluster-info
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Resource
          ClusterInfoResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'ClusterInfoResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          FailoverEventsResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIRootResourceID}}
              PathPart: failover-events
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Resource
          FailoverEventsResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'FailoverEventsResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          GetClusterInfo:
            DependsOn:
              - GetClusterInfoRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import os\nimport json\nimport boto3\n\ndef get_region(context):\n\
                  \    return context.invoked_function_arn.split(':')[3]\n    \ndef handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n    \n    data = {}\n \
                  \   rds_client = boto3.client('rds')\n\n    cluster_resp = rds_client.describe_db_clusters(\n\
                  \        DBClusterIdentifier = os.environ['REGIONAL_DB_CLUSTER_IDENTIFIER']\n\
                  \    )\n        \n    for member in cluster_resp['DBClusters'][0]['DBClusterMembers']:\n\
                  \        \n        instance_resp = rds_client.describe_db_instances(\n \
                  \           DBInstanceIdentifier = member['DBInstanceIdentifier']\n    \
                  \    )\n        \n        data[member['DBInstanceIdentifier']] = {\n   \
                  \         'az': instance_resp['DBInstances'][0]['AvailabilityZone'],\n \
                  \           'type': 'WRITER' if member['IsClusterWriter'] is True else 'READER'\n\
                  \        }\n        \n    return {\n        'records': data\n    }"
              Description: ''
              Environment:
                Variables:
                  REGIONAL_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSRegionalClusterIdentifier}}
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'GetClusterInfoRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          GetClusterInfoLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - GetClusterInfo
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetClusterInfo'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetClusterInfoMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.records')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 400.*'
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 401.*'
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 403.*'
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 404.*'
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 415.*'
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 429.*'
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 500.*'
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{}'
                  application/x-www-form-urlencoded: '{}'
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetClusterInfo.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getClusterInfo
              ResourceId: !Ref 'ClusterInfoResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          GetClusterInfoMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - GetClusterInfo
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetClusterInfo.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /APIID}}
                  - /*/
                  - GET
                  - /
                  - cluster-info
            Type: AWS::Lambda::Permission
          GetClusterInfoRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:DescribeDBClusters
                        Effect: Allow
                        Resource:
                          - '*'
                        Sid: DescribeRDSClusters
                  PolicyName: get-rds-clusters
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:DescribeDBInstances
                        Effect: Allow
                        Resource:
                          - '*'
                        Sid: DescribeDBInstances
                  PolicyName: get-db-instances
            Type: AWS::IAM::Role
          GetFailoverEvents:
            DependsOn:
              - GetFailoverEventsRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
                  import boto3\nimport psycopg2\nfrom botocore.exceptions import ClientError\
                  \ as boto3_client_error\n\ndef get_region(context):\n    return context.invoked_function_arn.split(':')[3]\n\
                  \ndef get_rds_credentials():\n    \n    secrets_manager_client = boto3.client('secretsmanager')\n\
                  \n    try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
                  \            SecretId = os.environ['REGIONAL_RDS_SECRET_ARN']\n        )\n\
                  \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
                  \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
                  \ json.loads(get_secret_value_response['SecretString'])\n        \ndef handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n    \n    rds_secret =\
                  \ get_rds_credentials()\n    \n    db_conn = psycopg2.connect(\n       \
                  \ host = os.environ['GLOBAL_DB_WRITER_ENDPOINT'],\n        port = rds_secret['port'],\n\
                  \        user = rds_secret['username'],\n        password = rds_secret['password'],\n\
                  \        database = rds_secret['database'],\n        connect_timeout = 3,\n\
                  \        sslmode = 'require',\n    )\n        \n    curs = db_conn.cursor()\n\
                  \    \n    curs.execute('''\n        SELECT \n            event,\n     \
                  \       to_char(insertedon,'HH24:MI:SS') AS time, \n            insertedon\
                  \ \n        FROM failoverevents\n        ORDER BY insertedon\n    ''');\n\
                  \    \n    failover_events = curs.fetchall()\n    \n    curs.close()\n \
                  \   db_conn.close()\n    \n    records_to_return = []\n    \n    for x in\
                  \ failover_events:\n    \n        c = 0\n        temp2 = {}\n        \n\
                  \        for col in curs.description:\n            \n            temp2.update({str(col[0]):\
                  \ x[c]})\n            c += 1\n        \n        records_to_return.append(temp2)\n\
                  \    \n    return {\n        'records': records_to_return\n    }"
              Description: ''
              Environment:
                Variables:
                  GLOBAL_DB_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSGlobalWriterDNSEndpoint}}
                  REGIONAL_RDS_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSAdminSecretARN}}
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'GetFailoverEventsRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          GetFailoverEventsLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - GetFailoverEvents
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetFailoverEvents'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetFailoverEventsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.records')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 400.*'
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 401.*'
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 403.*'
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 404.*'
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 415.*'
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 429.*'
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 500.*'
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{}'
                  application/x-www-form-urlencoded: '{}'
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetFailoverEvents.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getFailoverEvents
              ResourceId: !Ref 'FailoverEventsResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          GetFailoverEventsMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - GetFailoverEvents
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetFailoverEvents.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /APIID}}
                  - /*/
                  - GET
                  - /
                  - failover-events
            Type: AWS::Lambda::Permission
          GetFailoverEventsRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
                - PolicyDocument:
                    Statement:
                      - Action:
                          - ec2:ReplaceNetworkAclEntry
                        Effect: Allow
                        Resource:
                          - '*'
                        Sid: UpdateACLEntry
                  PolicyName: custom-policy
            Type: AWS::IAM::Role
          RdsNaclResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIRootResourceID}}
              PathPart: rds-nacl
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Resource
          RdsNaclResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'RdsNaclResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          UpdateNACL:
            DependsOn:
              - UpdateNACLRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import os\nimport json\nimport boto3\n\ndef get_region(context):\n\
                  \    return context.invoked_function_arn.split(':')[3]\n    \ndef lambda_handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n    \n    ec2_client =\
                  \ boto3.client('ec2')\n    \n    ec2_client.replace_network_acl_entry(\n\
                  \        Egress = False, \n        CidrBlock = '0.0.0.0/0',\n        NetworkAclId\
                  \ = os.environ['RDS_ACL_ID'],\n        Protocol = '-1',\n        RuleAction\
                  \ = 'deny',\n        RuleNumber = 100\n    )\n    \n    return {\n     \
                  \   'records': []\n    }"
              Description: ''
              Environment:
                Variables:
                  RDS_NACL_ID: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DatabaseACLID}}
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'UpdateNACLRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          UpdateNACLLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - UpdateNACL
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'UpdateNACL'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          UpdateNACLMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.records')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 400.*'
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 401.*'
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 403.*'
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 404.*'
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 415.*'
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 429.*'
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 500.*'
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{}'
                  application/x-www-form-urlencoded: '{}'
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'UpdateNACL.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getFailoverEvents
              ResourceId: !Ref 'RdsNaclResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          UpdateNACLMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - UpdateNACL
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'UpdateNACL.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /APIID}}
                  - /*/
                  - GET
                  - /
                  - rds-nacl
            Type: AWS::Lambda::Permission
          UpdateNACLRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - ec2:ReplaceNetworkAclEntry
                        Effect: Allow
                        Resource:
                          - '*'
                        Sid: UpdateACLEntry
                  PolicyName: custom-policy
            Type: AWS::IAM::Role
    Type: AWS::CloudFormation::StackSet
  APIMethods2StackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - WebsiteStackSet
      - NetworkingStackSet
      - APIGatewayStackSet
      - PrivateHostedZone
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - APIMethods2
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
        - ParameterKey: PrivateHostedZoneID
          ParameterValue: !Ref 'PrivateHostedZone'
        - ParameterKey: PrimaryLambdaLayerARN
          ParameterValue: !Ref 'PrimaryLambdaLayerCreatorResource'
        - ParameterKey: FailoverLambdaLayerARN
          ParameterValue: !Ref 'FailoverLambdaLayerCreatorResource'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - APIMethods2
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverLambdaLayerARN:
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryLambdaLayerARN:
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PrivateHostedZoneID:
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          BypassRDSProxy:
            DependsOn:
              - BypassRDSProxyRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import os\nimport json\nimport boto3\nimport dateutil.tz\nfrom datetime\
                  \ import datetime\n\ndef get_region(context):\n    return context.invoked_function_arn.split(':')[3]\n\
                  \ndef cnameChangeSiteToDB():\n    \n    r53_client = boto3.client('route53')\n\
                  \    \n    for endpoint_type in ['reader', 'writer']:\n    \n        response\
                  \ = r53_client.change_resource_record_sets(\n            ChangeBatch = {\n\
                  \                'Changes': [\n                    {\n                 \
                  \       'Action': 'UPSERT',\n                        'ResourceRecordSet':\
                  \ {\n                            'Name': 'db.' + endpoint_type + '.' + os.environ['PUBLIC_FQDN']\
                  \ + '.internal',\n                            'ResourceRecords': [\n   \
                  \                             {\n                                    'Value':\
                  \ os.environ['RDS_CLUSTER_' + endpoint_type.upper() + '_ENDPOINT'],\n  \
                  \                              },\n                            ],\n    \
                  \                        'TTL': 1,\n                            'Type':\
                  \ 'CNAME',\n                        },\n                    },\n       \
                  \         ],\n            },\n            HostedZoneId = os.environ['PRIVATE_HOSTED_ZONE_ID'],\n\
                  \        )\n\ndef lambda_handler(event, context):\n    \n    cnameChangeSiteToDB()\n\
                  \    \n    return {\n        'statusCode': 200,\n        'headers': {\n\
                  \            'Access-Control-Allow-Headers': 'Content-Type',\n         \
                  \   'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods':\
                  \ 'OPTIONS,POST,GET',\n            'content-type': 'text/html'\n       \
                  \ },\n        'body': json.dumps('DNS Records Updated Successfully')\n \
                  \   }"
              Description: ''
              Environment:
                Variables:
                  PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'
                  PUBLIC_FQDN: !Ref 'PublicFQDN'
                  RDS_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSClusterReaderEndpoint}}
                  RDS_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSClusterWriterEndpoint}}
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'BypassRDSProxyRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          BypassRDSProxyLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - BypassRDSProxy
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'BypassRDSProxy'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          BypassRDSProxyMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.records')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 400.*'
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 401.*'
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 403.*'
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 404.*'
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 415.*'
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 429.*'
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 500.*'
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{}'
                  application/x-www-form-urlencoded: '{}'
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'BypassRDSProxy.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getBypassRDSProxy
              ResourceId: !Ref 'BypassRdsProxyResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          BypassRDSProxyMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - BypassRDSProxy
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'BypassRDSProxy.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /APIID}}
                  - /*/
                  - GET
                  - /
                  - bypass-rds-proxy
            Type: AWS::Lambda::Permission
          BypassRDSProxyRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
                - PolicyDocument:
                    Statement:
                      - Action:
                          - route53:ChangeResourceRecordSets
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - arn:aws:route53:::hostedzone/
                              - !Ref 'PrivateHostedZoneID'
                        Sid: UpdateRoute53Records
                  PolicyName: update-route53-records
            Type: AWS::IAM::Role
          BypassRdsProxyResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIRootResourceID}}
              PathPart: bypass-rds-proxy
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Resource
          BypassRdsProxyResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'BypassRdsProxyResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          FailoverResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIRootResourceID}}
              PathPart: failover
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Resource
          FailoverResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'FailoverResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          GetRTO:
            DependsOn:
              - GetRTORole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
                  import boto3\nimport psycopg2\nfrom botocore.exceptions import ClientError\
                  \ as boto3_client_error\n\ndef get_region(context):\n    return context.invoked_function_arn.split(':')[3]\n\
                  \ndef get_rds_credentials():\n    \n    secrets_manager_client = boto3.client('secretsmanager')\n\
                  \n    try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
                  \            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\n        )\n\
                  \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
                  \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
                  \ json.loads(get_secret_value_response['SecretString'])\n        \ndef lambda_handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n    \n    return {\n  \
                  \      'statusCode': 200,\n        'headers': {\n            'Access-Control-Allow-Headers':\
                  \ 'Content-Type',\n            'Access-Control-Allow-Origin': '*',\n   \
                  \         'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\n        \
                  \    'content-type': 'text/html'\n        },\n        'body': json.dumps([])\n\
                  \    }\n    \n    rds_secret = get_rds_credentials()\n\n    db_conn = psycopg2.connect(\n\
                  \        host = rds_secret['host'],\n        port = rds_secret['port'],\n\
                  \        user = rds_secret['username'],\n        password = rds_secret['password'],\n\
                  \        database = rds_secret['database'],\n        connect_timeout = 3,\n\
                  \        sslmode = 'require',\n    )\n        \n    curs = db_conn.cursor()\n\
                  \    \n    curs.execute('''\n        SELECT\n            DATE_PART('second',\
                  \ max(insertedon)::TIMESTAMP - min(insertedon)::TIMESTAMP) AS rto\n    \
                  \    FROM dataclient \n        WHERE http_code = 500 \n        GROUP BY\
                  \ http_code\n    ''');\n    \n    client_events = curs.fetchall()\n    \n\
                  \    curs.close()\n    db_conn.close()\n    \n    records_to_return = []\n\
                  \    \n    for x in client_events:\n    \n        c = 0\n        temp2 =\
                  \ {}\n        \n        for col in curs.description:\n            \n   \
                  \         temp2.update({str(col[0]): x[c]})\n            c += 1\n      \
                  \  \n        records_to_return.append(temp2)\n    \n    return {\n     \
                  \   'statusCode': 200,\n        'headers': {\n            'Access-Control-Allow-Headers':\
                  \ 'Content-Type',\n            'Access-Control-Allow-Origin': '*',\n   \
                  \         'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\n        \
                  \    'content-type': 'text/html'\n        },\n        'body': json.dumps(records_to_return,\
                  \ default = str)\n    }\n"
              Description: ''
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'GetRTORole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          GetRTOLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - GetRTO
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetRTO'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetRTOMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.records')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 400.*'
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 401.*'
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 403.*'
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 404.*'
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 415.*'
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 429.*'
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 500.*'
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{}'
                  application/x-www-form-urlencoded: '{}'
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetRTO.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getRTO
              ResourceId: !Ref 'RtoResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          GetRTOMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - GetRTO
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetRTO.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /APIID}}
                  - /*/
                  - GET
                  - /
                  - rto
            Type: AWS::Lambda::Permission
          GetRTORole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          RtoResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIRootResourceID}}
              PathPart: rto
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Resource
          RtoResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'RtoResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          TriggerFailover:
            DependsOn:
              - TriggerFailoverRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
                  import boto3\nimport psycopg2\nimport dateutil.tz\nimport datetime\nfrom\
                  \ botocore.exceptions import ClientError as boto3_client_error\n\ndef get_region(context):\n\
                  \    return context.invoked_function_arn.split(':')[3]\n    \ndef get_rds_credentials():\n\
                  \    \n    secrets_manager_client = boto3.client('secretsmanager')\n\n \
                  \   try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
                  \            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\n        )\n\
                  \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
                  \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
                  \ json.loads(get_secret_value_response['SecretString'])\n\ndef lambda_handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n    \n    eastern = dateutil.tz.gettz('US/Eastern')\n\
                  \    \n    rds_secret = get_rds_credentials()\n    \n    db_conn = psycopg2.connect(\n\
                  \        host = rds_secret['host'],\n        port = rds_secret['port'],\n\
                  \        user = rds_secret['username'],\n        sslmode = 'require',\n\
                  \        password = rds_secret['password'],\n        database = rds_secret['database'],\n\
                  \        connect_timeout = 3,\n    )\n\n    curs = db_conn.cursor()\n  \
                  \  curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (1,'\"\
                  +datetime.datetime.now(tz=eastern).strftime(\"%m/%d/%Y %H:%M:%S\")+\"' )\"\
                  )\n    db_conn.commit()\n    curs.close()\n    db_conn.close()\n    \n \
                  \   return {\n        'statusCode': 200,\n        'headers': {\n       \
                  \     'Access-Control-Allow-Headers': 'Content-Type',\n            'Access-Control-Allow-Origin':\
                  \ '*',\n            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\n\
                  \            'content-type': 'text/html'\n        },\n        'body': 'done'\n\
                  \    }"
              Description: ''
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'TriggerFailoverRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          TriggerFailoverLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - TriggerFailover
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'TriggerFailover'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          TriggerFailoverMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.records')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 400.*'
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 401.*'
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 403.*'
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 404.*'
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 415.*'
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 429.*'
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 500.*'
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{}'
                  application/x-www-form-urlencoded: '{}'
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'TriggerFailover.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getFailover
              ResourceId: !Ref 'FailoverResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          TriggerFailoverMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - TriggerFailover
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'TriggerFailover.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /APIID}}
                  - /*/
                  - GET
                  - /
                  - failover
            Type: AWS::Lambda::Permission
          TriggerFailoverRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
    Type: AWS::CloudFormation::StackSet
  APIMethods3StackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - WebsiteStackSet
      - NetworkingStackSet
      - APIGatewayStackSet
      - PrivateHostedZone
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - APIMethods3
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
        - ParameterKey: PrivateHostedZoneID
          ParameterValue: !Ref 'PrivateHostedZone'
        - ParameterKey: PrimaryLambdaLayerARN
          ParameterValue: !Ref 'PrimaryLambdaLayerCreatorResource'
        - ParameterKey: FailoverLambdaLayerARN
          ParameterValue: !Ref 'FailoverLambdaLayerCreatorResource'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - APIMethods3
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverLambdaLayerARN:
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryLambdaLayerARN:
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PrivateHostedZoneID:
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          ClientError:
            DependsOn:
              - ClientErrorRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
                  import boto3\nimport psycopg2\nimport dateutil.tz\nfrom datetime import\
                  \ datetime\nfrom datetime import timedelta\nfrom botocore.exceptions import\
                  \ ClientError as boto3_client_error\n\ndef get_region(context):\n    return\
                  \ context.invoked_function_arn.split(':')[3]\n\ndef get_rds_credentials():\n\
                  \    \n    secrets_manager_client = boto3.client('secretsmanager')\n\n \
                  \   try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
                  \            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\n        )\n\
                  \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
                  \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
                  \ json.loads(get_secret_value_response['SecretString'])\n        \ndef addfivesec(firsttime):\n\
                  \    return (datetime.strptime(str(firsttime), '%H:%M:%S')+timedelta(seconds=5)).strftime(\"\
                  %H:%M:%S\")\n\ndef substractFiveSec(firsttime):\n    return (datetime.strptime(str(firsttime),\
                  \ '%H:%M:%S')+timedelta(seconds=-5)).strftime(\"%H:%M:%S\")\n    \ndef addTime(label,data):\n\
                  \    eastern = dateutil.tz.gettz('US/Pacific')\n    mynow=datetime.now(tz=eastern)\n\
                  \    print((datetime.strptime(label[len(label)-1], '%H:%M:%S')+timedelta(seconds=9)))\n\
                  \    print(datetime.strptime(mynow.strftime(\"%H:%M:%S\"), '%H:%M:%S'))\n\
                  \    \n    \n    while((datetime.strptime(label[len(label)-1], '%H:%M:%S')+timedelta(seconds=9))\
                  \    < datetime.strptime(mynow.strftime(\"%H:%M:%S\"), '%H:%M:%S')):\n \
                  \       print('add')\n        label.pop(0)\n        data.pop(0)\n      \
                  \  \n        label.append(addfivesec(label[len(label)-1]))\n        data.append('0')\n\
                  \ndef lambda_handler(event, context):\n    \n    print(json.dumps(event))\n\
                  \    \n    rds_secret = get_rds_credentials()\n\n    db_conn = psycopg2.connect(\n\
                  \        host = rds_secret['host'],\n        port = rds_secret['port'],\n\
                  \        user = rds_secret['username'],\n        password = rds_secret['password'],\n\
                  \        database = rds_secret['database'],\n        connect_timeout = 3,\n\
                  \        sslmode = 'require',\n    )\n        \n    curs=db_conn.cursor()\n\
                  \    curs.execute(\"select insertedon, sum(1) from dataclient where http_code=500\
                  \ group by insertedon order by insertedon desc limit 15\");\n    east1_TPS=\
                  \ curs.fetchall()\n    \n    curs.close()\n    db_conn.close()\n    \n \
                  \   \n    label_json=\"\"\n    data_json=\"\"\n    \n    label_arr=[]\n\
                  \    data_arr=[]\n    \n    #for i in reversed(range(1,len(east1_TPS))):\n\
                  \    #    label_arr.append(str(east1_TPS[i][0]))\n    #    data_arr.append(str(east1_TPS[i][1]))\n\
                  \    \n    for r in reversed(east1_TPS):\n        label_arr.append(str(r[0]))\n\
                  \        data_arr.append(str(r[1]))\n        \n        \n    if len(label_arr)>0:\n\
                  \        for n in range(len(label_arr)+1,16):\n            label_arr.insert(0,\
                  \ substractFiveSec(label_arr[0]))\n            data_arr.insert(0,'0')\n\
                  \        \n        addTime(label_arr,data_arr)\n    \n    \n    i=-1\n \
                  \   for r in label_arr:\n        i=i+1\n        if label_json!=\"\":\n \
                  \           label_json+=\",\"\n        if data_json!=\"\":\n           \
                  \ data_json+=\",\"\n            \n        label_json+= label_arr[i]\n  \
                  \      data_json+=data_arr[i]\n    \n    \n    json_data=json.dumps({'labels':\
                  \ label_json, 'data': data_json})\n    json_data='['+json_data+']'\n   \
                  \ \n    return {\n        'statusCode': 200,\n        'headers': {\n   \
                  \         'Access-Control-Allow-Headers': 'Content-Type',\n            'Access-Control-Allow-Origin':\
                  \ '*',\n            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\n\
                  \            'content-type': 'text/html'\n        },\n        'body': json_data\n\
                  \    }\n"
              Description: ''
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'ClientErrorRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          ClientErrorLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - ClientError
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'ClientError'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          ClientErrorMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.records')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 400.*'
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 401.*'
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 403.*'
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 404.*'
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 415.*'
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 429.*'
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 500.*'
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{}'
                  application/x-www-form-urlencoded: '{}'
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'ClientError.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getClientError
              ResourceId: !Ref 'ClientErrorResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          ClientErrorMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - ClientError
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'ClientError.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /APIID}}
                  - /*/
                  - GET
                  - /
                  - client-error
            Type: AWS::Lambda::Permission
          ClientErrorResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIRootResourceID}}
              PathPart: client-error
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Resource
          ClientErrorResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'ClientErrorResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          ClientErrorRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          ResetDemoEnvironment:
            DependsOn:
              - ResetDemoEnvironmentRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "_N='Failed to Reset NACL: '\n_M='route53'\n_L='PRIVATE_HOSTED_ZONE_ID'\n\
                  _K='CNAME'\n_J='Value'\n_I='Type'\n_H='TTL'\n_G='ResourceRecords'\n_F='Name'\n\
                  _E='UPSERT'\n_D='ResourceRecordSet'\n_C='Action'\n_B='Changes'\n_A='PUBLIC_FQDN'\n\
                  import sys\nsys.path.append('/opt')\nimport os,json,boto3,psycopg2,dateutil.tz\n\
                  from datetime import datetime\nfrom botocore.exceptions import ClientError\
                  \ as boto3_client_error\nr53_client=boto3.client(_M)\nevent_bridge_client=boto3.client('events')\n\
                  def get_region(context):return context.invoked_function_arn.split(':')[3]\n\
                  def get_rds_credentials():\n\tA=boto3.client('secretsmanager')\n\ttry:B=A.get_secret_value(SecretId=os.environ['RDS_ADMIN_SECRET_ARN'])\n\
                  \texcept boto3_client_error as C:raise Exception('Failed to Retrieve RDS\
                  \ Secret: '+str(C))\n\telse:return json.loads(B['SecretString'])\ndef update_dns_records():\n\
                  \tE='comment';D='hostedZoneId';C='newValue';B='fqdn';F=boto3.client(_M);G=[{B:os.environ[_A],E:'Points\
                  \ the Service FQDN Back to the Primary Web ALB',C:os.environ['PRIMARY_WEB_ALB_FQDN'],D:os.environ['PUBLIC_HOSTED_ZONE_ID']},{B:'db.writer.'+os.environ[_A],E:\"\
                  Points the Internal DB Writer Endpoint Back to the Primary Cluster's Writer\"\
                  ,C:os.environ['RDS_REGIONAL_WRITER_ENDPOINT'],D:os.environ[_L]},{B:'db.reader.'+os.environ[_A],E:\"\
                  Points the Internal DB Writer Endpoint Back to the Primary Cluster's Reader\"\
                  ,C:os.environ['RDS_REGIONAL_READER_ENDPOINT'],D:os.environ[_L]}]\n\tfor\
                  \ A in G:F.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:A[B],_G:[{_J:A[C]}],_H:1,_I:_K}}]},HostedZoneId=A[D])\n\
                  def promote_rds_proxy_to_primary_endoint():\n\tfor A in ['reader','writer']:B=r53_client.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:'db.'+A+'.'+os.environ[_A]+'.internal',_G:[{_J:os.environ['RDS_PROXY_'+A.upper()+'_ENDPOINT']}],_H:1,_I:_K}}]},HostedZoneId=os.environ[_L])\n\
                  def cnameChangeCanaryToCluster():C='Z02605833FBBNQ31FGNI6';A='writer.cluster.endpoint.example.internal';B='database-3.cluster-c3uapa5iy3fn.us-west-1.rds.amazonaws.com';D=r53_client.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:A,_G:[{_J:B}],_H:1,_I:_K}}]},HostedZoneId=C);A='reader.cluster.endpoint.example.internal';B='database-3.cluster-ro-c3uapa5iy3fn.us-west-1.rds.amazonaws.com';D=r53_client.change_resource_record_sets(ChangeBatch={_B:[{_C:_E,_D:{_F:A,_G:[{_J:B}],_H:1,_I:_K}}]},HostedZoneId=C)\n\
                  def disableRDSProxyCheckRule():A='checkRDSProxyTargetRegistered';B=event_bridge_client.disable_rule(Name=A)\n\
                  def enable_canary_cron():\n\ttry:event_bridge_client.enable_rule(Name=os.environ['CANARY_CRON_NAME'])\n\
                  \texcept boto3_client_error as A:raise Exception(_N+str(A))\ndef allow_traffic_to_primary_rds_cluster():\n\
                  \tA=boto3.client('ec2',region_name=os.environ['PRIMARY_REGION_NAME'])\n\t\
                  try:A.replace_network_acl_entry(Egress=False,Protocol='-1',CidrBlock='0.0.0.0/0',RuleAction='allow',RuleNumber=100,NetworkAclId=os.environ['RDS_ACL_ID'])\n\
                  \texcept boto3_client_error as B:raise Exception(_N+str(B))\ndef lambda_handler(event,context):\n\
                  \tallow_traffic_to_primary_rds_cluster();promote_rds_proxy_to_primary_endoint();enable_canary_cron();A=get_rds_credentials();B=psycopg2.connect(host=A['host'],port=A['port'],user=A['username'],sslmode='require',password=A['password'],database=A['database'],connect_timeout=3)\n\
                  \tfor D in ['dataclient','dataserver','failoverevents']:C=B.cursor();C.execute('DELETE\
                  \ FROM '+D);B.commit()\n\tC.close();B.close();return{'statusCode':200,'body':json.dumps('Reset\
                  \ Successful')}"
              Description: ''
              Environment:
                Variables:
                  CANARY_CRON_NAME: !Join
                    - ''
                    - - !Ref 'MainStackName'
                      - -canary
                  PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'
                  PUBLIC_FQDN: !Ref 'PublicFQDN'
                  PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneID'
                  RDS_NACL_ID: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DatabaseACLID}}
                  WEB_ALB_FQDN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LoadBalancerFQDN}}
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'ResetDemoEnvironmentRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          ResetDemoEnvironmentLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - ResetDemoEnvironment
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'ResetDemoEnvironment'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          ResetDemoEnvironmentMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.records')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 400.*'
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 401.*'
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 403.*'
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 404.*'
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 415.*'
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 429.*'
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 500.*'
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{}'
                  application/x-www-form-urlencoded: '{}'
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'ResetDemoEnvironment.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getResetDemoEnvironment
              ResourceId: !Ref 'ResetDemoEnvironmentResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          ResetDemoEnvironmentMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - ResetDemoEnvironment
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'ResetDemoEnvironment.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /APIID}}
                  - /*/
                  - GET
                  - /
                  - reset-demo-environment
            Type: AWS::Lambda::Permission
          ResetDemoEnvironmentResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIRootResourceID}}
              PathPart: reset-demo-environment
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Resource
          ResetDemoEnvironmentResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'ResetDemoEnvironmentResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          ResetDemoEnvironmentRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
                - PolicyDocument:
                    Statement:
                      - Action:
                          - ec2:ReplaceNetworkAclEntry
                        Effect: Allow
                        Resource:
                          - '*'
                        Sid: UpdateACLEntry
                      - Action:
                          - events:EnableRule
                          - events:DisableRule
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:aws:events:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - :rule/
                              - !Join
                                - ''
                                - - !Ref 'MainStackName'
                                  - -canary
                          - !Join
                            - ''
                            - - 'arn:aws:events:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - :rule/
                              - !Join
                                - ''
                                - - !Ref 'MainStackName'
                                  - -proxy-monitor
                        Sid: ManageCrons
                      - Action:
                          - route53:ChangeResourceRecordSets
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - arn:aws:route53:::hostedzone/
                              - !Ref 'PublicHostedZoneID'
                          - !Join
                            - ''
                            - - arn:aws:route53:::hostedzone/
                              - !Ref 'PrivateHostedZoneID'
                        Sid: UpdateR53HostedZone
                  PolicyName: custom-policy
            Type: AWS::IAM::Role
          TestTrafficTopic:
            Condition: IsPrimaryRegion
            Type: AWS::SNS::Topic
          TestTrafficTopicPermission:
            Condition: IsPrimaryRegion
            DependsOn:
              - TrafficGenerator
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'TrafficGenerator'
              Principal: sns.amazonaws.com
              SourceAccount: !Ref 'AWS::AccountId'
              SourceArn: !Ref 'TestTrafficTopic'
            Type: AWS::Lambda::Permission
          TestTrafficTopicSubscription:
            Condition: IsPrimaryRegion
            DependsOn:
              - TrafficGenerator
              - TestTrafficTopic
              - TestTrafficTopicPermission
            Properties:
              Endpoint: !GetAtt 'TrafficGenerator.Arn'
              Protocol: lambda
              TopicArn: !Ref 'TestTrafficTopic'
            Type: AWS::SNS::Subscription
          TrafficGenerator:
            Condition: IsPrimaryRegion
            DependsOn:
              - TrafficGeneratorRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import os\nimport time\nimport json\nimport boto3\n\ndef get_region(context):\n\
                  \    return context.invoked_function_arn.split(':')[3]\n    \ndef lambda_handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n\n    sns_client = boto3.client('sns')\n\
                  \    \n    for i in range(0, 5000):\n        \n        sns_client.publish(\n\
                  \            Message = 'Hello',\n            TargetArn = os.environ['TEST_TRAFFIC_TOPIC_ARN'],\n\
                  \        )\n        \n        time.sleep(0.1)\n    \n    return {\n    \
                  \    'statusCode': 200,\n        'body': json.dumps('Hello from ' + get_region(context)\
                  \ + ' SNS Client Lambda!')\n    }\n"
              Description: ''
              Environment:
                Variables:
                  TEST_TRAFFIC_TOPIC_ARN: !Ref 'TestTrafficTopic'
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'TrafficGeneratorRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          TrafficGeneratorLogGroup:
            Condition: IsPrimaryRegion
            DeletionPolicy: Retain
            DependsOn:
              - TrafficGenerator
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'TrafficGenerator'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          TrafficGeneratorMethod:
            Condition: IsPrimaryRegion
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.records')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 400.*'
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 401.*'
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 403.*'
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 404.*'
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 415.*'
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 429.*'
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: '.*"code": 500.*'
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{}'
                  application/x-www-form-urlencoded: '{}'
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'TrafficGenerator.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getTrafficGenerator
              ResourceId: !Ref 'TrafficGeneratorResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          TrafficGeneratorMethodInvocationPermission:
            Condition: IsPrimaryRegion
            DependsOn:
              - TrafficGenerator
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'TrafficGenerator.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /APIID}}
                  - /*/
                  - GET
                  - /
                  - traffic-generator
            Type: AWS::Lambda::Permission
          TrafficGeneratorResource:
            Condition: IsPrimaryRegion
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIRootResourceID}}
              PathPart: traffic-generator
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Resource
          TrafficGeneratorResourceOptionsMethod:
            Condition: IsPrimaryRegion
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'TrafficGeneratorResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /APIID}}
            Type: AWS::ApiGateway::Method
          TrafficGeneratorRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies: []
            Type: AWS::IAM::Role
          TrafficGeneratorRoleGenerateTestTraffic:
            Condition: IsPrimaryRegion
            DependsOn:
              - TrafficGeneratorRole
              - TestTrafficTopic
            Properties:
              PolicyDocument:
                Statement:
                  - Action:
                      - sns:Publish
                    Effect: Allow
                    Resource:
                      - !Ref 'TestTrafficTopic'
                    Sid: SendMessagesToSNS
              PolicyName: generate-test-traffic
              Roles:
                - !Ref 'TrafficGeneratorRole'
            Type: AWS::IAM::Policy
    Type: AWS::CloudFormation::StackSet
  CFNExportRetriever:
    DependsOn:
      - CFNExportRetrieverRole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import sys\nimport subprocess\n\nsubprocess.call('pip install cfnresponse\
          \ -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr\
          \ = subprocess.DEVNULL)\nsys.path.insert(1, '/tmp/')\n\nimport io\nimport\
          \ os\nimport json\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions\
          \ import ClientError, ParamValidationError\n\n'''\n    - Region | str\n\
          \    - ExportPrefix | str\n'''\ndef handler(event, context):\n    \n   \
          \ print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n\
          \    operation = event['ResourceProperties']['Type'].replace('Custom::',\
          \ '')\n    \n    response_data = {}\n    \n    boto3Session = boto3.Session(\n\
          \        region_name = arguments['Region']\n    )\n    \n    cfn_client\
          \ = boto3Session.client('cloudformation')\n    \n    if event['RequestType']\
          \ in ['Create', 'Update']:\n        \n        try:\n            \n     \
          \       response = cfn_client.list_exports()\n            \n           \
          \ for export in response['Exports']:\n            \t\n                if\
          \ export['Name'].startswith(arguments['ExportPrefix']):\n              \
          \      response_data[export['Name'].replace(arguments['ExportPrefix'] +\
          \ '-', '')] = export['Value']\n                \n            print(response_data)\n\
          \            \n            return cfnresponse.send(event, context, cfnresponse.SUCCESS,\
          \ response_data)\n                \n        except ClientError as e:\n \
          \           print('Failed to Retrieve CFN Exports: ' + str(e.response))\n\
          \            return cfnresponse.send(event, context, cfnresponse.FAILED,\
          \ response_data)\n            \n    if event['RequestType'] in ['Delete']:\n\
          \        \n        return cfnresponse.send(event, context, cfnresponse.SUCCESS,\
          \ response_data)"
      Description: ''
      Environment:
        Variables: {}
      Handler: index.handler
      Layers: []
      MemorySize: 128
      Role: !GetAtt 'CFNExportRetrieverRole.Arn'
      Runtime: python3.9
      Timeout: 15
      TracingConfig:
        Mode: PassThrough
    Type: AWS::Lambda::Function
  CFNExportRetrieverLogGroup:
    DeletionPolicy: Retain
    DependsOn:
      - CFNExportRetriever
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'CFNExportRetriever'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  CFNExportRetrieverRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - cloudformation:ListExports
                Effect: Allow
                Resource:
                  - '*'
                Sid: GetCFNOutputs
          PolicyName: main-policy
    Type: AWS::IAM::Role
  DashboardStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Dashboard
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Dashboard
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Outputs:
          DashboardURLExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -DashboardURL
            Value: !Join
              - ''
              - - https://
                - !GetAtt 'CloudFrontDistribution.DomainName'
                - ?apiHost=
                - !Ref 'AWS::Region'
                - .api.
                - !Ref 'PublicFQDN'
                - '&primaryRegion='
                - !Ref 'PrimaryRegionName'
                - '&failoverRegion='
                - !Ref 'FailoverRegionName'
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          Bucket:
            DeletionPolicy: Retain
            Properties:
              AccessControl: Private
              PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
              VersioningConfiguration:
                Status: Suspended
            Type: AWS::S3::Bucket
          BucketPolicy:
            DependsOn:
              - Bucket
              - CloudFrontAccessIdentity
            Properties:
              Bucket: !Ref 'Bucket'
              PolicyDocument:
                Statement:
                  - Action:
                      - s3:GetObject
                    Effect: Allow
                    Principal:
                      AWS: !Join
                        - ''
                        - - 'arn:'
                          - !Ref 'AWS::Partition'
                          - ':iam::cloudfront:user/CloudFront Origin Access Identity '
                          - !Ref 'CloudFrontAccessIdentity'
                    Resource:
                      - !Join
                        - ''
                        - - !GetAtt 'Bucket.Arn'
                          - /*
            Type: AWS::S3::BucketPolicy
          CloudFrontAccessIdentity:
            Properties:
              CloudFrontOriginAccessIdentityConfig:
                Comment: Dashboard
            Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
          CloudFrontDistribution:
            DependsOn:
              - ResponseHeadersPolicy
              - CloudFrontAccessIdentity
            Properties:
              DistributionConfig:
                DefaultCacheBehavior:
                  Compress: true
                  ForwardedValues:
                    QueryString: true
                  ResponseHeadersPolicyId: !Ref 'ResponseHeadersPolicy'
                  TargetOriginId: dashboard-bucket
                  ViewerProtocolPolicy: redirect-to-https
                DefaultRootObject: !If
                  - IsPrimaryRegion
                  - primary-region.html
                  - failover-region.html
                Enabled: true
                HttpVersion: http2
                IPV6Enabled: true
                Origins:
                  - DomainName: !GetAtt 'Bucket.DomainName'
                    Id: dashboard-bucket
                    S3OriginConfig:
                      OriginAccessIdentity: !Join
                        - ''
                        - - origin-access-identity/cloudfront/
                          - !Ref 'CloudFrontAccessIdentity'
            Type: AWS::CloudFront::Distribution
          DashboardCodeDeployer:
            DependsOn:
              - DashboardCodeDeployerRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nimport subprocess\n\nsubprocess.call('pip install cfnresponse\
                  \ -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr\
                  \ = subprocess.DEVNULL)\nsys.path.insert(1, '/tmp/')\n\nimport os\nimport\
                  \ json\nimport glob\nimport boto3\nimport shutil\nimport urllib3\nimport\
                  \ zipfile\nimport mimetypes\nimport cfnresponse\nfrom collections import\
                  \ defaultdict\nfrom botocore.exceptions import ClientError as boto3_client_error\n\
                  \nhttp = urllib3.PoolManager()\n\ntry:\n    from urllib2 import HTTPError,\
                  \ build_opener, HTTPHandler, Request\nexcept ImportError:\n    from urllib.error\
                  \ import HTTPError\n    from urllib.request import build_opener, HTTPHandler,\
                  \ Request\n\ndef delete_all_objects(bucket_name):\n    \n    try:\n    \
                  \        \n        boto3.resource('s3').Bucket(bucket_name).objects.all().delete()\n\
                  \    \n    except boto3_client_error as e:\n        print('Failed to Empty\
                  \ Dashboard Bucket: ' + str(e))\n        return False\n    \n    return\
                  \ True\n    \n'''\n    - CodeBucketName | str\n    - CodeDownloadURL | str\n\
                  '''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n\
                  \    \n    arguments = event['ResourceProperties']['Properties']\n    response_data\
                  \ = {}\n    \n    if event['RequestType'] in ['Create', 'Update']:\n   \
                  \     \n        path_to_local_zip = '/tmp/dashboard_code.zip'\n        path_to_local_dir\
                  \ = path_to_local_zip.replace('.zip', '')\n        \n        '''\n     \
                  \       Download the codebase\n        '''\n        http = urllib3.PoolManager()\n\
                  \        code_download_response = http.request('GET', arguments['CodeDownloadURL'],\
                  \ preload_content = False)\n        \n        if code_download_response.status\
                  \ != 200:\n            return False\n        \n        with code_download_response\
                  \ as r, open(path_to_local_zip, 'wb') as out_file:\n            shutil.copyfileobj(r,\
                  \ out_file)\n        \n        '''\n            Unzip the downloaded code\n\
                  \        '''\n        with zipfile.ZipFile(path_to_local_zip, 'r') as zip_ref:\n\
                  \            zip_ref.extractall(path_to_local_dir)\n            \n     \
                  \   s3_client = boto3.client('s3')\n        \n        '''\n            For\
                  \ each file in the local code directory\n        '''\n        for file_path\
                  \ in glob.iglob(path_to_local_dir + '**/**', recursive = True):\n      \
                  \      \n            '''\n                If it's one of the dashboard files\
                  \ and it's a file, not a directory, we'll upload it to S3\n            '''\n\
                  \            if '/dashboard/' in file_path and os.path.isfile(file_path):\n\
                  \            \n                try:\n                    \n            \
                  \        s3_key = file_path.split('/dashboard/')[1]\n                  \
                  \  \n                    s3_client.upload_file(file_path, arguments['CodeBucketName'],\
                  \ s3_key,\n                        ExtraArgs = {\n                     \
                  \       'ContentType': mimetypes.guess_type(file_path)[0]\n            \
                  \            })\n                    \n                except boto3_client_error\
                  \ as e:\n                    print('Failed to Upload Dashboard File: ' +\
                  \ str(e))\n                    return cfnresponse.send(event, context, cfnresponse.FAILED,\
                  \ response_data)\n                    \n        properties = event['ResourceProperties']\n\
                  \        \n    elif event['RequestType'] in ['Delete']:\n        \n    \
                  \    object_deletion = delete_all_objects(arguments['CodeBucketName'])\n\
                  \        \n        delete_marker_deletion = True\n        #delete_marker_deletion\
                  \ = delete_all_delete_markers(arguments['CodeBucketName'])\n        \n \
                  \       if object_deletion is False or delete_marker_deletion is False:\n\
                  \                \n            return cfnresponse.send(event, context, cfnresponse.FAILED,\
                  \ response_data)\n    \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS,\
                  \ response_data)"
              Description: ''
              Environment:
                Variables:
                  CODE_BUCKET_NAME: !Ref 'Bucket'
                  CODE_DOWNLOAD_URL: !Ref 'CodeDownloadURL'
              Handler: index.handler
              Layers: []
              MemorySize: 128
              Role: !GetAtt 'DashboardCodeDeployerRole.Arn'
              Runtime: python3.9
              Timeout: 30
              TracingConfig:
                Mode: PassThrough
            Type: AWS::Lambda::Function
          DashboardCodeDeployerLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - DashboardCodeDeployer
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'DashboardCodeDeployer'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          DashboardCodeDeployerResource:
            DependsOn:
              - Bucket
              - DashboardCodeDeployer
              - DashboardCodeDeployerLogGroup
            Properties:
              Properties:
                CodeBucketName: !Ref 'Bucket'
                CodeDownloadURL: !Ref 'CodeDownloadURL'
              ServiceToken: !GetAtt 'DashboardCodeDeployer.Arn'
              Type: Custom::DeployDashboardCode
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          DashboardCodeDeployerRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - s3:PutObject
                          - s3:ListBucket
                          - s3:DeleteObject
                          - s3:ListBucketVersions
                          - s3:DeleteObjectVersion
                        Effect: Allow
                        Resource:
                          - !GetAtt 'Bucket.Arn'
                          - !Join
                            - ''
                            - - !GetAtt 'Bucket.Arn'
                              - /*
                        Sid: PutS3Objects
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          ResponseHeadersPolicy:
            Properties:
              ResponseHeadersPolicyConfig:
                CorsConfig:
                  AccessControlAllowCredentials: false
                  AccessControlAllowHeaders:
                    Items:
                      - '*'
                  AccessControlAllowMethods:
                    Items:
                      - GET
                      - POST
                      - OPTIONS
                  AccessControlAllowOrigins:
                    Items:
                      - '*'
                  AccessControlExposeHeaders:
                    Items:
                      - '*'
                  OriginOverride: false
                Name: !Join
                  - ''
                  - - !Ref 'MainStackName'
                    - -CORS-With-Preflight-
                    - !If
                      - IsPrimaryRegion
                      - Primary
                      - Failover
            Type: AWS::CloudFront::ResponseHeadersPolicy
    Type: AWS::CloudFormation::StackSet
  DatabasesStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - NetworkingStackSet
      - PrivateHostedZone
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Databases
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 1
        RegionConcurrencyType: SEQUENTIAL
        RegionOrder:
          - !Ref 'PrimaryRegionName'
          - !Ref 'FailoverRegionName'
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
        - ParameterKey: PrivateHostedZoneID
          ParameterValue: !Ref 'PrivateHostedZone'
        - ParameterKey: PrimaryLambdaLayerARN
          ParameterValue: !Ref 'PrimaryLambdaLayerCreatorResource'
        - ParameterKey: FailoverLambdaLayerARN
          ParameterValue: !Ref 'FailoverLambdaLayerCreatorResource'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Databases
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Outputs:
          RDSAdminSecretARN:
            Condition: ''
            Value: !Ref 'RDSAdminSecret'
          RDSClusterReaderEndpoint:
            Condition: ''
            Value: !If
              - IsPrimaryRegion
              - !GetAtt 'PrimaryRDSCluster.ReadEndpoint.Address'
              - !GetAtt 'FailoverRDSCluster.ReadEndpoint.Address'
          RDSClusterWriterEndpoint:
            Condition: ''
            Value: !If
              - IsPrimaryRegion
              - !GetAtt 'PrimaryRDSCluster.Endpoint.Address'
              - !GetAtt 'FailoverRDSCluster.Endpoint.Address'
          RDSGlobalClusterIdentifier:
            Condition: ''
            Value: !Ref 'MainStackName'
          RDSGlobalReaderDNSEndpoint:
            Condition: ''
            Value: !Join
              - ''
              - - db.reader.
                - !Ref 'PublicFQDN'
                - .internal
          RDSGlobalWriterDNSEndpoint:
            Condition: ''
            Value: !Join
              - ''
              - - db.writer.
                - !Ref 'PublicFQDN'
                - .internal
          RDSProxyARN:
            Condition: ''
            Value: !GetAtt 'RDSProxy.DBProxyArn'
          RDSProxyName:
            Condition: ''
            Value: !Ref 'RDSProxy'
          RDSProxyPort:
            Condition: ''
            Value: !If
              - IsPrimaryRegion
              - !GetAtt 'PrimaryRDSCluster.Endpoint.Port'
              - !GetAtt 'FailoverRDSCluster.Endpoint.Port'
          RDSProxyReaderEndpoint:
            Condition: ''
            Value: !GetAtt 'ProxyReaderEndpoint.Endpoint'
          RDSProxyWriterEndpoint:
            Condition: ''
            Value: !GetAtt 'RDSProxy.Endpoint'
          RDSRegionalClusterARN:
            Condition: ''
            Value: !If
              - IsPrimaryRegion
              - !GetAtt 'PrimaryRDSCluster.DBClusterArn'
              - !GetAtt 'FailoverRDSCluster.DBClusterArn'
          RDSRegionalClusterIdentifier:
            Condition: ''
            Value: !If
              - IsPrimaryRegion
              - !Ref 'PrimaryRDSCluster'
              - !Ref 'FailoverRDSCluster'
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverLambdaLayerARN:
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryLambdaLayerARN:
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PrivateHostedZoneID:
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          DNSRecords:
            Condition: IsPrimaryRegion
            DependsOn:
              - RDSProxy
            Properties:
              HostedZoneId: !Ref 'PrivateHostedZoneID'
              RecordSets:
                - Name: !Join
                    - .
                    - - db
                      - cluster
                      - reader
                      - !Ref 'PublicFQDN'
                      - internal
                  ResourceRecords:
                    - !GetAtt 'PrimaryRDSCluster.ReadEndpoint.Address'
                  TTL: '1'
                  Type: CNAME
                - Name: !Join
                    - .
                    - - db
                      - reader
                      - !Ref 'PublicFQDN'
                      - internal
                  ResourceRecords:
                    - !GetAtt 'ProxyReaderEndpoint.Endpoint'
                  TTL: '1'
                  Type: CNAME
                - Name: !Join
                    - .
                    - - db
                      - cluster
                      - writer
                      - !Ref 'PublicFQDN'
                      - internal
                  ResourceRecords:
                    - !GetAtt 'PrimaryRDSCluster.Endpoint.Address'
                  TTL: '1'
                  Type: CNAME
                - Name: !Join
                    - .
                    - - db
                      - writer
                      - !Ref 'PublicFQDN'
                      - internal
                  ResourceRecords:
                    - !GetAtt 'RDSProxy.Endpoint'
                  TTL: '1'
                  Type: CNAME
            Type: AWS::Route53::RecordSetGroup
          DatabasePreparer:
            Condition: IsPrimaryRegion
            DependsOn:
              - DatabasePreparerRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\nimport subprocess\n\nimport\
                  \ os\nimport json\nimport boto3\nimport psycopg2\nimport cfnresponse\nfrom\
                  \ botocore.exceptions import ClientError as boto3_client_error\n\n'''\n\
                  \    RDSAdminSecretARN\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n\
                  \    \n    arguments = event['ResourceProperties']['Properties']\n    operation\
                  \ = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n\
                  \    response_data = {}\n    \n    rds_client = boto3.client('rds')\n  \
                  \  secrets_manager_client = boto3.client('secretsmanager')\n\n    try:\n\
                  \        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
                  \            SecretId = arguments['RDSAdminSecretARN']\n        )\n    \
                  \    \n    except boto3_client_error as e:\n        print('Unable to retrieva\
                  \ RDS secret: ' + str(e))\n        return cfnresponse.send(event, context,\
                  \ cfnresponse.FAILED, response_data)\n        \n    else:\n        rds_secret\
                  \ = json.loads(get_secret_value_response['SecretString'])\n    \n    if\
                  \ event['RequestType'] in ['Create']:\n        \n        try:\n        \
                  \    \n            try:\n                    \n                db_conn =\
                  \ psycopg2.connect(\n                    host = rds_secret['host'],\n  \
                  \                  port = rds_secret['port'],\n                    user\
                  \ = rds_secret['username'],\n                    password = rds_secret['password'],\n\
                  \                    database = rds_secret['database'],\n              \
                  \      connect_timeout = 3,\n                    sslmode = 'require',\n\
                  \                )\n                \n                curs = db_conn.cursor()\n\
                  \                \n                ddl_statements = [\n                \
                  \    '''\n                    CREATE SEQUENCE data_sequence start 1 increment\
                  \ 1;\n                    ''',\n                    '''\n              \
                  \      CREATE TABLE IF NOT EXISTS dataserver (\n                       \
                  \ id integer not null primary key default nextval('data_sequence'),\n  \
                  \                      guid VARCHAR(255) NOT NULL,\n                   \
                  \     insertedon timestamp NOT NULL DEFAULT NOW(),\n                   \
                  \     migratedon timestamp NOT NULL DEFAULT NOW()\n                    );\n\
                  \                    ''',\n                    '''\n                   \
                  \ CREATE TABLE IF NOT EXISTS public.dataclient (\n                     \
                  \   guid character varying(255) COLLATE pg_catalog.\"default\" NOT NULL,\n\
                  \                        useast1 integer NOT NULL,\n                   \
                  \     useast2 integer NOT NULL,\n                        http_code integer,\n\
                  \                        insertedon time without time zone\n           \
                  \         );\n                    ''',\n                    '''\n      \
                  \              CREATE TABLE IF NOT EXISTS public.failoverevents (\n    \
                  \                    event integer NOT NULL,\n                        insertedon\
                  \ timestamp without time zone NOT NULL\n                    );\n       \
                  \             '''\n                ]\n                \n               \
                  \ for ddl_statement in ddl_statements:\n                    \n         \
                  \           curs.execute(ddl_statement.replace('\\r','').replace('\\n','\
                  \ '))\n                    db_conn.commit()\n                \n        \
                  \        curs.close()\n                db_conn.close()\n            \n \
                  \               return cfnresponse.send(event, context, cfnresponse.SUCCESS,\
                  \ response_data)\n                \n            except Exception as error:\n\
                  \                print('There was a problem executing the DDL statements:\
                  \ ' + str(error))\n                return cfnresponse.send(event, context,\
                  \ cfnresponse.FAILED, response_data)\n                \n        except boto3_client_error\
                  \ as e:\n            print('Failed to Prepare RDS Database: ' + str(e.response))\n\
                  \            return cfnresponse.send(event, context, cfnresponse.FAILED,\
                  \ response_data)\n            \n    if event['RequestType'] in ['Update',\
                  \ 'Delete']:\n        \n        return cfnresponse.send(event, context,\
                  \ cfnresponse.SUCCESS, response_data)"
              Description: ''
              Environment:
                Variables:
                  RDS_PROXY_ENDPOINT: !GetAtt 'RDSProxy.Endpoint'
                  RDS_PROXY_PORT: !If
                    - IsPrimaryRegion
                    - !GetAtt 'PrimaryRDSCluster.Endpoint.Port'
                    - !GetAtt 'FailoverRDSCluster.Endpoint.Port'
                  RDS_USERNAME: !Ref 'DBAdminUsername'
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'DatabasePreparerRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          DatabasePreparerLogGroup:
            Condition: IsPrimaryRegion
            DeletionPolicy: Retain
            DependsOn:
              - DatabasePreparer
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'DatabasePreparer'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          DatabasePreparerResource:
            Condition: IsPrimaryRegion
            DependsOn:
              - RDSAdminSecret
              - DatabasePreparerLogGroup
            Properties:
              Properties:
                RDSAdminSecretARN: !Ref 'RDSAdminSecret'
              ServiceToken: !GetAtt 'DatabasePreparer.Arn'
              Type: Custom::PrepareRDSDatabase
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          DatabasePreparerRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - '*'
                        Sid: UseRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Ref 'RDSAdminSecret'
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          FailoverClusterDetacher:
            Condition: IsPrimaryRegion
            DependsOn:
              - FailoverClusterDetacherRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
                  import boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError\
                  \ as boto3_client_error\n\n'''\n    FailoverClusterARN\n    GlobalClusterIdentifier\n\
                  '''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n\
                  \    \n    arguments = event['ResourceProperties']['Properties']\n    #operation\
                  \ = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n\
                  \    response_data = {}\n    \n    if event['RequestType'] in ['Create',\
                  \ 'Update']:\n        \n        return cfnresponse.send(event, context,\
                  \ cfnresponse.SUCCESS, response_data)\n        \n    elif event['RequestType']\
                  \ in ['Delete']:\n        \n        rds_client = boto3.client('rds')\n \
                  \       \n        try:\n            \n            describe_cluster_resp\
                  \ = rds_client.describe_global_clusters(\n                GlobalClusterIdentifier\
                  \ = arguments['GlobalClusterIdentifier']\n            )\n            \n\
                  \            '''\n                For each Global Cluster member\n     \
                  \       '''\n            for cluster_member in describe_cluster_resp['GlobalClusters'][0]['GlobalClusterMembers']:\n\
                  \                \n                '''\n                    If this failover\
                  \ cluster is a member of the Global Cluster\n                '''\n     \
                  \           if arguments['FailoverClusterARN'] == cluster_member['DBClusterArn']:\n\
                  \                    \n                    '''\n                       \
                  \ We're goign to remove it from the global cluster.\n                  \
                  \  '''\n                    rds_client.remove_from_global_cluster(\n   \
                  \                     DbClusterIdentifier = arguments['FailoverClusterARN'],\n\
                  \                        GlobalClusterIdentifier = arguments['GlobalClusterIdentifier'],\n\
                  \                    )\n                    \n                    '''\n\
                  \                        Now, we'll monitor the detachment and respond only\
                  \ after it's successful.\n                    '''\n                    while\
                  \ True:\n                \n                        failover_cluster_still_attached\
                  \ = False\n                        \n                        describe_cluster_resp\
                  \ = rds_client.describe_global_clusters(\n                            GlobalClusterIdentifier\
                  \ = arguments['GlobalClusterIdentifier']\n                        )\n  \
                  \                      \n                        '''\n                 \
                  \           For each global cluster member\n                        '''\n\
                  \                        for cluster_member in describe_cluster_resp['GlobalClusters'][0]['GlobalClusterMembers']:\n\
                  \                            \n                            '''\n       \
                  \                         If the failover cluster's identifier is present\
                  \ in this member's ARN\n                            '''\n              \
                  \              if arguments['FailoverClusterARN'] == cluster_member['DBClusterArn']:\n\
                  \        \n                                '''\n                       \
                  \             We'll consider the failover cluster still attached\n     \
                  \                           '''\n                                failover_cluster_still_attached\
                  \ = True\n                        \n                        if failover_cluster_still_attached\
                  \ is False:\n                            break\n\n                \n   \
                  \     except boto3_client_error as e:\n            print('Failed to Detach\
                  \ Failover Cluster: ' + str(e.response))\n            return cfnresponse.send(event,\
                  \ context, cfnresponse.FAILED, response_data)\n            \n    if event['RequestType']\
                  \ in ['Update', 'Delete']:\n        \n        return cfnresponse.send(event,\
                  \ context, cfnresponse.SUCCESS, response_data)"
              Description: ''
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'FailoverClusterDetacherRole.Arn'
              Runtime: python3.9
              Timeout: 300
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          FailoverClusterDetacherLogGroup:
            Condition: IsPrimaryRegion
            DeletionPolicy: Retain
            DependsOn:
              - FailoverClusterDetacher
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'FailoverClusterDetacher'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          FailoverClusterDetacherResource:
            Condition: IsPrimaryRegion
            DependsOn:
              - GlobalRDSCluster
              - FailoverClusterDetacherLogGroup
            Properties:
              Properties:
                FailoverClusterARN: !Join
                  - ':'
                  - - arn
                    - !Ref 'AWS::Partition'
                    - rds
                    - !Ref 'FailoverRegionName'
                    - !Ref 'AWS::AccountId'
                    - cluster
                    - !Join
                      - '-'
                      - - !Ref 'MainStackName'
                        - !Ref 'FailoverRegionName'
                GlobalClusterIdentifier: !Ref 'MainStackName'
              ServiceToken: !GetAtt 'FailoverClusterDetacher.Arn'
              Type: Custom::DetachFailoverClusterFromGlobalCluster
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          FailoverClusterDetacherRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:RemoveFromGlobalCluster
                        Effect: Allow
                        Resource:
                          - '*'
                          - !Join
                            - ':'
                            - - arn
                              - !Ref 'AWS::Partition'
                              - rds
                              - !Ref 'FailoverRegionName'
                              - !Ref 'AWS::AccountId'
                              - cluster
                              - !Join
                                - '-'
                                - - !Ref 'MainStackName'
                                  - !Ref 'FailoverRegionName'
                        Sid: DetachRDSCluster
                      - Action:
                          - rds:DescribeGlobalClusters
                        Effect: Allow
                        Resource:
                          - !Join
                            - ':'
                            - - arn
                              - !Ref 'AWS::Partition'
                              - rds
                              - ''
                              - !Ref 'AWS::AccountId'
                              - global-cluster
                              - !Ref 'MainStackName'
                        Sid: DescribeGlobalCluster
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          FailoverRDSAdminSecretAttachment:
            Condition: IsFailoverRegion
            DependsOn:
              - RDSAdminSecret
              - FailoverRDSCluster
            Properties:
              SecretId: !Ref 'RDSAdminSecret'
              TargetId: !Ref 'FailoverRDSCluster'
              TargetType: AWS::RDS::DBCluster
            Type: AWS::SecretsManager::SecretTargetAttachment
          FailoverRDSCluster:
            Condition: IsFailoverRegion
            DependsOn:
              - RDSSubnetGroup
            Properties:
              BackupRetentionPeriod: 30
              DBClusterIdentifier: !Join
                - ''
                - - !Ref 'MainStackName'
                  - '-'
                  - !Ref 'AWS::Region'
              DBSubnetGroupName: !Ref 'RDSSubnetGroup'
              DeletionProtection: false
              EnableIAMDatabaseAuthentication: false
              Engine: aurora-postgresql
              EngineMode: provisioned
              EngineVersion: '14.3'
              GlobalClusterIdentifier: !Ref 'MainStackName'
              KmsKeyId: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryKMSKeyID'
                - !Ref 'FailoverKMSKeyID'
              Port: 5432
              RestoreType: copy-on-write
              StorageEncrypted: true
              VpcSecurityGroupIds:
                - !Ref 'RDSSecurityGroup'
            Type: AWS::RDS::DBCluster
          FailoverRDSInstance1:
            Condition: IsFailoverRegion
            DependsOn:
              - FailoverRDSCluster
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'FailoverRDSCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
              PubliclyAccessible: false
            Type: AWS::RDS::DBInstance
          FailoverRDSInstance2:
            Condition: IsFailoverRegion
            DependsOn:
              - FailoverRDSCluster
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'FailoverRDSCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
              PubliclyAccessible: false
            Type: AWS::RDS::DBInstance
          GlobalRDSCluster:
            Condition: IsPrimaryRegion
            DependsOn:
              - PrimaryRDSCluster
            Properties:
              DeletionProtection: false
              GlobalClusterIdentifier: !Ref 'MainStackName'
              SourceDBClusterIdentifier: !Ref 'PrimaryRDSCluster'
            Type: AWS::RDS::GlobalCluster
          PrimaryRDSAdminSecretAttachment:
            Condition: IsPrimaryRegion
            DependsOn:
              - RDSAdminSecret
              - PrimaryRDSCluster
            Properties:
              SecretId: !Ref 'RDSAdminSecret'
              TargetId: !Ref 'PrimaryRDSCluster'
              TargetType: AWS::RDS::DBCluster
            Type: AWS::SecretsManager::SecretTargetAttachment
          PrimaryRDSCluster:
            Condition: IsPrimaryRegion
            DeletionPolicy: Snapshot
            DependsOn:
              - RDSSubnetGroup
            Properties:
              BackupRetentionPeriod: 30
              DBClusterIdentifier: !Join
                - ''
                - - !Ref 'MainStackName'
                  - '-'
                  - !Ref 'AWS::Region'
              DBSubnetGroupName: !Ref 'RDSSubnetGroup'
              DeletionProtection: false
              EnableIAMDatabaseAuthentication: false
              Engine: aurora-postgresql
              EngineMode: provisioned
              EngineVersion: '14.3'
              KmsKeyId: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryKMSKeyID'
                - !Ref 'FailoverKMSKeyID'
              MasterUserPassword: !Ref 'DBAdminPassword'
              MasterUsername: !Ref 'DBAdminUsername'
              Port: 5432
              StorageEncrypted: true
              VpcSecurityGroupIds:
                - !Ref 'RDSSecurityGroup'
            Type: AWS::RDS::DBCluster
          PrimaryRDSInstance1:
            Condition: IsPrimaryRegion
            DependsOn:
              - PrimaryRDSCluster
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'PrimaryRDSCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
              PubliclyAccessible: false
            Type: AWS::RDS::DBInstance
          PrimaryRDSInstance2:
            Condition: IsPrimaryRegion
            DependsOn:
              - PrimaryRDSCluster
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'PrimaryRDSCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
              PubliclyAccessible: false
            Type: AWS::RDS::DBInstance
          ProxyReaderEndpoint:
            DependsOn:
              - RDSProxy
            Properties:
              DBProxyEndpointName: !Join
                - ''
                - - !If
                    - IsPrimaryRegion
                    - !Ref 'PrimaryRDSCluster'
                    - !Ref 'FailoverRDSCluster'
                  - '-'
                  - writer
              DBProxyName: !Ref 'RDSProxy'
              TargetRole: READ_ONLY
              VpcSecurityGroupIds:
                - !Ref 'RDSProxySecurityGroup'
              VpcSubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PrimaryDatabaseSubnetID}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /FailoverDatabaseSubnetID}}
            Type: AWS::RDS::DBProxyEndpoint
          ProxyTargetGroup:
            Condition: IsPrimaryRegion
            DependsOn:
              - RDSProxy
            Properties:
              DBClusterIdentifiers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryRDSCluster'
                  - !Ref 'FailoverRDSCluster'
              DBProxyName: !Ref 'RDSProxy'
              TargetGroupName: default
            Type: AWS::RDS::DBProxyTargetGroup
          RDSAdminSecret:
            Properties:
              Description: !Join
                - ''
                - - 'RDS Cluster Admin Account for '
                  - !Ref 'MainStackName'
              KmsKeyId: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryKMSKeyID'
                - !Ref 'FailoverKMSKeyID'
              SecretString: !Join
                - ''
                - - '{"username": "'
                  - !Ref 'DBAdminUsername'
                  - '", "password": "'
                  - !Ref 'DBAdminPassword'
                  - '", "database": "template1"}'
            Type: AWS::SecretsManager::Secret
          RDSAdminSecretARNParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS admin Secrets Manager Secret ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSAdminSecretARN
              Tier: Standard
              Type: String
              Value: !Ref 'RDSAdminSecret'
            Type: AWS::SSM::Parameter
          RDSClusterParameterGroup:
            Properties:
              Description: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - ' - Cluster Param Group'
              Family: aurora-postgresql13
              Parameters:
                rds.logical_replication: 1
                wal_sender_timeout: 240000
            Type: AWS::RDS::DBClusterParameterGroup
          RDSClusterReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Cluster reader endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSClusterReaderEndpoint
              Tier: Standard
              Type: String
              Value: !If
                - IsPrimaryRegion
                - !GetAtt 'PrimaryRDSCluster.ReadEndpoint.Address'
                - !GetAtt 'FailoverRDSCluster.ReadEndpoint.Address'
            Type: AWS::SSM::Parameter
          RDSClusterWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Cluster writer endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSClusterWriterEndpoint
              Tier: Standard
              Type: String
              Value: !If
                - IsPrimaryRegion
                - !GetAtt 'PrimaryRDSCluster.Endpoint.Address'
                - !GetAtt 'FailoverRDSCluster.Endpoint.Address'
            Type: AWS::SSM::Parameter
          RDSGlobalClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Global RDS Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSGlobalClusterIdentifier
              Tier: Standard
              Type: String
              Value: !Ref 'MainStackName'
            Type: AWS::SSM::Parameter
          RDSGlobalReaderDNSEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Global DNS Endpoint for RDS Reader for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSGlobalReaderDNSEndpoint
              Tier: Standard
              Type: String
              Value: !Join
                - ''
                - - db.reader.
                  - !Ref 'PublicFQDN'
                  - .internal
            Type: AWS::SSM::Parameter
          RDSGlobalWriterDNSEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Global DNS Endpoint for RDS Writer for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSGlobalWriterDNSEndpoint
              Tier: Standard
              Type: String
              Value: !Join
                - ''
                - - db.writer.
                  - !Ref 'PublicFQDN'
                  - .internal
            Type: AWS::SSM::Parameter
          RDSProxy:
            Properties:
              Auth:
                - SecretArn: !Ref 'RDSAdminSecret'
              DBProxyName: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryRDSCluster'
                - !Ref 'FailoverRDSCluster'
              EngineFamily: POSTGRESQL
              RequireTLS: true
              RoleArn: !GetAtt 'RDSProxyRole.Arn'
              VpcSecurityGroupIds:
                - !Ref 'RDSProxySecurityGroup'
              VpcSubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PrimaryDatabaseSubnetID}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /FailoverDatabaseSubnetID}}
            Type: AWS::RDS::DBProxy
          RDSProxyARNParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSProxyARN
              Tier: Standard
              Type: String
              Value: !GetAtt 'RDSProxy.DBProxyArn'
            Type: AWS::SSM::Parameter
          RDSProxyNameParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy name for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSProxyName
              Tier: Standard
              Type: String
              Value: !Ref 'RDSProxy'
            Type: AWS::SSM::Parameter
          RDSProxyPortParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy port for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSProxyPort
              Tier: Standard
              Type: String
              Value: !If
                - IsPrimaryRegion
                - !GetAtt 'PrimaryRDSCluster.Endpoint.Port'
                - !GetAtt 'FailoverRDSCluster.Endpoint.Port'
            Type: AWS::SSM::Parameter
          RDSProxyReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy reader endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSProxyReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'ProxyReaderEndpoint.Endpoint'
            Type: AWS::SSM::Parameter
          RDSProxyRole:
            DependsOn:
              - RDSAdminSecret
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - rds.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AdministratorAccess
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Ref 'RDSAdminSecret'
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          RDSProxySecurityGroup:
            Properties:
              GroupDescription: RDS Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress:
                - Description: DB Access from Lambda
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                  ToPort: 5432
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /VPCID}}
            Type: AWS::EC2::SecurityGroup
          RDSProxyWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy writer endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSProxyWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'RDSProxy.Endpoint'
            Type: AWS::SSM::Parameter
          RDSRegionalClusterARNParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional RDS Cluster ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSRegionalClusterARN
              Tier: Standard
              Type: String
              Value: !If
                - IsPrimaryRegion
                - !GetAtt 'PrimaryRDSCluster.DBClusterArn'
                - !GetAtt 'FailoverRDSCluster.DBClusterArn'
            Type: AWS::SSM::Parameter
          RDSRegionalClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional RDS Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RDSRegionalClusterIdentifier
              Tier: Standard
              Type: String
              Value: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryRDSCluster'
                - !Ref 'FailoverRDSCluster'
            Type: AWS::SSM::Parameter
          RDSSecurityGroup:
            DependsOn:
              - RDSProxySecurityGroup
            Properties:
              GroupDescription: RDS Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress:
                - Description: DB Access from Lambda
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                  ToPort: 5432
                - Description: DB Access from RDS Proxy
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Ref 'RDSProxySecurityGroup'
                  ToPort: 5432
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /VPCID}}
            Type: AWS::EC2::SecurityGroup
          RDSSubnetGroup:
            Properties:
              DBSubnetGroupDescription: Database Subnets
              DBSubnetGroupName: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - !Join
                    - ''
                    - !Split
                      - subnet-
                      - !Join
                        - '-'
                        - - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /PrimaryDatabaseSubnetID}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /FailoverDatabaseSubnetID}}
              SubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PrimaryDatabaseSubnetID}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /FailoverDatabaseSubnetID}}
            Type: AWS::RDS::DBSubnetGroup
        Transform:
          Name: AWS::SecretsManager-2020-07-23
    Type: AWS::CloudFormation::StackSet
  FailoverLambdaLayerCreatorResource:
    DependsOn:
      - LambdaLayerCreatorLogGroup
    Properties:
      Properties:
        LayerName: !Ref 'AWS::StackName'
        Packages:
          - requests
          - cfnresponse
          - psycopg2-binary
        Region: !Ref 'FailoverRegionName'
      ServiceToken: !GetAtt 'LambdaLayerCreator.Arn'
      Type: Custom::DeployLambdaLayer
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  FailoverRegionDashboardURLRetriever:
    DependsOn:
      - DashboardStackSet
      - CFNExportRetrieverLogGroup
    Properties:
      Properties:
        ExportPrefix: !Ref 'AWS::StackName'
        Region: !Ref 'FailoverRegionName'
      ServiceToken: !GetAtt 'CFNExportRetriever.Arn'
      Type: Custom::GetCFNExports
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  FailoverRegionVPCIdRetriever:
    DependsOn:
      - NetworkingStackSet
      - CFNExportRetrieverLogGroup
    Properties:
      Properties:
        ExportPrefix: !Ref 'AWS::StackName'
        Region: !Ref 'FailoverRegionName'
      ServiceToken: !GetAtt 'CFNExportRetriever.Arn'
      Type: Custom::GetCFNExports
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  FailoverStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - DatabasesStackSet
      - NetworkingStackSet
      - PrivateHostedZone
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Failover
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
        - ParameterKey: PrivateHostedZoneID
          ParameterValue: !Ref 'PrivateHostedZone'
        - ParameterKey: PrimaryLambdaLayerARN
          ParameterValue: !Ref 'PrimaryLambdaLayerCreatorResource'
        - ParameterKey: FailoverLambdaLayerARN
          ParameterValue: !Ref 'FailoverLambdaLayerCreatorResource'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Failover
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverLambdaLayerARN:
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryLambdaLayerARN:
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PrivateHostedZoneID:
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          Canary:
            Condition: IsFailoverRegion
            DependsOn:
              - CanaryRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport time\n\
                  import json\nimport boto3\nimport psycopg2\nimport dateutil.tz\nfrom datetime\
                  \ import datetime\nfrom datetime import timedelta\nfrom botocore.exceptions\
                  \ import ClientError as boto3_client_error\n\ndef get_rds_credentials():\n\
                  \    \n    secrets_manager_client = boto3.client('secretsmanager')\n\n \
                  \   try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
                  \            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\n        )\n\
                  \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
                  \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
                  \ json.loads(get_secret_value_response['SecretString'])\n\nrds_secret =\
                  \ get_rds_credentials()\n\ndb_conn = psycopg2.connect(\n    host = rds_secret['host'],\n\
                  \    port = rds_secret['port'],\n    user = rds_secret['username'],\n  \
                  \  sslmode = 'require',\n    password = rds_secret['password'],\n    database\
                  \ = rds_secret['database'],\n    connect_timeout = 3,\n)\n\ndef test_db_connection():\n\
                  \n    with db_conn:\n        with db_conn.cursor() as curs:\n          \
                  \  curs.execute('SELECT NOW()')\n            results = curs.fetchall()\n\
                  \            db_conn.commit()\n            \ndef disable_canary_rule():\n\
                  \n    try:\n        \n        boto3.client('events').disable_rule(\n   \
                  \         Name = os.environ['CANARY_CRON_NAME']\n        )\n        \n \
                  \   except boto3_client_error as e:\n        raise Exception('Failed to\
                  \ Disable Canary Cron: ' + str(e))\n        \n    return True\n\ndef detach_and_promote_failover_cluster():\n\
                  \    \n    try:\n        \n        boto3.client('rds').remove_from_global_cluster(\n\
                  \            DbClusterIdentifier = os.environ['FAILOVER_CLUSTER_ARN'],\n\
                  \            GlobalClusterIdentifier = os.environ['GLOBAL_CLUSTER_IDENTIFIER'],\n\
                  \        )\n        \n    except boto3_client_error as e:\n        raise\
                  \ Exception('Failed to Detach Failover Cluster from Primary: ' + str(e))\n\
                  \    \n    return True\n    \ndef log_failover_event():\n    \n    eastern\
                  \ = dateutil.tz.gettz('US/Eastern')\n    \n    curs = db_conn.cursor()\n\
                  \    curs.execute(\"INSERT INTO failoverevents (event,insertedon) values\
                  \ (2,'\"+ datetime.now(tz=eastern).strftime(\"%m/%d/%Y %H:%M:%S\")+\"' )\"\
                  )\n    db_conn.commit()\n    curs.close()\n    db_conn.close()\n   \ndef\
                  \ lambda_handler(event, context):\n    \n    statusCode = 200\n    \n  \
                  \  now = datetime.now()\n    end = now + timedelta(seconds = 110)\n    failures\
                  \ = 0\n    \n    while (datetime.now() < end):\n        \n        try:\n\
                  \            test_db_connection()\n            \n        except Exception\
                  \ as e:\n            failures += 1\n        \n        if failures > 1:\n\
                  \            \n            detach_and_promote_failover_cluster()\n     \
                  \       print('Detached and Promoted Failover Cluster');\n            \n\
                  \            disable_canary_rule()\n            print('Canary Rule Disabled');\n\
                  \            \n            log_failover_event()\n            print('Failover\
                  \ Event Logged');\n            \n            return {\n                'statusCode':\
                  \ 500\n            }\n            \n        time.sleep(10)\n    \n    return\
                  \ {\n        'statusCode': statusCode\n    }"
              Description: ''
              Environment:
                Variables:
                  CANARY_CRON_NAME: !Join
                    - ''
                    - - !Ref 'MainStackName'
                      - -canary
                  FAILOVER_CLUSTER_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSRegionalClusterARN}}
                  GLOBAL_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSGlobalClusterIdentifier}}
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'CanaryRole.Arn'
              Runtime: python3.9
              Timeout: 65
              TracingConfig:
                Mode: PassThrough
            Type: AWS::Lambda::Function
          CanaryCron:
            Condition: IsFailoverRegion
            DependsOn:
              - Canary
            Properties:
              Description: !Join
                - ''
                - - Invokes Regional DB Canary.
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -canary
              ScheduleExpression: rate(1 minute)
              State: DISABLED
              Targets:
                - Arn: !GetAtt 'Canary.Arn'
                  Id: Canary
            Type: AWS::Events::Rule
          CanaryCronPermission:
            Condition: IsFailoverRegion
            DependsOn:
              - Canary
              - CanaryCron
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'Canary'
              Principal: events.amazonaws.com
              SourceArn: !GetAtt 'CanaryCron.Arn'
            Type: AWS::Lambda::Permission
          CanaryLogGroup:
            Condition: IsFailoverRegion
            DeletionPolicy: Retain
            DependsOn:
              - Canary
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'Canary'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          CanaryRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                      - Action:
                          - rds:RemoveFromGlobalCluster
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:'
                              - !Ref 'AWS::Partition'
                              - ':rds:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - ':cluster:'
                              - !Join
                                - ''
                                - - '{{resolve:ssm:/'
                                  - !Ref 'MainStackName'
                                  - /RDSRegionalClusterIdentifier}}
                          - !Join
                            - ''
                            - - 'arn:'
                              - !Ref 'AWS::Partition'
                              - ':rds:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - ':global-cluster:'
                              - !Join
                                - ''
                                - - '{{resolve:ssm:/'
                                  - !Ref 'MainStackName'
                                  - /RDSGlobalClusterIdentifier}}
                        Sid: DetachFailoverCluster
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          CanaryRoleEventBridgePolicy:
            Condition: IsFailoverRegion
            DependsOn:
              - CanaryRole
              - CanaryCron
            Properties:
              PolicyDocument:
                Statement:
                  - Action:
                      - events:DisableRule
                    Effect: Allow
                    Resource:
                      - !GetAtt 'CanaryCron.Arn'
                    Sid: DisableEventBridgeRule
              PolicyName: event-bridge-policy
              Roles:
                - !Ref 'CanaryRole'
            Type: AWS::IAM::Policy
          FailoverCompletedEventListener:
            DependsOn:
              - FailoverCompletedHandler
            Properties:
              Description: Invokes handler when failover is completed
              EventPattern:
                detail:
                  EventID:
                    - RDS-EVENT-0071
                  SourceArn:
                    - !Join
                      - ''
                      - - '{{resolve:ssm:/'
                        - !Ref 'MainStackName'
                        - /RDSRegionalClusterARN}}
                detail-type:
                  - RDS DB Cluster Event
                source:
                  - aws.rds
              State: ENABLED
              Targets:
                - Arn: !GetAtt 'FailoverCompletedHandler.Arn'
                  Id: FailoverCompletedHandler
            Type: AWS::Events::Rule
          FailoverCompletedHandler:
            DependsOn:
              - FailoverCompletedHandlerRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
                  import boto3\nimport psycopg2\nimport dateutil.tz\nfrom datetime import\
                  \ datetime\nfrom datetime import timedelta\nfrom botocore.exceptions import\
                  \ ClientError as boto3_client_error\n\ndef get_region(context):\n    return\
                  \ context.invoked_function_arn.split(':')[3]\n\ndef get_rds_credentials():\n\
                  \    \n    secrets_manager_client = boto3.client('secretsmanager')\n\n \
                  \   try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
                  \            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\n        )\n\
                  \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
                  \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
                  \ json.loads(get_secret_value_response['SecretString'])\n        \ndef lambda_handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n    \n    eastern = dateutil.tz.gettz('US/Eastern')\n\
                  \    \n    rds_secret = get_rds_credentials()\n\n    db_conn = psycopg2.connect(\n\
                  \        host = rds_secret['host'],\n        port = rds_secret['port'],\n\
                  \        user = rds_secret['username'],\n        password = rds_secret['password'],\n\
                  \        database = rds_secret['database'],\n        connect_timeout = 3,\n\
                  \        sslmode = 'require',\n    )\n    \n    current_region = get_region(context)\n\
                  \    \n    if current_region == os.environ['PRIMARY_REGION_NAME']:\n   \
                  \     \n        curs = db_conn.cursor()\n        curs.execute(\"INSERT INTO\
                  \ failoverevents (event,insertedon) values (3,'\"+datetime.now(tz=eastern).strftime(\"\
                  %m/%d/%Y %H:%M:%S\")+\"' )\")\n        db_conn.commit()\n        \n    elif\
                  \ current_region == os.environ['FAILOVER_REGION_NAME']:\n        \n    \
                  \    r53_client = boto3.client('route53')\n        \n        dns_changes\
                  \ = [\n            {\n                'fqdn': os.environ['PUBLIC_FQDN'],\n\
                  \                'newValue': '',\n                'hostedZoneId': os.environ['PUBLIC_HOSTED_ZONE_ID']\n\
                  \            },\n            {\n                'fqdn': 'db.writer.' + os.environ['PUBLIC_FQDN'],\n\
                  \                'newValue': os.environ['RDS_REGIONAL_WRITER_ENDPOINT'],\n\
                  \                'hostedZoneId': os.environ['PRIVATE_HOSTED_ZONE_ID'],\n\
                  \            },\n            {\n                'fqdn': 'db.reader.' + os.environ['PUBLIC_FQDN'],\n\
                  \                'newValue': os.environ['RDS_REGIONAL_READER_ENDPOINT'],\n\
                  \                'hostedZoneId': os.environ['PRIVATE_HOSTED_ZONE_ID'],\n\
                  \            }\n        ]\n        \n        for dns_change in dns_changes:\n\
                  \            \n            r53_client.change_resource_record_sets(\n   \
                  \             ChangeBatch = {\n                    'Changes': [\n      \
                  \                  {\n                            'Action': 'UPSERT',\n\
                  \                            'ResourceRecordSet': {\n                  \
                  \              'Name': dns_change['fqdn'],\n                           \
                  \     'ResourceRecords': [\n                                    {\n    \
                  \                                    'Value': dns_change['newValue'],\n\
                  \                                    },\n                              \
                  \  ],\n                                'TTL': 1,\n                     \
                  \           'Type': 'CNAME',\n                            },\n         \
                  \               },\n                    ],\n                },\n       \
                  \         HostedZoneId = dns_change['hostedZoneId'],\n            )\n  \
                  \    \n     \n      \n    '''\n        Logs Failover Completion\n    '''\n\
                  \    curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents\
                  \ (event,insertedon) values (3,'\" + datetime.now(tz = eastern).strftime(\"\
                  %m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n    \n    '''\n \
                  \       Logs CNAME Update\n    '''\n    curs = db_conn.cursor()\n    curs.execute(\"\
                  INSERT INTO failoverevents (event,insertedon) values (4,'\" + datetime.now(tz\
                  \ = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n\
                  \        \n    curs.close()\n    db_conn.close()\n    \n    return True"
              Description: Processes failover completed events
              Environment:
                Variables:
                  PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'
                  PUBLIC_FQDN: !Ref 'PublicFQDN'
                  PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneID'
                  RDS_ADMIN_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSAdminSecretARN}}
                  RDS_PROXY_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSProxyWriterEndpoint}}
                  RDS_REGIONAL_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSClusterReaderEndpoint}}
                  RDS_REGIONAL_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSClusterWriterEndpoint}}
              Handler: index.lambda_handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'FailoverCompletedHandlerRole.Arn'
              Runtime: python3.9
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          FailoverCompletedHandlerLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - FailoverCompletedHandler
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'FailoverCompletedHandler'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          FailoverCompletedHandlerPermission:
            DependsOn:
              - FailoverCompletedHandler
              - FailoverCompletedEventListener
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'FailoverCompletedHandler'
              Principal: events.amazonaws.com
              SourceArn: !GetAtt 'FailoverCompletedEventListener.Arn'
            Type: AWS::Lambda::Permission
          FailoverCompletedHandlerRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          FailoverStartedEventListener:
            DependsOn:
              - FailoverStartedHandler
            Properties:
              Description: Invokes handler when failover is started
              EventPattern:
                detail:
                  EventID:
                    - RDS-EVENT-0073
                  SourceArn:
                    - !Join
                      - ''
                      - - '{{resolve:ssm:/'
                        - !Ref 'MainStackName'
                        - /RDSRegionalClusterARN}}
                detail-type:
                  - RDS DB Cluster Event
                source:
                  - aws.rds
              State: ENABLED
              Targets:
                - Arn: !GetAtt 'FailoverStartedHandler.Arn'
                  Id: FailoverStartedHandler
            Type: AWS::Events::Rule
          FailoverStartedHandler:
            DependsOn:
              - FailoverStartedHandlerRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
                  import boto3\nimport psycopg2\nimport datetime\nimport dateutil.tz\nfrom\
                  \ botocore.exceptions import ClientError as boto3_client_error\n\ndef get_region(context):\n\
                  \    return context.invoked_function_arn.split(':')[3]\n\ndef get_rds_credentials():\n\
                  \    \n    secrets_manager_client = boto3.client('secretsmanager')\n\n \
                  \   try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
                  \            SecretId = os.environ['RDS_ADMIN_SECRET_ARN']\n        )\n\
                  \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
                  \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
                  \ json.loads(get_secret_value_response['SecretString'])\n        \ndef lambda_handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n    \n    eastern = dateutil.tz.gettz('US/Eastern')\n\
                  \    \n    rds_secret = get_rds_credentials()\n\n    db_conn = psycopg2.connect(\n\
                  \        host = rds_secret['host'],\n        port = rds_secret['port'],\n\
                  \        user = rds_secret['username'],\n        password = rds_secret['password'],\n\
                  \        database = rds_secret['database'],\n        connect_timeout = 3,\n\
                  \        sslmode = 'require',\n    )\n\n    curs = db_conn.cursor()\n  \
                  \  curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (2,'\"\
                  +datetime.datetime.now(tz=eastern).strftime(\"%m/%d/%Y %H:%M:%S\")+\"' )\"\
                  )\n    db_conn.commit()\n    curs.close()\n    db_conn.close()\n    \n \
                  \   return {\n        'statusCode': 200,\n        'body': json.dumps('Hello\
                  \ from Lambda!')\n    }\n"
              Description: Processes failover started events
              Environment:
                Variables:
                  PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'
                  PUBLIC_FQDN: !Ref 'PublicFQDN'
                  PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneID'
                  RDS_ADMIN_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSAdminSecretARN}}
                  RDS_PROXY_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSProxyWriterEndpoint}}
                  RDS_REGIONAL_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSClusterReaderEndpoint}}
                  RDS_REGIONAL_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSClusterWriterEndpoint}}
              Handler: index.lambda_handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'FailoverStartedHandlerRole.Arn'
              Runtime: python3.9
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          FailoverStartedHandlerLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - FailoverStartedHandler
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'FailoverStartedHandler'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          FailoverStartedHandlerPermission:
            DependsOn:
              - FailoverStartedHandler
              - FailoverStartedEventListener
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'FailoverStartedHandler'
              Principal: events.amazonaws.com
              SourceArn: !GetAtt 'FailoverStartedEventListener.Arn'
            Type: AWS::Lambda::Permission
          FailoverStartedHandlerRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          RDSProxyMonitor:
            Condition: IsFailoverRegion
            DependsOn:
              - RDSProxyMonitorRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "_A=True\nimport sys\nsys.path.append('/opt')\nimport os,json,time,boto3,psycopg2,dateutil.tz\n\
                  from datetime import datetime,timedelta\nfrom botocore.exceptions import\
                  \ ClientError as boto3_client_error\nrds_client=boto3.client('rds')\ndef\
                  \ get_rds_credentials():\n\tA=boto3.client('secretsmanager')\n\ttry:B=A.get_secret_value(SecretId=os.environ['RDS_ADMIN_SECRET_ARN'])\n\
                  \texcept boto3_client_error as C:raise Exception('Failed to Retrieve RDS\
                  \ Secret: '+str(C))\n\telse:return json.loads(B['SecretString'])\ndef change_db_cnames_to_rds_proxy():\n\
                  \tI='PRIVATE_HOSTED_ZONE_ID';H='PUBLIC_FQDN';G='comment';D='hostedZoneId';C='newValue';B='fqdn';E=boto3.client('route53');F=[{B:'db.writer.'+os.environ[H],G:\"\
                  Points the Internal DB Writer Endpoint Back to the RDS Proxy's Writer\"\
                  ,C:os.environ['RDS_REGIONAL_WRITER_ENDPOINT'],D:os.environ[I]},{B:'db.reader.'+os.environ[H],G:\"\
                  Points the Internal DB Reader Endpoint Back to the RDS Proxy's Writer\"\
                  ,C:os.environ['RDS_REGIONAL_READER_ENDPOINT'],D:os.environ[I]}]\n\tfor A\
                  \ in F:E.change_resource_record_sets(ChangeBatch={'Changes':[{'Action':'UPSERT','ResourceRecordSet':{'Name':A[B],'ResourceRecords':[{'Value':A[C]}],'TTL':1,'Type':'CNAME'}}]},HostedZoneId=A[D])\n\
                  \treturn _A\ndef disable_proxy_monitor_cron():\n\ttry:boto3.client('events').disable_rule(Name=os.environ['PROXY_MONITOR_CRON_NAME'])\n\
                  \texcept boto3_client_error as A:raise Exception('Failed to Disable Proxy\
                  \ Monitor Cron: '+str(A))\n\treturn _A\ndef is_rds_proxy_target_available():\n\
                  \ttry:A=rds_client.describe_db_proxy_targets(DBProxyName=os.environ['REGIONAL_RDS_PROXY_NAME'],TargetGroupName='default')\n\
                  \texcept boto3_client_error as B:raise Exception('Failed to Retrieve RDS\
                  \ Proxy Targets: '+str(B))\n\tprint(A)\n\tif\"'State': 'AVAILABLE'\"in str(A):return\
                  \ _A\n\telse:return False\ndef log_event():D=dateutil.tz.gettz('US/Eastern');A=get_rds_credentials();B=psycopg2.connect(host=A['host'],port=A['port'],user=A['username'],sslmode='require',password=A['password'],database=A['database'],connect_timeout=3);C=B.cursor();C.execute(\"\
                  INSERT INTO failoverevents (event,insertedon) values (5,'\"+datetime.now(tz=D).strftime('%m/%d/%Y\
                  \ %H:%M:%S')+\"' )\");B.commit();C.close();B.close()\ndef lambda_handler(event,context):\n\
                  \tA=datetime.now();B=A+timedelta(seconds=50)\n\twhile datetime.now()<B:\n\
                  \t\ttry:\n\t\t\tif is_rds_proxy_target_available():print('Target is Registered\
                  \ and Available');log_event();disable_proxy_monitor_cron();change_db_cnames_to_rds_proxy();break\n\
                  \t\t\telse:print('Target is NOT Registered and Available')\n\t\texcept Exception\
                  \ as C:time.sleep(10)"
              Description: ''
              Environment:
                Variables:
                  PRIVATE_HOSTED_ZONE_ID: !Ref 'PrivateHostedZoneID'
                  PROXY_MONITOR_CRON_NAME: !Join
                    - ''
                    - - !Ref 'MainStackName'
                      - -proxy-monitor
                  REGIONAL_RDS_PROXY_NAME: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - RDSProxyName}}
                  REGIONAL_RDS_PROXY_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - RDSProxyReaderEndpoint}}
                  REGIONAL_RDS_PROXY_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - RDSProxyWriterEndpoint}}
              Handler: index.handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'RDSProxyMonitorRole.Arn'
              Runtime: python3.9
              Timeout: 120
              TracingConfig:
                Mode: PassThrough
            Type: AWS::Lambda::Function
          RDSProxyMonitorCron:
            Condition: IsFailoverRegion
            DependsOn:
              - RDSProxyMonitor
            Properties:
              Description: !Join
                - ''
                - - Invokes the RDS Proxy Monitor
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -proxy-monitor
              ScheduleExpression: rate(1 minute)
              State: DISABLED
              Targets:
                - Arn: !GetAtt 'RDSProxyMonitor.Arn'
                  Id: RDSProxyMonitor
            Type: AWS::Events::Rule
          RDSProxyMonitorCronPermission:
            Condition: IsFailoverRegion
            DependsOn:
              - RDSProxyMonitor
              - RDSProxyMonitorCron
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'RDSProxyMonitor'
              Principal: events.amazonaws.com
              SourceArn: !GetAtt 'RDSProxyMonitorCron.Arn'
            Type: AWS::Lambda::Permission
          RDSProxyMonitorLogGroup:
            Condition: IsFailoverRegion
            DeletionPolicy: Retain
            DependsOn:
              - RDSProxyMonitor
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'RDSProxyMonitor'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          RDSProxyMonitorRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                      - Action:
                          - rds:DescribeDBProxyTargets
                        Effect: Allow
                        Resource:
                          - '*'
                        Sid: DescribeDBProxyTargets
                      - Action:
                          - route53:ChangeResourceRecordSets
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - arn:aws:route53:::hostedzone/
                              - !Ref 'PrivateHostedZoneID'
                        Sid: SendMessagesToSNS
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          RDSProxyMonitorRoleEventBridgePolicy:
            Condition: IsFailoverRegion
            DependsOn:
              - RDSProxyMonitorRole
              - RDSProxyMonitorCron
            Properties:
              PolicyDocument:
                Statement:
                  - Action:
                      - events:DisableRule
                    Effect: Allow
                    Resource:
                      - !GetAtt 'RDSProxyMonitorCron.Arn'
                    Sid: DisableEventBridgeRule
              PolicyName: event-bridge-policy
              Roles:
                - !Ref 'RDSProxyMonitorRole'
            Type: AWS::IAM::Policy
    Type: AWS::CloudFormation::StackSet
  LambdaLayerCreator:
    DependsOn:
      - LambdaLayerCreatorRole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import sys\nsys.path.append('/opt')\n\nimport io\nimport os\nimport\
          \ json\nimport boto3\nimport subprocess\nimport cfnresponse\nfrom zipfile\
          \ import ZipFile\nfrom botocore.exceptions import ClientError as boto3_client_error\n\
          \ndef zip_directory(path):\n    for root, dirs, files in os.walk(path):\n\
          \        for f in files:\n            full_path = os.path.join(root, f)\n\
          \            archive_name = full_path[len(path) + len(os.sep):]\n      \
          \      yield full_path, archive_name\n            \ndef make_zip_file_bytes(path):\n\
          \    \n    buf = io.BytesIO()\n    with ZipFile(buf, 'w') as z:\n      \
          \  for full_path, archive_name in zip_directory(path = path):\n        \
          \    z.write(full_path, archive_name)\n    \n    return buf.getvalue()\n\
          \    \n'''\n    - Region | str\n    - Packages | list\n    - LayerName |\
          \ str\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n\
          \    \n    arguments = event['ResourceProperties']['Properties']\n    operation\
          \ = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n\
          \    response_data = {}\n    \n    boto3Session = boto3.Session(\n     \
          \   region_name = arguments['Region']\n    )\n                \n    lambda_client\
          \ = boto3Session.client('lambda')\n    \n    if event['RequestType'] in\
          \ ['Create', 'Update']:\n        \n        subprocess.call(('pip install\
          \ ' + ' '.join(arguments['Packages']) + ' -t /tmp/lambda-layer --no-cache-dir').split(),\
          \ stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)\n        \n\
          \        try:\n            \n            response = lambda_client.publish_layer_version(\n\
          \                LayerName = arguments['LayerName'],\n                Content\
          \ = {\n                    'ZipFile': make_zip_file_bytes('/tmp/lambda-layer')\n\
          \                },\n                CompatibleRuntimes = [\n          \
          \          'python3.9',\n                ],\n                CompatibleArchitectures\
          \ = [\n                    'x86_64', 'arm64',\n                ]\n     \
          \       )\n            \n            return cfnresponse.send(event, context,\
          \ cfnresponse.SUCCESS, response_data, response['LayerVersionArn'])\n   \
          \     \n        except boto3_client_error as e:\n            print('Failed\
          \ to Deploy Lambda Layer: ' + str(e.response))\n            return cfnresponse.send(event,\
          \ context, cfnresponse.FAILED, response_data)\n            \n    if event['RequestType']\
          \ in ['Delete']:\n        \n        try:\n            \n            layer_versions_response\
          \ = lambda_client.list_layer_versions(\n                LayerName = arguments['LayerName'],\n\
          \            )\n            \n            for version in layer_versions_response['LayerVersions']:\n\
          \                \n                response = lambda_client.delete_layer_version(\n\
          \                    LayerName = arguments['LayerName'],\n             \
          \       VersionNumber = version['Version']\n                )\n\n      \
          \  except boto3_client_error as e:\n            print('Failed to Delete\
          \ Layer Versions: ' + str(e.response))\n            return cfnresponse.send(event,\
          \ context, cfnresponse.FAILED, response_data)\n        \n        return\
          \ cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
      Description: ''
      Handler: index.handler
      Layers: []
      MemorySize: 256
      Role: !GetAtt 'LambdaLayerCreatorRole.Arn'
      Runtime: python3.9
      Timeout: 30
      TracingConfig:
        Mode: PassThrough
    Type: AWS::Lambda::Function
  LambdaLayerCreatorLogGroup:
    DeletionPolicy: Retain
    DependsOn:
      - LambdaLayerCreator
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'LambdaLayerCreator'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  LambdaLayerCreatorRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - lambda:ListLayerVersions
                  - lambda:DeleteLayerVersion
                  - lambda:PublishLayerVersion
                Effect: Allow
                Resource:
                  - !Join
                    - ':'
                    - - arn
                      - !Ref 'AWS::Partition'
                      - lambda
                      - !Ref 'PrimaryRegionName'
                      - !Ref 'AWS::AccountId'
                      - layer
                      - !Ref 'AWS::StackName'
                  - !Join
                    - ':'
                    - - arn
                      - !Ref 'AWS::Partition'
                      - lambda
                      - !Ref 'FailoverRegionName'
                      - !Ref 'AWS::AccountId'
                      - layer
                      - !Ref 'AWS::StackName'
                  - !Join
                    - ':'
                    - - arn
                      - !Ref 'AWS::Partition'
                      - lambda
                      - !Ref 'PrimaryRegionName'
                      - !Ref 'AWS::AccountId'
                      - layer
                      - !Ref 'AWS::StackName'
                      - '*'
                  - !Join
                    - ':'
                    - - arn
                      - !Ref 'AWS::Partition'
                      - lambda
                      - !Ref 'FailoverRegionName'
                      - !Ref 'AWS::AccountId'
                      - layer
                      - !Ref 'AWS::StackName'
                      - '*'
                Sid: CreateAndDeleteLambdaLayers
          PolicyName: main-policy
    Type: AWS::IAM::Role
  NetworkingStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Networking
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Networking
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Outputs:
          DatabaseACLID:
            Condition: ''
            Value: !GetAtt 'DatabaseACL.Id'
          FailoverDatabaseSubnetID:
            Condition: ''
            Value: !Ref 'FailoverDatabaseSubnet'
          FailoverPrivateSubnetID:
            Condition: ''
            Value: !Ref 'FailoverPrivateSubnet'
          FailoverPublicSubnetID:
            Condition: ''
            Value: !Ref 'FailoverPublicSubnet'
          LambdaSecurityGroupID:
            Condition: ''
            Value: !Ref 'LambdaSecurityGroup'
          PrimaryDatabaseSubnetID:
            Condition: ''
            Value: !Ref 'PrimaryDatabaseSubnet'
          PrimaryPrivateSubnetID:
            Condition: ''
            Value: !Ref 'PrimaryPrivateSubnet'
          PrimaryPublicSubnetID:
            Condition: ''
            Value: !Ref 'PrimaryPublicSubnet'
          VPCExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -VPCId
            Value: !Ref 'VPC'
          VPCID:
            Condition: ''
            Value: !Ref 'VPC'
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          DatabaseACL:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Ref 'AWS::StackName'
                      - Database
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::NetworkAcl
          DatabaseACLEgressEntry:
            Properties:
              CidrBlock: '0.0.0.0/0'
              Egress: true
              NetworkAclId: !Ref 'DatabaseACL'
              Protocol: -1
              RuleAction: allow
              RuleNumber: 100
            Type: AWS::EC2::NetworkAclEntry
          DatabaseACLIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Database ACL ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - DatabaseACLID
              Tier: Standard
              Type: String
              Value: !GetAtt 'DatabaseACL.Id'
            Type: AWS::SSM::Parameter
          DatabaseACLIngressEntry:
            Properties:
              CidrBlock: '0.0.0.0/0'
              Egress: false
              NetworkAclId: !Ref 'DatabaseACL'
              Protocol: -1
              RuleAction: allow
              RuleNumber: 100
            Type: AWS::EC2::NetworkAclEntry
          FailoverDatabaseRouteTable:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - FailoverDatabaseRouteTable
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::RouteTable
          FailoverDatabaseRouteToNATGateway:
            DependsOn:
              - FailoverNATGateway
              - FailoverDatabaseRouteTable
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              NatGatewayId: !Ref 'FailoverNATGateway'
              RouteTableId: !Ref 'FailoverDatabaseRouteTable'
            Type: AWS::EC2::Route
          FailoverDatabaseSubnet:
            DependsOn:
              - VPC
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - b
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
                - !Ref 'FailoverFailoverDatabaseSubnetCIDR'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - FailoverDatabaseSubnet
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::Subnet
          FailoverDatabaseSubnetACLAssociation:
            Properties:
              NetworkAclId: !Ref 'DatabaseACL'
              SubnetId: !Ref 'FailoverDatabaseSubnet'
            Type: AWS::EC2::SubnetNetworkAclAssociation
          FailoverDatabaseSubnetIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Failover Database Subnet for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - FailoverDatabaseSubnetID
              Tier: Standard
              Type: String
              Value: !Ref 'FailoverDatabaseSubnet'
            Type: AWS::SSM::Parameter
          FailoverDatabaseSubnetTableAssociation:
            DependsOn:
              - VPC
              - FailoverDatabaseSubnet
              - FailoverDatabaseRouteTable
            Properties:
              RouteTableId: !Ref 'FailoverDatabaseRouteTable'
              SubnetId: !Ref 'FailoverDatabaseSubnet'
            Type: AWS::EC2::SubnetRouteTableAssociation
          FailoverNATGateway:
            DependsOn:
              - FailoverPublicSubnet
              - FailoverNATGatewayEIP
            Properties:
              AllocationId: !GetAtt 'FailoverNATGatewayEIP.AllocationId'
              SubnetId: !Ref 'FailoverPublicSubnet'
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - FailoverNATGateway
                      - '-'
                      - !Ref 'AWS::StackName'
            Type: AWS::EC2::NatGateway
          FailoverNATGatewayEIP:
            Properties:
              Domain: VPC
            Type: AWS::EC2::EIP
          FailoverPrivateRouteTable:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - FailoverPrivateRouteTable
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::RouteTable
          FailoverPrivateRouteToNATGateway:
            DependsOn:
              - FailoverNATGateway
              - FailoverPrivateRouteTable
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              NatGatewayId: !Ref 'FailoverNATGateway'
              RouteTableId: !Ref 'FailoverPrivateRouteTable'
            Type: AWS::EC2::Route
          FailoverPrivateSubnet:
            DependsOn:
              - VPC
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - b
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryFailoverPrivateSubnetCIDR'
                - !Ref 'FailoverFailoverPrivateSubnetCIDR'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - FailoverPrivateSubnet
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::Subnet
          FailoverPrivateSubnetIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Failover Private Subnet for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - FailoverPrivateSubnetID
              Tier: Standard
              Type: String
              Value: !Ref 'FailoverPrivateSubnet'
            Type: AWS::SSM::Parameter
          FailoverPrivateSubnetTableAssociation:
            DependsOn:
              - VPC
              - FailoverPrivateSubnet
              - FailoverPrivateRouteTable
            Properties:
              RouteTableId: !Ref 'FailoverPrivateRouteTable'
              SubnetId: !Ref 'FailoverPrivateSubnet'
            Type: AWS::EC2::SubnetRouteTableAssociation
          FailoverPublicSubnet:
            DependsOn:
              - VPC
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - b
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryFailoverPublicSubnetCIDR'
                - !Ref 'FailoverFailoverPublicSubnetCIDR'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - FailoverPublicSubnet
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::Subnet
          FailoverPublicSubnetIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Failover Public Subnet for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - FailoverPublicSubnetID
              Tier: Standard
              Type: String
              Value: !Ref 'FailoverPublicSubnet'
            Type: AWS::SSM::Parameter
          FailoverPublicSubnetTableAssociation:
            DependsOn:
              - VPC
              - FailoverPublicSubnet
              - PublicRouteTable
            Properties:
              RouteTableId: !Ref 'PublicRouteTable'
              SubnetId: !Ref 'FailoverPublicSubnet'
            Type: AWS::EC2::SubnetRouteTableAssociation
          InternetGateway:
            Properties:
              Tags:
                - Key: Name
                  Value: !Ref 'AWS::StackName'
            Type: AWS::EC2::InternetGateway
          InternetGatewayVPCAssociation:
            DependsOn:
              - VPC
              - InternetGateway
            Properties:
              InternetGatewayId: !Ref 'InternetGateway'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::VPCGatewayAttachment
          LambdaSecurityGroup:
            Properties:
              GroupDescription: Lambda Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress: []
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::SecurityGroup
          LambdaSecurityGroupIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Lambda Security Group ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - LambdaSecurityGroupID
              Tier: Standard
              Type: String
              Value: !Ref 'LambdaSecurityGroup'
            Type: AWS::SSM::Parameter
          PrimaryDatabaseRouteTable:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrimaryDatabaseRouteTable
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::RouteTable
          PrimaryDatabaseRouteToNATGateway:
            DependsOn:
              - PrimaryNATGateway
              - PrimaryDatabaseRouteTable
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              NatGatewayId: !Ref 'PrimaryNATGateway'
              RouteTableId: !Ref 'PrimaryDatabaseRouteTable'
            Type: AWS::EC2::Route
          PrimaryDatabaseSubnet:
            DependsOn:
              - VPC
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - a
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
                - !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrimaryDatabaseSubnet
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::Subnet
          PrimaryDatabaseSubnetACLAssociation:
            Properties:
              NetworkAclId: !Ref 'DatabaseACL'
              SubnetId: !Ref 'PrimaryDatabaseSubnet'
            Type: AWS::EC2::SubnetNetworkAclAssociation
          PrimaryDatabaseSubnetIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Primary Database Subnet for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrimaryDatabaseSubnetID
              Tier: Standard
              Type: String
              Value: !Ref 'PrimaryDatabaseSubnet'
            Type: AWS::SSM::Parameter
          PrimaryDatabaseSubnetTableAssociation:
            DependsOn:
              - VPC
              - PrimaryDatabaseSubnet
              - PrimaryDatabaseRouteTable
            Properties:
              RouteTableId: !Ref 'PrimaryDatabaseRouteTable'
              SubnetId: !Ref 'PrimaryDatabaseSubnet'
            Type: AWS::EC2::SubnetRouteTableAssociation
          PrimaryNATGateway:
            DependsOn:
              - PrimaryPublicSubnet
              - PrimaryNATGatewayEIP
            Properties:
              AllocationId: !GetAtt 'PrimaryNATGatewayEIP.AllocationId'
              SubnetId: !Ref 'PrimaryPublicSubnet'
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrimaryNATGateway
                      - '-'
                      - !Ref 'AWS::StackName'
            Type: AWS::EC2::NatGateway
          PrimaryNATGatewayEIP:
            Properties:
              Domain: VPC
            Type: AWS::EC2::EIP
          PrimaryPrivateRouteTable:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrimaryPrivateRouteTable
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::RouteTable
          PrimaryPrivateRouteToNATGateway:
            DependsOn:
              - PrimaryNATGateway
              - PrimaryPrivateRouteTable
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              NatGatewayId: !Ref 'PrimaryNATGateway'
              RouteTableId: !Ref 'PrimaryPrivateRouteTable'
            Type: AWS::EC2::Route
          PrimaryPrivateSubnet:
            DependsOn:
              - VPC
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - a
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
                - !Ref 'FailoverPrimaryPrivateSubnetCIDR'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrimaryPrivateSubnet
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::Subnet
          PrimaryPrivateSubnetIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Primary Private Subnet for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrimaryPrivateSubnetID
              Tier: Standard
              Type: String
              Value: !Ref 'PrimaryPrivateSubnet'
            Type: AWS::SSM::Parameter
          PrimaryPrivateSubnetTableAssociation:
            DependsOn:
              - VPC
              - PrimaryPrivateSubnet
              - PrimaryPrivateRouteTable
            Properties:
              RouteTableId: !Ref 'PrimaryPrivateRouteTable'
              SubnetId: !Ref 'PrimaryPrivateSubnet'
            Type: AWS::EC2::SubnetRouteTableAssociation
          PrimaryPublicSubnet:
            DependsOn:
              - VPC
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - a
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryPrimaryPublicSubnetCIDR'
                - !Ref 'FailoverPrimaryPublicSubnetCIDR'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrimaryPublicSubnet
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::Subnet
          PrimaryPublicSubnetIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Primary Public Subnet for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrimaryPublicSubnetID
              Tier: Standard
              Type: String
              Value: !Ref 'PrimaryPublicSubnet'
            Type: AWS::SSM::Parameter
          PrimaryPublicSubnetTableAssociation:
            DependsOn:
              - VPC
              - PrimaryPublicSubnet
              - PublicRouteTable
            Properties:
              RouteTableId: !Ref 'PublicRouteTable'
              SubnetId: !Ref 'PrimaryPublicSubnet'
            Type: AWS::EC2::SubnetRouteTableAssociation
          PublicRouteTable:
            DependsOn:
              - VPC
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PublicRouteTable-
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'VPC'
            Type: AWS::EC2::RouteTable
          PublicRouteToInternet:
            DependsOn:
              - InternetGateway
              - PublicRouteTable
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              GatewayId: !Ref 'InternetGateway'
              RouteTableId: !Ref 'PublicRouteTable'
            Type: AWS::EC2::Route
          VPC:
            Properties:
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryVPCCIDR'
                - !Ref 'FailoverVPCCIDR'
              EnableDnsHostnames: true
              EnableDnsSupport: true
              Tags:
                - Key: Name
                  Value: !Ref 'AWS::StackName'
            Type: AWS::EC2::VPC
          VPCIDParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'VPC for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - VPCID
              Tier: Standard
              Type: String
              Value: !Ref 'VPC'
            Type: AWS::SSM::Parameter
    Type: AWS::CloudFormation::StackSet
  PrimaryLambdaLayerCreatorResource:
    DependsOn:
      - LambdaLayerCreatorLogGroup
    Properties:
      Properties:
        LayerName: !Ref 'AWS::StackName'
        Packages:
          - requests
          - cfnresponse
          - psycopg2-binary
        Region: !Ref 'PrimaryRegionName'
      ServiceToken: !GetAtt 'LambdaLayerCreator.Arn'
      Type: Custom::DeployLambdaLayer
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  PrimaryRegionDashboardURLRetriever:
    DependsOn:
      - DashboardStackSet
      - CFNExportRetrieverLogGroup
    Properties:
      Properties:
        ExportPrefix: !Ref 'AWS::StackName'
        Region: !Ref 'PrimaryRegionName'
      ServiceToken: !GetAtt 'CFNExportRetriever.Arn'
      Type: Custom::GetCFNExports
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  PrimaryRegionVPCIdRetriever:
    DependsOn:
      - NetworkingStackSet
      - CFNExportRetrieverLogGroup
    Properties:
      Properties:
        ExportPrefix: !Ref 'AWS::StackName'
        Region: !Ref 'PrimaryRegionName'
      ServiceToken: !GetAtt 'CFNExportRetriever.Arn'
      Type: Custom::GetCFNExports
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  PrivateHostedZone:
    DependsOn:
      - NetworkingStackSet
      - PrimaryRegionVPCIdRetriever
      - FailoverRegionVPCIdRetriever
    Properties:
      Name: !Join
        - ''
        - - !Ref 'PublicFQDN'
          - .internal
      VPCs:
        - VPCId: !GetAtt 'PrimaryRegionVPCIdRetriever.VPCId'
          VPCRegion: !Ref 'PrimaryRegionName'
        - VPCId: !GetAtt 'FailoverRegionVPCIdRetriever.VPCId'
          VPCRegion: !Ref 'FailoverRegionName'
    Type: AWS::Route53::HostedZone
  StackSetAdministrationRole:
    DependsOn:
      - StackSetExecutionRole
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - sts:AssumeRole
                Effect: Allow
                Resource:
                  - !GetAtt 'StackSetExecutionRole.Arn'
          PolicyName: main-policy
    Type: AWS::IAM::Role
  StackSetExecutionRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                - !Ref 'AWS::AccountId'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
    Type: AWS::IAM::Role
  WebsiteStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - DatabasesStackSet
      - NetworkingStackSet
      - PrivateHostedZone
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
      - PrimaryLambdaLayerCreatorResource
      - FailoverLambdaLayerCreatorResource
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Website
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: CodeDownloadURL
          ParameterValue: !Ref 'CodeDownloadURL'
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DBAdminUsername
          ParameterValue: !Ref 'DBAdminUsername'
        - ParameterKey: DBAdminPassword
          ParameterValue: !Ref 'DBAdminPassword'
        - ParameterKey: PublicFQDN
          ParameterValue: !Ref 'PublicFQDN'
        - ParameterKey: PublicHostedZoneID
          ParameterValue: !Ref 'PublicHostedZoneID'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryKMSKeyID
          ParameterValue: !Ref 'PrimaryKMSKeyID'
        - ParameterKey: PrimaryVPCCIDR
          ParameterValue: !Ref 'PrimaryVPCCIDR'
        - ParameterKey: PrimaryPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPublicSubnetCIDR'
        - ParameterKey: PrimaryPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryPrivateSubnetCIDR'
        - ParameterKey: PrimaryPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryPrimaryDatabaseSubnetCIDR'
        - ParameterKey: PrimaryFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPublicSubnetCIDR'
        - ParameterKey: PrimaryFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverPrivateSubnetCIDR'
        - ParameterKey: PrimaryFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'PrimaryFailoverDatabaseSubnetCIDR'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverKMSKeyID
          ParameterValue: !Ref 'FailoverKMSKeyID'
        - ParameterKey: FailoverVPCCIDR
          ParameterValue: !Ref 'FailoverVPCCIDR'
        - ParameterKey: FailoverPrimaryPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPublicSubnetCIDR'
        - ParameterKey: FailoverPrimaryPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryPrivateSubnetCIDR'
        - ParameterKey: FailoverPrimaryDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverPrimaryDatabaseSubnetCIDR'
        - ParameterKey: FailoverFailoverPublicSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPublicSubnetCIDR'
        - ParameterKey: FailoverFailoverPrivateSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverPrivateSubnetCIDR'
        - ParameterKey: FailoverFailoverDatabaseSubnetCIDR
          ParameterValue: !Ref 'FailoverFailoverDatabaseSubnetCIDR'
        - ParameterKey: PrivateHostedZoneID
          ParameterValue: !Ref 'PrivateHostedZone'
        - ParameterKey: PrimaryLambdaLayerARN
          ParameterValue: !Ref 'PrimaryLambdaLayerCreatorResource'
        - ParameterKey: FailoverLambdaLayerARN
          ParameterValue: !Ref 'FailoverLambdaLayerCreatorResource'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Website
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: November 29, 2022
          Version: v1.0
        Outputs:
          LoadBalancerARN:
            Condition: ''
            Value: !Ref 'ALB'
          LoadBalancerFQDN:
            Condition: ''
            Value: !GetAtt 'ALB.DNSName'
          Port443ALBListenerARN:
            Condition: ''
            Value: !Ref 'Port443ALBListener'
        Parameters:
          CodeDownloadURL:
            Default: https://codeload.github.com/aws-samples/amazon-aurora-postgresql-fast-failover-demo/zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This
              codebase is used to deploy the demo dashboard.
            Type: String
          DBAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DBAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverFailoverDatabaseSubnetCIDR:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverFailoverPrivateSubnetCIDR:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverFailoverPublicSubnetCIDR:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          FailoverLambdaLayerARN:
            Type: String
          FailoverPrimaryDatabaseSubnetCIDR:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverPrimaryPrivateSubnetCIDR:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrimaryPublicSubnetCIDR:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverRegionName:
            Description: The name of the failover region (e.g., us-east-1)
            Type: String
          FailoverVPCCIDR:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryFailoverDatabaseSubnetCIDR:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryFailoverPrivateSubnetCIDR:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryFailoverPublicSubnetCIDR:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryKMSKeyID:
            Description: >-
              The KMS key to be used for cross-region data encryption (e.g., RDS Aurora, Secrets
              Manager). This must correspond to a multi-region CMK available in both the primary
              and failover regions. For more information, visit: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html
            Type: String
          PrimaryLambdaLayerARN:
            Type: String
          PrimaryPrimaryDatabaseSubnetCIDR:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryPrimaryPrivateSubnetCIDR:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrimaryPublicSubnetCIDR:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryRegionName:
            Description: The name of the primary region (e.g., us-east-1)
            Type: String
          PrimaryVPCCIDR:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PrivateHostedZoneID:
            Type: String
          PublicFQDN:
            Description: The FQDN to be used by this application. An Amazon ACM Certificate
              will be issued for this FQDN.
            Type: String
          PublicHostedZoneID:
            Description: The ID of the Route 53 Hosted Zone corresponding to the Service FQDN.
            Type: String
        Resources:
          ALB:
            DependsOn:
              - ALBSecurityGroup
            Properties:
              IpAddressType: ipv4
              Scheme: internet-facing
              SecurityGroups:
                - !Ref 'ALBSecurityGroup'
              Subnets:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PrimaryPublicSubnetID}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /FailoverPublicSubnetID}}
              Type: application
            Type: AWS::ElasticLoadBalancingV2::LoadBalancer
          ALBSecurityGroup:
            Properties:
              GroupDescription: ALB Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress:
                - CidrIp: '0.0.0.0/0'
                  Description: IPv4 HTTP Access from Internet
                  FromPort: 80
                  IpProtocol: tcp
                  ToPort: 80
                - CidrIp: '0.0.0.0/0'
                  Description: IPv4 HTTP Access from Internet
                  FromPort: 443
                  IpProtocol: tcp
                  ToPort: 443
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /VPCID}}
            Type: AWS::EC2::SecurityGroup
          Certificate:
            Properties:
              DomainName: !Ref 'PublicFQDN'
              DomainValidationOptions:
                - DomainName: !Ref 'PublicFQDN'
                  HostedZoneId: !Ref 'PublicHostedZoneID'
              ValidationMethod: DNS
            Type: AWS::CertificateManager::Certificate
          DNSRecord:
            Condition: IsPrimaryRegion
            DependsOn:
              - ALB
            Properties:
              HostedZoneId: !Ref 'PublicHostedZoneID'
              RecordSets:
                - AliasTarget:
                    DNSName: !GetAtt 'ALB.DNSName'
                    EvaluateTargetHealth: false
                    HostedZoneId: !GetAtt 'ALB.CanonicalHostedZoneID'
                  Name: !Ref 'PublicFQDN'
                  Type: A
            Type: AWS::Route53::RecordSetGroup
          DemoSite:
            DependsOn:
              - DemoSiteRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\n\
                  import boto3\nimport datetime\nimport psycopg2\nimport dateutil.tz\nfrom\
                  \ botocore.exceptions import ClientError as boto3_client_error\n\ndef get_region(context):\n\
                  \    return context.invoked_function_arn.split(':')[3]\n\ndef get_rds_credentials():\n\
                  \    \n    secrets_manager_client = boto3.client('secretsmanager')\n\n \
                  \   try:\n        \n        get_secret_value_response = secrets_manager_client.get_secret_value(\n\
                  \            SecretId = os.environ['REGIONAL_RDS_SECRET_ARN']\n        )\n\
                  \        \n    except boto3_client_error as e:\n        raise Exception('Failed\
                  \ to Retrieve RDS Secret: ' + str(e))\n        \n    else:\n        return\
                  \ json.loads(get_secret_value_response['SecretString'])\n        \ndef lambda_handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n    \n    http_status_code\
                  \ = 200\n    \n    try: \n        \n        guid = event['queryStringParameters']['guid']\n\
                  \n        eastern = dateutil.tz.gettz('US/Eastern')\n\n        sql_statement\
                  \ = \"INSERT INTO dataserver (guid,insertedon) VALUES ('\" + str(guid) +\
                  \ \"','\" + datetime.datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\"\
                  ) + \"') RETURNING id\"\n        \n        rds_secret = get_rds_credentials()\n\
                  \        \n        db_conn = psycopg2.connect(\n            host = os.environ['GLOBAL_DB_WRITER_ENDPOINT'],\n\
                  \            port = rds_secret['port'],\n            user = rds_secret['username'],\n\
                  \            password = rds_secret['password'],\n            database =\
                  \ rds_secret['database'],\n            connect_timeout = 3,\n          \
                  \  sslmode = 'require',\n        )\n        \n        id = 0\n        http_status_code\
                  \ = 200\n        curs = db_conn.cursor()\n        curs.execute(sql_statement)\n\
                  \        id = curs.fetchone()[0]\n        print(id)\n        db_conn.commit()\n\
                  \        curs.close()\n        db_conn.close()\n        \n    except Exception\
                  \ as e:\n        http_status_code = 500\n        print(e)\n        \n  \
                  \  return {\n        'statusCode': http_status_code,\n        'headers':\
                  \ {'content-type': 'text/html'},\n        'body': 'You\\'ve reached the\
                  \ <strong>' + get_region(context) + '</strong> site!'\n    }"
              Description: ''
              Environment:
                Variables:
                  GLOBAL_DB_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSGlobalWriterDNSEndpoint}}
                  REGIONAL_RDS_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RDSAdminSecretARN}}
              Handler: index.lambda_handler
              Layers:
                - !If
                  - IsPrimaryRegion
                  - !Ref 'PrimaryLambdaLayerARN'
                  - !Ref 'FailoverLambdaLayerARN'
              MemorySize: 128
              Role: !GetAtt 'DemoSiteRole.Arn'
              Runtime: python3.9
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupID}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrimaryPrivateSubnetID}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /FailoverPrivateSubnetID}}
            Type: AWS::Lambda::Function
          DemoSiteLogGroup:
            DeletionPolicy: Retain
            DependsOn:
              - DemoSite
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'DemoSite'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          DemoSiteRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds-db:Connect
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSProxyARN}}
                        Sid: ConnectToRDSProxy
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RDSAdminSecretARN}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !Ref 'PrimaryKMSKeyID'
                            - !Ref 'FailoverKMSKeyID'
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          DemoSiteTargetGroup:
            DependsOn:
              - DemoSite
            Properties:
              HealthCheckEnabled: false
              Matcher:
                HttpCode: '200'
              TargetType: lambda
              Targets:
                - Id: !GetAtt 'DemoSite.Arn'
            Type: AWS::ElasticLoadBalancingV2::TargetGroup
          DemoSiteTargetGroupPermission:
            DependsOn:
              - DemoSite
              - DemoSiteTargetGroup
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'DemoSite'
              Principal: elasticloadbalancing.amazonaws.com
              SourceAccount: !Ref 'AWS::AccountId'
              SourceArn: !Ref 'DemoSiteTargetGroup'
            Type: AWS::Lambda::Permission
          LoadBalancerARNParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'ALB ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - LoadBalancerARN
              Tier: Standard
              Type: String
              Value: !Ref 'ALB'
            Type: AWS::SSM::Parameter
          LoadBalancerFQDNParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'ALB FQDN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - LoadBalancerFQDN
              Tier: Standard
              Type: String
              Value: !GetAtt 'ALB.DNSName'
            Type: AWS::SSM::Parameter
          Port443ALBListener:
            DependsOn:
              - DemoSiteTargetGroup
            Properties:
              Certificates:
                - CertificateArn: !Ref 'Certificate'
              DefaultActions:
                - TargetGroupArn: !Ref 'DemoSiteTargetGroup'
                  Type: forward
              LoadBalancerArn: !Ref 'ALB'
              Port: 443
              Protocol: HTTPS
            Type: AWS::ElasticLoadBalancingV2::Listener
          Port443ALBListenerARNParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'ALB ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - Port443ALBListenerARN
              Tier: Standard
              Type: String
              Value: !Ref 'Port443ALBListener'
            Type: AWS::SSM::Parameter
          Port80ALBListener:
            DependsOn:
              - ALB
            Properties:
              DefaultActions:
                - RedirectConfig:
                    Host: '#{host}'
                    Path: /#{path}
                    Port: '443'
                    Protocol: HTTPS
                    Query: '#{query}'
                    StatusCode: HTTP_301
                  Type: redirect
              LoadBalancerArn: !Ref 'ALB'
              Port: 80
              Protocol: HTTP
            Type: AWS::ElasticLoadBalancingV2::Listener
    Type: AWS::CloudFormation::StackSet
